
stm32_FSM_FreeRtos_Event_State.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004468  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047cc  080047cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080047cc  080047cc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047cc  080047cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080047d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a84  20000010  080047e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a94  080047e4  00022a94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ee2  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b57  00000000  00000000  00031f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00034ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d12  00000000  00000000  00035ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025d4  00000000  00000000  000368ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011575  00000000  00000000  00038e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000915dc  00000000  00000000  0004a403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000468c  00000000  00000000  000db9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004560 	.word	0x08004560

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004560 	.word	0x08004560

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b08a      	sub	sp, #40	; 0x28
 8000154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fb0d 	bl	8000774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f8a3 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f8dd 	bl	800031c <MX_GPIO_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000162:	f001 fc2b 	bl	80019bc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueState */
  QueueStateHandle = osMessageQueueNew (16, sizeof(uint16_t), &QueueState_attributes);
 8000166:	4a31      	ldr	r2, [pc, #196]	; (800022c <main+0xdc>)
 8000168:	2102      	movs	r1, #2
 800016a:	2010      	movs	r0, #16
 800016c:	f001 fd64 	bl	8001c38 <osMessageQueueNew>
 8000170:	4603      	mov	r3, r0
 8000172:	4a2f      	ldr	r2, [pc, #188]	; (8000230 <main+0xe0>)
 8000174:	6013      	str	r3, [r2, #0]

  /* creation of QueueMyEvent */
  QueueMyEventHandle = osMessageQueueNew (16, sizeof(uint16_t), &QueueMyEvent_attributes);
 8000176:	4a2f      	ldr	r2, [pc, #188]	; (8000234 <main+0xe4>)
 8000178:	2102      	movs	r1, #2
 800017a:	2010      	movs	r0, #16
 800017c:	f001 fd5c 	bl	8001c38 <osMessageQueueNew>
 8000180:	4603      	mov	r3, r0
 8000182:	4a2d      	ldr	r2, [pc, #180]	; (8000238 <main+0xe8>)
 8000184:	6013      	str	r3, [r2, #0]

  /* creation of myQueue0 */
  myQueue0Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue0_attributes);
 8000186:	4a2d      	ldr	r2, [pc, #180]	; (800023c <main+0xec>)
 8000188:	2102      	movs	r1, #2
 800018a:	2004      	movs	r0, #4
 800018c:	f001 fd54 	bl	8001c38 <osMessageQueueNew>
 8000190:	4603      	mov	r3, r0
 8000192:	4a2b      	ldr	r2, [pc, #172]	; (8000240 <main+0xf0>)
 8000194:	6013      	str	r3, [r2, #0]

  /* creation of myQueue1 */
  myQueue1Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue1_attributes);
 8000196:	4a2b      	ldr	r2, [pc, #172]	; (8000244 <main+0xf4>)
 8000198:	2102      	movs	r1, #2
 800019a:	2004      	movs	r0, #4
 800019c:	f001 fd4c 	bl	8001c38 <osMessageQueueNew>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4a29      	ldr	r2, [pc, #164]	; (8000248 <main+0xf8>)
 80001a4:	6013      	str	r3, [r2, #0]

  /* creation of myQueue2 */
  myQueue2Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue2_attributes);
 80001a6:	4a29      	ldr	r2, [pc, #164]	; (800024c <main+0xfc>)
 80001a8:	2102      	movs	r1, #2
 80001aa:	2004      	movs	r0, #4
 80001ac:	f001 fd44 	bl	8001c38 <osMessageQueueNew>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4a27      	ldr	r2, [pc, #156]	; (8000250 <main+0x100>)
 80001b4:	6013      	str	r3, [r2, #0]

  /* creation of myQueue3 */
  myQueue3Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue3_attributes);
 80001b6:	4a27      	ldr	r2, [pc, #156]	; (8000254 <main+0x104>)
 80001b8:	2102      	movs	r1, #2
 80001ba:	2004      	movs	r0, #4
 80001bc:	f001 fd3c 	bl	8001c38 <osMessageQueueNew>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4a25      	ldr	r2, [pc, #148]	; (8000258 <main+0x108>)
 80001c4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskBlinkLong */
  TaskBlinkLongHandle = osThreadNew(fTaskBlinkLong, NULL, &TaskBlinkLong_attributes);
 80001c6:	4a25      	ldr	r2, [pc, #148]	; (800025c <main+0x10c>)
 80001c8:	2100      	movs	r1, #0
 80001ca:	4825      	ldr	r0, [pc, #148]	; (8000260 <main+0x110>)
 80001cc:	f001 fc5c 	bl	8001a88 <osThreadNew>
 80001d0:	4603      	mov	r3, r0
 80001d2:	4a24      	ldr	r2, [pc, #144]	; (8000264 <main+0x114>)
 80001d4:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlinkShort */
  TaskBlinkShortHandle = osThreadNew(fTaskBlinkShort, NULL, &TaskBlinkShort_attributes);
 80001d6:	4a24      	ldr	r2, [pc, #144]	; (8000268 <main+0x118>)
 80001d8:	2100      	movs	r1, #0
 80001da:	4824      	ldr	r0, [pc, #144]	; (800026c <main+0x11c>)
 80001dc:	f001 fc54 	bl	8001a88 <osThreadNew>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a23      	ldr	r2, [pc, #140]	; (8000270 <main+0x120>)
 80001e4:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlinkReal */
  TaskBlinkRealHandle = osThreadNew(fTaskBlinkReal, NULL, &TaskBlinkReal_attributes);
 80001e6:	4a23      	ldr	r2, [pc, #140]	; (8000274 <main+0x124>)
 80001e8:	2100      	movs	r1, #0
 80001ea:	4823      	ldr	r0, [pc, #140]	; (8000278 <main+0x128>)
 80001ec:	f001 fc4c 	bl	8001a88 <osThreadNew>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4a22      	ldr	r2, [pc, #136]	; (800027c <main+0x12c>)
 80001f4:	6013      	str	r3, [r2, #0]

  /* creation of TaskStateHandle */
  TaskStateHandleHandle = osThreadNew(fTaskStateHandler, NULL, &TaskStateHandle_attributes);
 80001f6:	4a22      	ldr	r2, [pc, #136]	; (8000280 <main+0x130>)
 80001f8:	2100      	movs	r1, #0
 80001fa:	4822      	ldr	r0, [pc, #136]	; (8000284 <main+0x134>)
 80001fc:	f001 fc44 	bl	8001a88 <osThreadNew>
 8000200:	4603      	mov	r3, r0
 8000202:	4a21      	ldr	r2, [pc, #132]	; (8000288 <main+0x138>)
 8000204:	6013      	str	r3, [r2, #0]

  /* creation of TaskEventHandle */
  TaskEventHandleHandle = osThreadNew(fTaskEventHandler, NULL, &TaskEventHandle_attributes);
 8000206:	4a21      	ldr	r2, [pc, #132]	; (800028c <main+0x13c>)
 8000208:	2100      	movs	r1, #0
 800020a:	4821      	ldr	r0, [pc, #132]	; (8000290 <main+0x140>)
 800020c:	f001 fc3c 	bl	8001a88 <osThreadNew>
 8000210:	4603      	mov	r3, r0
 8000212:	4a20      	ldr	r2, [pc, #128]	; (8000294 <main+0x144>)
 8000214:	6013      	str	r3, [r2, #0]

  /* creation of TaskStart */
  TaskStartHandle = osThreadNew(fTaskStart, NULL, &TaskStart_attributes);
 8000216:	4a20      	ldr	r2, [pc, #128]	; (8000298 <main+0x148>)
 8000218:	2100      	movs	r1, #0
 800021a:	4820      	ldr	r0, [pc, #128]	; (800029c <main+0x14c>)
 800021c:	f001 fc34 	bl	8001a88 <osThreadNew>
 8000220:	4603      	mov	r3, r0
 8000222:	4a1f      	ldr	r2, [pc, #124]	; (80002a0 <main+0x150>)
 8000224:	6013      	str	r3, [r2, #0]
  int8_t transitionTable[NUM_STATES][NUM_EVENTS];
  //initializeTransitionTable((int8_t **)transitionTable, NUM_STATES, NUM_EVENTS);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000226:	f001 fbfb 	bl	8001a20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022a:	e7fe      	b.n	800022a <main+0xda>
 800022c:	08004710 	.word	0x08004710
 8000230:	20000e6c 	.word	0x20000e6c
 8000234:	08004728 	.word	0x08004728
 8000238:	20000ee0 	.word	0x20000ee0
 800023c:	08004740 	.word	0x08004740
 8000240:	20000f54 	.word	0x20000f54
 8000244:	08004758 	.word	0x08004758
 8000248:	20000fb0 	.word	0x20000fb0
 800024c:	08004770 	.word	0x08004770
 8000250:	2000100c 	.word	0x2000100c
 8000254:	08004788 	.word	0x08004788
 8000258:	20001068 	.word	0x20001068
 800025c:	08004638 	.word	0x08004638
 8000260:	08000481 	.word	0x08000481
 8000264:	2000002c 	.word	0x2000002c
 8000268:	0800465c 	.word	0x0800465c
 800026c:	080004b5 	.word	0x080004b5
 8000270:	2000028c 	.word	0x2000028c
 8000274:	08004680 	.word	0x08004680
 8000278:	080004c5 	.word	0x080004c5
 800027c:	200004ec 	.word	0x200004ec
 8000280:	080046a4 	.word	0x080046a4
 8000284:	080004d5 	.word	0x080004d5
 8000288:	2000074c 	.word	0x2000074c
 800028c:	080046c8 	.word	0x080046c8
 8000290:	080004e5 	.word	0x080004e5
 8000294:	200009ac 	.word	0x200009ac
 8000298:	080046ec 	.word	0x080046ec
 800029c:	080004f5 	.word	0x080004f5
 80002a0:	20000c0c 	.word	0x20000c0c

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f004 f91a 	bl	80044ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c6:	2302      	movs	r3, #2
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2310      	movs	r3, #16
 80002d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 fcf8 	bl	8000cd0 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002e6:	f000 f949 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f000 ff66 	bl	80011d4 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800030e:	f000 f935 	bl	800057c <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3740      	adds	r7, #64	; 0x40
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000330:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <MX_GPIO_Init+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a1d      	ldr	r2, [pc, #116]	; (80003ac <MX_GPIO_Init+0x90>)
 8000336:	f043 0310 	orr.w	r3, r3, #16
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_GPIO_Init+0x90>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0310 	and.w	r3, r3, #16
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_GPIO_Init+0x90>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a17      	ldr	r2, [pc, #92]	; (80003ac <MX_GPIO_Init+0x90>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <MX_GPIO_Init+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	60bb      	str	r3, [r7, #8]
 800035e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <MX_GPIO_Init+0x90>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a11      	ldr	r2, [pc, #68]	; (80003ac <MX_GPIO_Init+0x90>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_GPIO_Init+0x90>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0308 	and.w	r3, r3, #8
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037e:	480c      	ldr	r0, [pc, #48]	; (80003b0 <MX_GPIO_Init+0x94>)
 8000380:	f000 fc8e 	bl	8000ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2302      	movs	r3, #2
 8000394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	4619      	mov	r1, r3
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <MX_GPIO_Init+0x94>)
 800039e:	f000 fafb 	bl	8000998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a2:	bf00      	nop
 80003a4:	3720      	adds	r7, #32
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40011000 	.word	0x40011000

080003b4 <initializeTransitionTable>:

/* USER CODE BEGIN 4 */
void initializeTransitionTable(int8_t **table, uint8_t num_states, uint8_t num_events) {
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	70fb      	strb	r3, [r7, #3]
 80003c0:	4613      	mov	r3, r2
 80003c2:	70bb      	strb	r3, [r7, #2]
    // Заполнение таблицы состояний значением -1
    for (uint8_t i = 0; i < num_states; ++i) {
 80003c4:	2300      	movs	r3, #0
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e015      	b.n	80003f6 <initializeTransitionTable+0x42>
        for (uint8_t j = 0; j < num_events; ++j) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]
 80003ce:	e00b      	b.n	80003e8 <initializeTransitionTable+0x34>
            table[i][j] = -1;
 80003d0:	7bfb      	ldrb	r3, [r7, #15]
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	4413      	add	r3, r2
 80003de:	22ff      	movs	r2, #255	; 0xff
 80003e0:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < num_events; ++j) {
 80003e2:	7bbb      	ldrb	r3, [r7, #14]
 80003e4:	3301      	adds	r3, #1
 80003e6:	73bb      	strb	r3, [r7, #14]
 80003e8:	7bba      	ldrb	r2, [r7, #14]
 80003ea:	78bb      	ldrb	r3, [r7, #2]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d3ef      	bcc.n	80003d0 <initializeTransitionTable+0x1c>
    for (uint8_t i = 0; i < num_states; ++i) {
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	3301      	adds	r3, #1
 80003f4:	73fb      	strb	r3, [r7, #15]
 80003f6:	7bfa      	ldrb	r2, [r7, #15]
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d3e5      	bcc.n	80003ca <initializeTransitionTable+0x16>
        }
    }
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
	...

0800040c <addToTransitionTable>:

void addToTransitionTable(State_t initial_state, State_t new_state, Event_t event) {
 800040c:	b490      	push	{r4, r7}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	460b      	mov	r3, r1
 8000418:	71bb      	strb	r3, [r7, #6]
 800041a:	4613      	mov	r3, r2
 800041c:	717b      	strb	r3, [r7, #5]
    // Проверяем, что переданные состояния и событие валидны
    if (initial_state >= NUM_STATES || new_state >= NUM_STATES || event >= NUM_EVENTS) {
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b05      	cmp	r3, #5
 8000422:	d813      	bhi.n	800044c <addToTransitionTable+0x40>
 8000424:	79bb      	ldrb	r3, [r7, #6]
 8000426:	2b05      	cmp	r3, #5
 8000428:	d810      	bhi.n	800044c <addToTransitionTable+0x40>
 800042a:	797b      	ldrb	r3, [r7, #5]
 800042c:	2b05      	cmp	r3, #5
 800042e:	d80d      	bhi.n	800044c <addToTransitionTable+0x40>
        // Выводим сообщение об ошибке или принимаем другие меры
        return;
    }

    // Заполняем таблицу переходов
    transitionTable[initial_state][event] = new_state;
 8000430:	79fa      	ldrb	r2, [r7, #7]
 8000432:	7979      	ldrb	r1, [r7, #5]
 8000434:	f997 4006 	ldrsb.w	r4, [r7, #6]
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <addToTransitionTable+0x4c>)
 800043a:	4613      	mov	r3, r2
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	4413      	add	r3, r2
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	4403      	add	r3, r0
 8000444:	440b      	add	r3, r1
 8000446:	4622      	mov	r2, r4
 8000448:	701a      	strb	r2, [r3, #0]
 800044a:	e000      	b.n	800044e <addToTransitionTable+0x42>
        return;
 800044c:	bf00      	nop
}
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bc90      	pop	{r4, r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	200010c4 	.word	0x200010c4

0800045c <createStateQueueMapping>:
    	return -1;
    }
}

// Функция для создания ассоциативного значения (связи) между состоянием и очередью
void createStateQueueMapping(State_t state, osMessageQueueId_t queueHandle) {
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	6039      	str	r1, [r7, #0]
 8000466:	71fb      	strb	r3, [r7, #7]
    //StateQueueMapping_t mapping = {state, queueHandle};
    stateQueueMappings[state] = queueHandle;
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	4904      	ldr	r1, [pc, #16]	; (800047c <createStateQueueMapping+0x20>)
 800046c:	683a      	ldr	r2, [r7, #0]
 800046e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	200010e8 	.word	0x200010e8

08000480 <fTaskBlinkLong>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fTaskBlinkLong */
void fTaskBlinkLong(void *argument)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	State_t newState = transitionTable[NUM_STATES][NUM_EVENTS];
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <fTaskBlinkLong+0x2c>)
 800048a:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 800048e:	b2db      	uxtb	r3, r3
 8000490:	73fb      	strb	r3, [r7, #15]
	xQueueSend(QueueStateHandle, &newState, portMAX_DELAY);
 8000492:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <fTaskBlinkLong+0x30>)
 8000494:	6818      	ldr	r0, [r3, #0]
 8000496:	f107 010f 	add.w	r1, r7, #15
 800049a:	2300      	movs	r3, #0
 800049c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004a0:	f001 fe72 	bl	8002188 <xQueueGenericSend>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f001 fb99 	bl	8001bdc <osDelay>
 80004aa:	e7fb      	b.n	80004a4 <fTaskBlinkLong+0x24>
 80004ac:	200010c4 	.word	0x200010c4
 80004b0:	20000e6c 	.word	0x20000e6c

080004b4 <fTaskBlinkShort>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskBlinkShort */
void fTaskBlinkShort(void *argument)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskBlinkShort */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f001 fb8d 	bl	8001bdc <osDelay>
 80004c2:	e7fb      	b.n	80004bc <fTaskBlinkShort+0x8>

080004c4 <fTaskBlinkReal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskBlinkReal */
void fTaskBlinkReal(void *argument)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskBlinkReal */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f001 fb85 	bl	8001bdc <osDelay>
 80004d2:	e7fb      	b.n	80004cc <fTaskBlinkReal+0x8>

080004d4 <fTaskStateHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStateHandler */
void fTaskStateHandler(void *argument)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStateHandler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f001 fb7d 	bl	8001bdc <osDelay>
 80004e2:	e7fb      	b.n	80004dc <fTaskStateHandler+0x8>

080004e4 <fTaskEventHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskEventHandler */
void fTaskEventHandler(void *argument)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskEventHandler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f001 fb75 	bl	8001bdc <osDelay>
 80004f2:	e7fb      	b.n	80004ec <fTaskEventHandler+0x8>

080004f4 <fTaskStart>:
	myQueue3,
    NUM_EVENTS
} Event_t;
*/
void fTaskStart(void *argument)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStart */

  /* Infinite loop */
  for(;;)
  {
	initializeTransitionTable((int8_t **)transitionTable, NUM_STATES, NUM_EVENTS);
 80004fc:	2206      	movs	r2, #6
 80004fe:	2106      	movs	r1, #6
 8000500:	4812      	ldr	r0, [pc, #72]	; (800054c <fTaskStart+0x58>)
 8000502:	f7ff ff57 	bl	80003b4 <initializeTransitionTable>
	addToTransitionTable(TaskStart, TaskBlinkShort, END_START);
 8000506:	2200      	movs	r2, #0
 8000508:	2101      	movs	r1, #1
 800050a:	2005      	movs	r0, #5
 800050c:	f7ff ff7e 	bl	800040c <addToTransitionTable>
	addToTransitionTable(TaskBlinkShort, TaskBlinkLong, END_BLIND_SHORT);
 8000510:	2201      	movs	r2, #1
 8000512:	2100      	movs	r1, #0
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff ff79 	bl	800040c <addToTransitionTable>
	addToTransitionTable(TaskBlinkLong, TaskBlinkShort, END_BLIND_LONG);
 800051a:	2202      	movs	r2, #2
 800051c:	2101      	movs	r1, #1
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff ff74 	bl	800040c <addToTransitionTable>

	createStateQueueMapping(TaskStart, myQueue0Handle);
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <fTaskStart+0x5c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	2005      	movs	r0, #5
 800052c:	f7ff ff96 	bl	800045c <createStateQueueMapping>



	State_t currentState;
	xQueueReceive(QueueStateHandle, &currentState, portMAX_DELAY);
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <fTaskStart+0x60>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f107 010f 	add.w	r1, r7, #15
 8000538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800053c:	4618      	mov	r0, r3
 800053e:	f001 ffb9 	bl	80024b4 <xQueueReceive>
    osDelay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f001 fb4a 	bl	8001bdc <osDelay>
  {
 8000548:	e7d8      	b.n	80004fc <fTaskStart+0x8>
 800054a:	bf00      	nop
 800054c:	200010c4 	.word	0x200010c4
 8000550:	20000f54 	.word	0x20000f54
 8000554:	20000e6c 	.word	0x20000e6c

08000558 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d101      	bne.n	800056e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800056a:	f000 f919 	bl	80007a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40012c00 	.word	0x40012c00

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <HAL_MspInit+0x68>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <HAL_MspInit+0x68>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_MspInit+0x68>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_MspInit+0x68>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <HAL_MspInit+0x68>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_MspInit+0x68>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	210f      	movs	r1, #15
 80005c2:	f06f 0001 	mvn.w	r0, #1
 80005c6:	f000 f9bc 	bl	8000942 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <HAL_MspInit+0x6c>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <HAL_MspInit+0x6c>)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010000 	.word	0x40010000

080005f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000600:	2300      	movs	r3, #0
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000608:	2300      	movs	r3, #0
 800060a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800060e:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <HAL_InitTick+0xd0>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <HAL_InitTick+0xd0>)
 8000614:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <HAL_InitTick+0xd0>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000626:	f107 020c 	add.w	r2, r7, #12
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	4611      	mov	r1, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 ff2b 	bl	800148c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000636:	f000 ff15 	bl	8001464 <HAL_RCC_GetPCLK2Freq>
 800063a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800063e:	4a23      	ldr	r2, [pc, #140]	; (80006cc <HAL_InitTick+0xd4>)
 8000640:	fba2 2303 	umull	r2, r3, r2, r3
 8000644:	0c9b      	lsrs	r3, r3, #18
 8000646:	3b01      	subs	r3, #1
 8000648:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <HAL_InitTick+0xd8>)
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <HAL_InitTick+0xdc>)
 800064e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <HAL_InitTick+0xd8>)
 8000652:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000656:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000658:	4a1d      	ldr	r2, [pc, #116]	; (80006d0 <HAL_InitTick+0xd8>)
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_InitTick+0xd8>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <HAL_InitTick+0xd8>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_InitTick+0xd8>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <HAL_InitTick+0xd8>)
 8000672:	f000 ff59 	bl	8001528 <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800067c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000680:	2b00      	cmp	r3, #0
 8000682:	d11b      	bne.n	80006bc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <HAL_InitTick+0xd8>)
 8000686:	f000 ffa7 	bl	80015d8 <HAL_TIM_Base_Start_IT>
 800068a:	4603      	mov	r3, r0
 800068c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000694:	2b00      	cmp	r3, #0
 8000696:	d111      	bne.n	80006bc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000698:	2019      	movs	r0, #25
 800069a:	f000 f96e 	bl	800097a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b0f      	cmp	r3, #15
 80006a2:	d808      	bhi.n	80006b6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80006a4:	2200      	movs	r2, #0
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	2019      	movs	r0, #25
 80006aa:	f000 f94a 	bl	8000942 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_InitTick+0xe0>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	e002      	b.n	80006bc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80006bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3730      	adds	r7, #48	; 0x30
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	431bde83 	.word	0x431bde83
 80006d0:	20001100 	.word	0x20001100
 80006d4:	40012c00 	.word	0x40012c00
 80006d8:	20000004 	.word	0x20000004

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
	...

08000708 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <TIM1_UP_IRQHandler+0x10>)
 800070e:	f000 ffb5 	bl	800167c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20001100 	.word	0x20001100

0800071c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000728:	f7ff fff8 	bl	800071c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800072e:	490c      	ldr	r1, [pc, #48]	; (8000760 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000730:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a09      	ldr	r2, [pc, #36]	; (8000768 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000744:	4c09      	ldr	r4, [pc, #36]	; (800076c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000752:	f003 fed3 	bl	80044fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000756:	f7ff fcfb 	bl	8000150 <main>
  bx lr
 800075a:	4770      	bx	lr
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000764:	080047d4 	.word	0x080047d4
  ldr r2, =_sbss
 8000768:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800076c:	20002a94 	.word	0x20002a94

08000770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC1_2_IRQHandler>
	...

08000774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_Init+0x28>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <HAL_Init+0x28>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000784:	2003      	movs	r0, #3
 8000786:	f000 f8d1 	bl	800092c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078a:	200f      	movs	r0, #15
 800078c:	f7ff ff34 	bl	80005f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000790:	f7ff fefa 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40022000 	.word	0x40022000

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x1c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x20>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <HAL_IncTick+0x20>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20001148 	.word	0x20001148

080007c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <HAL_GetTick+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	20001148 	.word	0x20001148

080007d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <__NVIC_GetPriorityGrouping+0x18>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	f003 0307 	and.w	r3, r3, #7
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	2b00      	cmp	r3, #0
 800084c:	db0b      	blt.n	8000866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 021f 	and.w	r2, r3, #31
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <__NVIC_EnableIRQ+0x34>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	095b      	lsrs	r3, r3, #5
 800085c:	2001      	movs	r0, #1
 800085e:	fa00 f202 	lsl.w	r2, r0, r2
 8000862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff4f 	bl	80007d8 <__NVIC_SetPriorityGrouping>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000954:	f7ff ff64 	bl	8000820 <__NVIC_GetPriorityGrouping>
 8000958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f7ff ffb2 	bl	80008c8 <NVIC_EncodePriority>
 8000964:	4602      	mov	r2, r0
 8000966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff81 	bl	8000874 <__NVIC_SetPriority>
}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff57 	bl	800083c <__NVIC_EnableIRQ>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000998:	b480      	push	{r7}
 800099a:	b08b      	sub	sp, #44	; 0x2c
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009aa:	e169      	b.n	8000c80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009ac:	2201      	movs	r2, #1
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	69fa      	ldr	r2, [r7, #28]
 80009bc:	4013      	ands	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	f040 8158 	bne.w	8000c7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4a9a      	ldr	r2, [pc, #616]	; (8000c38 <HAL_GPIO_Init+0x2a0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d05e      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
 80009d4:	4a98      	ldr	r2, [pc, #608]	; (8000c38 <HAL_GPIO_Init+0x2a0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d875      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 80009da:	4a98      	ldr	r2, [pc, #608]	; (8000c3c <HAL_GPIO_Init+0x2a4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d058      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
 80009e0:	4a96      	ldr	r2, [pc, #600]	; (8000c3c <HAL_GPIO_Init+0x2a4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d86f      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 80009e6:	4a96      	ldr	r2, [pc, #600]	; (8000c40 <HAL_GPIO_Init+0x2a8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d052      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
 80009ec:	4a94      	ldr	r2, [pc, #592]	; (8000c40 <HAL_GPIO_Init+0x2a8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d869      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 80009f2:	4a94      	ldr	r2, [pc, #592]	; (8000c44 <HAL_GPIO_Init+0x2ac>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d04c      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
 80009f8:	4a92      	ldr	r2, [pc, #584]	; (8000c44 <HAL_GPIO_Init+0x2ac>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d863      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 80009fe:	4a92      	ldr	r2, [pc, #584]	; (8000c48 <HAL_GPIO_Init+0x2b0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d046      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
 8000a04:	4a90      	ldr	r2, [pc, #576]	; (8000c48 <HAL_GPIO_Init+0x2b0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d85d      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 8000a0a:	2b12      	cmp	r3, #18
 8000a0c:	d82a      	bhi.n	8000a64 <HAL_GPIO_Init+0xcc>
 8000a0e:	2b12      	cmp	r3, #18
 8000a10:	d859      	bhi.n	8000ac6 <HAL_GPIO_Init+0x12e>
 8000a12:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <HAL_GPIO_Init+0x80>)
 8000a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a18:	08000a93 	.word	0x08000a93
 8000a1c:	08000a6d 	.word	0x08000a6d
 8000a20:	08000a7f 	.word	0x08000a7f
 8000a24:	08000ac1 	.word	0x08000ac1
 8000a28:	08000ac7 	.word	0x08000ac7
 8000a2c:	08000ac7 	.word	0x08000ac7
 8000a30:	08000ac7 	.word	0x08000ac7
 8000a34:	08000ac7 	.word	0x08000ac7
 8000a38:	08000ac7 	.word	0x08000ac7
 8000a3c:	08000ac7 	.word	0x08000ac7
 8000a40:	08000ac7 	.word	0x08000ac7
 8000a44:	08000ac7 	.word	0x08000ac7
 8000a48:	08000ac7 	.word	0x08000ac7
 8000a4c:	08000ac7 	.word	0x08000ac7
 8000a50:	08000ac7 	.word	0x08000ac7
 8000a54:	08000ac7 	.word	0x08000ac7
 8000a58:	08000ac7 	.word	0x08000ac7
 8000a5c:	08000a75 	.word	0x08000a75
 8000a60:	08000a89 	.word	0x08000a89
 8000a64:	4a79      	ldr	r2, [pc, #484]	; (8000c4c <HAL_GPIO_Init+0x2b4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d013      	beq.n	8000a92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a6a:	e02c      	b.n	8000ac6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	623b      	str	r3, [r7, #32]
          break;
 8000a72:	e029      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	623b      	str	r3, [r7, #32]
          break;
 8000a7c:	e024      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	3308      	adds	r3, #8
 8000a84:	623b      	str	r3, [r7, #32]
          break;
 8000a86:	e01f      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	330c      	adds	r3, #12
 8000a8e:	623b      	str	r3, [r7, #32]
          break;
 8000a90:	e01a      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	623b      	str	r3, [r7, #32]
          break;
 8000a9e:	e013      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d105      	bne.n	8000ab4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	611a      	str	r2, [r3, #16]
          break;
 8000ab2:	e009      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69fa      	ldr	r2, [r7, #28]
 8000abc:	615a      	str	r2, [r3, #20]
          break;
 8000abe:	e003      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e000      	b.n	8000ac8 <HAL_GPIO_Init+0x130>
          break;
 8000ac6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	2bff      	cmp	r3, #255	; 0xff
 8000acc:	d801      	bhi.n	8000ad2 <HAL_GPIO_Init+0x13a>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	e001      	b.n	8000ad6 <HAL_GPIO_Init+0x13e>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	2bff      	cmp	r3, #255	; 0xff
 8000adc:	d802      	bhi.n	8000ae4 <HAL_GPIO_Init+0x14c>
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	e002      	b.n	8000aea <HAL_GPIO_Init+0x152>
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	3b08      	subs	r3, #8
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	210f      	movs	r1, #15
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	401a      	ands	r2, r3
 8000afc:	6a39      	ldr	r1, [r7, #32]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	431a      	orrs	r2, r3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 80b1 	beq.w	8000c7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b18:	4b4d      	ldr	r3, [pc, #308]	; (8000c50 <HAL_GPIO_Init+0x2b8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a4c      	ldr	r2, [pc, #304]	; (8000c50 <HAL_GPIO_Init+0x2b8>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <HAL_GPIO_Init+0x2b8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b30:	4a48      	ldr	r2, [pc, #288]	; (8000c54 <HAL_GPIO_Init+0x2bc>)
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	3302      	adds	r3, #2
 8000b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	220f      	movs	r2, #15
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a40      	ldr	r2, [pc, #256]	; (8000c58 <HAL_GPIO_Init+0x2c0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d013      	beq.n	8000b84 <HAL_GPIO_Init+0x1ec>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a3f      	ldr	r2, [pc, #252]	; (8000c5c <HAL_GPIO_Init+0x2c4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d00d      	beq.n	8000b80 <HAL_GPIO_Init+0x1e8>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a3e      	ldr	r2, [pc, #248]	; (8000c60 <HAL_GPIO_Init+0x2c8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d007      	beq.n	8000b7c <HAL_GPIO_Init+0x1e4>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a3d      	ldr	r2, [pc, #244]	; (8000c64 <HAL_GPIO_Init+0x2cc>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d101      	bne.n	8000b78 <HAL_GPIO_Init+0x1e0>
 8000b74:	2303      	movs	r3, #3
 8000b76:	e006      	b.n	8000b86 <HAL_GPIO_Init+0x1ee>
 8000b78:	2304      	movs	r3, #4
 8000b7a:	e004      	b.n	8000b86 <HAL_GPIO_Init+0x1ee>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x1ee>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <HAL_GPIO_Init+0x1ee>
 8000b84:	2300      	movs	r3, #0
 8000b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b88:	f002 0203 	and.w	r2, r2, #3
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	4093      	lsls	r3, r2
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b96:	492f      	ldr	r1, [pc, #188]	; (8000c54 <HAL_GPIO_Init+0x2bc>)
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	492c      	ldr	r1, [pc, #176]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	608b      	str	r3, [r1, #8]
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	4928      	ldr	r1, [pc, #160]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	4922      	ldr	r1, [pc, #136]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60cb      	str	r3, [r1, #12]
 8000be4:	e006      	b.n	8000bf4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	491e      	ldr	r1, [pc, #120]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d006      	beq.n	8000c0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	4918      	ldr	r1, [pc, #96]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
 8000c0c:	e006      	b.n	8000c1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4914      	ldr	r1, [pc, #80]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d021      	beq.n	8000c6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	490e      	ldr	r1, [pc, #56]	; (8000c68 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	600b      	str	r3, [r1, #0]
 8000c34:	e021      	b.n	8000c7a <HAL_GPIO_Init+0x2e2>
 8000c36:	bf00      	nop
 8000c38:	10320000 	.word	0x10320000
 8000c3c:	10310000 	.word	0x10310000
 8000c40:	10220000 	.word	0x10220000
 8000c44:	10210000 	.word	0x10210000
 8000c48:	10120000 	.word	0x10120000
 8000c4c:	10110000 	.word	0x10110000
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010000 	.word	0x40010000
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	40010c00 	.word	0x40010c00
 8000c60:	40011000 	.word	0x40011000
 8000c64:	40011400 	.word	0x40011400
 8000c68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_GPIO_Init+0x304>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	4909      	ldr	r1, [pc, #36]	; (8000c9c <HAL_GPIO_Init+0x304>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f47f ae8e 	bne.w	80009ac <HAL_GPIO_Init+0x14>
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	372c      	adds	r7, #44	; 0x2c
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
 8000cac:	4613      	mov	r3, r2
 8000cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cb0:	787b      	ldrb	r3, [r7, #1]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb6:	887a      	ldrh	r2, [r7, #2]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cbc:	e003      	b.n	8000cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	041a      	lsls	r2, r3, #16
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	611a      	str	r2, [r3, #16]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e272      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 8087 	beq.w	8000dfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf0:	4b92      	ldr	r3, [pc, #584]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d00c      	beq.n	8000d16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cfc:	4b8f      	ldr	r3, [pc, #572]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 030c 	and.w	r3, r3, #12
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d112      	bne.n	8000d2e <HAL_RCC_OscConfig+0x5e>
 8000d08:	4b8c      	ldr	r3, [pc, #560]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d14:	d10b      	bne.n	8000d2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d16:	4b89      	ldr	r3, [pc, #548]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d06c      	beq.n	8000dfc <HAL_RCC_OscConfig+0x12c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d168      	bne.n	8000dfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e24c      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d36:	d106      	bne.n	8000d46 <HAL_RCC_OscConfig+0x76>
 8000d38:	4b80      	ldr	r3, [pc, #512]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a7f      	ldr	r2, [pc, #508]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e02e      	b.n	8000da4 <HAL_RCC_OscConfig+0xd4>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10c      	bne.n	8000d68 <HAL_RCC_OscConfig+0x98>
 8000d4e:	4b7b      	ldr	r3, [pc, #492]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a7a      	ldr	r2, [pc, #488]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b78      	ldr	r3, [pc, #480]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a77      	ldr	r2, [pc, #476]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e01d      	b.n	8000da4 <HAL_RCC_OscConfig+0xd4>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d70:	d10c      	bne.n	8000d8c <HAL_RCC_OscConfig+0xbc>
 8000d72:	4b72      	ldr	r3, [pc, #456]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a71      	ldr	r2, [pc, #452]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a6e      	ldr	r2, [pc, #440]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e00b      	b.n	8000da4 <HAL_RCC_OscConfig+0xd4>
 8000d8c:	4b6b      	ldr	r3, [pc, #428]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a6a      	ldr	r2, [pc, #424]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b68      	ldr	r3, [pc, #416]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a67      	ldr	r2, [pc, #412]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d013      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dac:	f7ff fd0a 	bl	80007c4 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db4:	f7ff fd06 	bl	80007c4 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b64      	cmp	r3, #100	; 0x64
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e200      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0xe4>
 8000dd2:	e014      	b.n	8000dfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fcf6 	bl	80007c4 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fcf2 	bl	80007c4 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b64      	cmp	r3, #100	; 0x64
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e1ec      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dee:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f0      	bne.n	8000ddc <HAL_RCC_OscConfig+0x10c>
 8000dfa:	e000      	b.n	8000dfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d063      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00b      	beq.n	8000e2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d11c      	bne.n	8000e5c <HAL_RCC_OscConfig+0x18c>
 8000e22:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d116      	bne.n	8000e5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2e:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d005      	beq.n	8000e46 <HAL_RCC_OscConfig+0x176>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d001      	beq.n	8000e46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e1c0      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e46:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4939      	ldr	r1, [pc, #228]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5a:	e03a      	b.n	8000ed2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d020      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e64:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <HAL_RCC_OscConfig+0x270>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fcab 	bl	80007c4 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e72:	f7ff fca7 	bl	80007c4 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e1a1      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	4927      	ldr	r1, [pc, #156]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	600b      	str	r3, [r1, #0]
 8000ea4:	e015      	b.n	8000ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <HAL_RCC_OscConfig+0x270>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eac:	f7ff fc8a 	bl	80007c4 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fc86 	bl	80007c4 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e180      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d03a      	beq.n	8000f54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d019      	beq.n	8000f1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_RCC_OscConfig+0x274>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eec:	f7ff fc6a 	bl	80007c4 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fc66 	bl	80007c4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e160      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 faea 	bl	80014ec <RCC_Delay>
 8000f18:	e01c      	b.n	8000f54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_RCC_OscConfig+0x274>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f20:	f7ff fc50 	bl	80007c4 <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f26:	e00f      	b.n	8000f48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f28:	f7ff fc4c 	bl	80007c4 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d908      	bls.n	8000f48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e146      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	42420000 	.word	0x42420000
 8000f44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f48:	4b92      	ldr	r3, [pc, #584]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1e9      	bne.n	8000f28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80a6 	beq.w	80010ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f66:	4b8b      	ldr	r3, [pc, #556]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10d      	bne.n	8000f8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b88      	ldr	r3, [pc, #544]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a87      	ldr	r2, [pc, #540]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b85      	ldr	r3, [pc, #532]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8e:	4b82      	ldr	r3, [pc, #520]	; (8001198 <HAL_RCC_OscConfig+0x4c8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d118      	bne.n	8000fcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9a:	4b7f      	ldr	r3, [pc, #508]	; (8001198 <HAL_RCC_OscConfig+0x4c8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a7e      	ldr	r2, [pc, #504]	; (8001198 <HAL_RCC_OscConfig+0x4c8>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fc0d 	bl	80007c4 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fae:	f7ff fc09 	bl	80007c4 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b64      	cmp	r3, #100	; 0x64
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e103      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc0:	4b75      	ldr	r3, [pc, #468]	; (8001198 <HAL_RCC_OscConfig+0x4c8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d106      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x312>
 8000fd4:	4b6f      	ldr	r3, [pc, #444]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4a6e      	ldr	r2, [pc, #440]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6213      	str	r3, [r2, #32]
 8000fe0:	e02d      	b.n	800103e <HAL_RCC_OscConfig+0x36e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x334>
 8000fea:	4b6a      	ldr	r3, [pc, #424]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a69      	ldr	r2, [pc, #420]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	4b67      	ldr	r3, [pc, #412]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a66      	ldr	r2, [pc, #408]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	6213      	str	r3, [r2, #32]
 8001002:	e01c      	b.n	800103e <HAL_RCC_OscConfig+0x36e>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2b05      	cmp	r3, #5
 800100a:	d10c      	bne.n	8001026 <HAL_RCC_OscConfig+0x356>
 800100c:	4b61      	ldr	r3, [pc, #388]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a60      	ldr	r2, [pc, #384]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	f043 0304 	orr.w	r3, r3, #4
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	4b5e      	ldr	r3, [pc, #376]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4a5d      	ldr	r2, [pc, #372]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6213      	str	r3, [r2, #32]
 8001024:	e00b      	b.n	800103e <HAL_RCC_OscConfig+0x36e>
 8001026:	4b5b      	ldr	r3, [pc, #364]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a5a      	ldr	r2, [pc, #360]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	6213      	str	r3, [r2, #32]
 8001032:	4b58      	ldr	r3, [pc, #352]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4a57      	ldr	r2, [pc, #348]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	f023 0304 	bic.w	r3, r3, #4
 800103c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d015      	beq.n	8001072 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001046:	f7ff fbbd 	bl	80007c4 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104c:	e00a      	b.n	8001064 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104e:	f7ff fbb9 	bl	80007c4 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f241 3288 	movw	r2, #5000	; 0x1388
 800105c:	4293      	cmp	r3, r2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e0b1      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0ee      	beq.n	800104e <HAL_RCC_OscConfig+0x37e>
 8001070:	e014      	b.n	800109c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001072:	f7ff fba7 	bl	80007c4 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001078:	e00a      	b.n	8001090 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f7ff fba3 	bl	80007c4 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	f241 3288 	movw	r2, #5000	; 0x1388
 8001088:	4293      	cmp	r3, r2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e09b      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001090:	4b40      	ldr	r3, [pc, #256]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1ee      	bne.n	800107a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d105      	bne.n	80010ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8087 	beq.w	80011c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b8:	4b36      	ldr	r3, [pc, #216]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d061      	beq.n	8001188 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d146      	bne.n	800115a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010cc:	4b33      	ldr	r3, [pc, #204]	; (800119c <HAL_RCC_OscConfig+0x4cc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fb77 	bl	80007c4 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010da:	f7ff fb73 	bl	80007c4 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e06d      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ec:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d108      	bne.n	8001114 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	4921      	ldr	r1, [pc, #132]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a19      	ldr	r1, [r3, #32]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	430b      	orrs	r3, r1
 8001126:	491b      	ldr	r1, [pc, #108]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_RCC_OscConfig+0x4cc>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fb47 	bl	80007c4 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113a:	f7ff fb43 	bl	80007c4 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e03d      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x46a>
 8001158:	e035      	b.n	80011c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_RCC_OscConfig+0x4cc>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fb30 	bl	80007c4 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001168:	f7ff fb2c 	bl	80007c4 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e026      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x498>
 8001186:	e01e      	b.n	80011c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d107      	bne.n	80011a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e019      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
 8001194:	40021000 	.word	0x40021000
 8001198:	40007000 	.word	0x40007000
 800119c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_RCC_OscConfig+0x500>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d106      	bne.n	80011c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011be:	429a      	cmp	r2, r3
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0d0      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b6a      	ldr	r3, [pc, #424]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d910      	bls.n	8001218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b67      	ldr	r3, [pc, #412]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 0207 	bic.w	r2, r3, #7
 80011fe:	4965      	ldr	r1, [pc, #404]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001206:	4b63      	ldr	r3, [pc, #396]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0b8      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001230:	4b59      	ldr	r3, [pc, #356]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4a58      	ldr	r2, [pc, #352]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800123a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001248:	4b53      	ldr	r3, [pc, #332]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001252:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001254:	4b50      	ldr	r3, [pc, #320]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	494d      	ldr	r1, [pc, #308]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d040      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d115      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e07f      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e073      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e06b      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f023 0203 	bic.w	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4936      	ldr	r1, [pc, #216]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff fa7e 	bl	80007c4 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012cc:	f7ff fa7a 	bl	80007c4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e053      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 020c 	and.w	r2, r3, #12
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1eb      	bne.n	80012cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d210      	bcs.n	8001324 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 0207 	bic.w	r2, r3, #7
 800130a:	4922      	ldr	r1, [pc, #136]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e032      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4916      	ldr	r1, [pc, #88]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	490e      	ldr	r1, [pc, #56]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001362:	f000 f821 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 8001366:	4602      	mov	r2, r0
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	490a      	ldr	r1, [pc, #40]	; (800139c <HAL_RCC_ClockConfig+0x1c8>)
 8001374:	5ccb      	ldrb	r3, [r1, r3]
 8001376:	fa22 f303 	lsr.w	r3, r2, r3
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <HAL_RCC_ClockConfig+0x1cc>)
 800137c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f938 	bl	80005f8 <HAL_InitTick>

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000
 8001398:	40021000 	.word	0x40021000
 800139c:	080047a0 	.word	0x080047a0
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <HAL_RCC_GetSysClockFreq+0x94>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d002      	beq.n	80013d8 <HAL_RCC_GetSysClockFreq+0x30>
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d003      	beq.n	80013de <HAL_RCC_GetSysClockFreq+0x36>
 80013d6:	e027      	b.n	8001428 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_RCC_GetSysClockFreq+0x98>)
 80013da:	613b      	str	r3, [r7, #16]
      break;
 80013dc:	e027      	b.n	800142e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	0c9b      	lsrs	r3, r3, #18
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	4a17      	ldr	r2, [pc, #92]	; (8001444 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d010      	beq.n	8001418 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_RCC_GetSysClockFreq+0x94>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	0c5b      	lsrs	r3, r3, #17
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001402:	5cd3      	ldrb	r3, [r2, r3]
 8001404:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_RCC_GetSysClockFreq+0x98>)
 800140a:	fb03 f202 	mul.w	r2, r3, r2
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	fbb2 f3f3 	udiv	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e004      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_RCC_GetSysClockFreq+0xa4>)
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	613b      	str	r3, [r7, #16]
      break;
 8001426:	e002      	b.n	800142e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_RCC_GetSysClockFreq+0x98>)
 800142a:	613b      	str	r3, [r7, #16]
      break;
 800142c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800142e:	693b      	ldr	r3, [r7, #16]
}
 8001430:	4618      	mov	r0, r3
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	007a1200 	.word	0x007a1200
 8001444:	080047b8 	.word	0x080047b8
 8001448:	080047c8 	.word	0x080047c8
 800144c:	003d0900 	.word	0x003d0900

08001450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <HAL_RCC_GetHCLKFreq+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000000 	.word	0x20000000

08001464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001468:	f7ff fff2 	bl	8001450 <HAL_RCC_GetHCLKFreq>
 800146c:	4602      	mov	r2, r0
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	0adb      	lsrs	r3, r3, #11
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	4903      	ldr	r1, [pc, #12]	; (8001488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800147a:	5ccb      	ldrb	r3, [r1, r3]
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	080047b0 	.word	0x080047b0

0800148c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	220f      	movs	r2, #15
 800149a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_RCC_GetClockConfig+0x58>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0203 	and.w	r2, r3, #3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_RCC_GetClockConfig+0x58>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_GetClockConfig+0x58>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_RCC_GetClockConfig+0x58>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	08db      	lsrs	r3, r3, #3
 80014c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_RCC_GetClockConfig+0x5c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0207 	and.w	r2, r3, #7
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40022000 	.word	0x40022000

080014ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <RCC_Delay+0x34>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <RCC_Delay+0x38>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0a5b      	lsrs	r3, r3, #9
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001508:	bf00      	nop
  }
  while (Delay --);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1e5a      	subs	r2, r3, #1
 800150e:	60fa      	str	r2, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f9      	bne.n	8001508 <RCC_Delay+0x1c>
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000000 	.word	0x20000000
 8001524:	10624dd3 	.word	0x10624dd3

08001528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e041      	b.n	80015be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f839 	bl	80015c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3304      	adds	r3, #4
 8001564:	4619      	mov	r1, r3
 8001566:	4610      	mov	r0, r2
 8001568:	f000 f9b4 	bl	80018d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d001      	beq.n	80015f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e03a      	b.n	8001666 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a18      	ldr	r2, [pc, #96]	; (8001670 <HAL_TIM_Base_Start_IT+0x98>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00e      	beq.n	8001630 <HAL_TIM_Base_Start_IT+0x58>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161a:	d009      	beq.n	8001630 <HAL_TIM_Base_Start_IT+0x58>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <HAL_TIM_Base_Start_IT+0x9c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d004      	beq.n	8001630 <HAL_TIM_Base_Start_IT+0x58>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <HAL_TIM_Base_Start_IT+0xa0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d111      	bne.n	8001654 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b06      	cmp	r3, #6
 8001640:	d010      	beq.n	8001664 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f042 0201 	orr.w	r2, r2, #1
 8001650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001652:	e007      	b.n	8001664 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40012c00 	.word	0x40012c00
 8001674:	40000400 	.word	0x40000400
 8001678:	40000800 	.word	0x40000800

0800167c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b02      	cmp	r3, #2
 8001690:	d122      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b02      	cmp	r3, #2
 800169e:	d11b      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f06f 0202 	mvn.w	r2, #2
 80016a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f8ed 	bl	800189e <HAL_TIM_IC_CaptureCallback>
 80016c4:	e005      	b.n	80016d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f8e0 	bl	800188c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f8ef 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d122      	bne.n	800172c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d11b      	bne.n	800172c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0204 	mvn.w	r2, #4
 80016fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2202      	movs	r2, #2
 8001702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8c3 	bl	800189e <HAL_TIM_IC_CaptureCallback>
 8001718:	e005      	b.n	8001726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f8b6 	bl	800188c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f8c5 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b08      	cmp	r3, #8
 8001738:	d122      	bne.n	8001780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b08      	cmp	r3, #8
 8001746:	d11b      	bne.n	8001780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f06f 0208 	mvn.w	r2, #8
 8001750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2204      	movs	r2, #4
 8001756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f899 	bl	800189e <HAL_TIM_IC_CaptureCallback>
 800176c:	e005      	b.n	800177a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f88c 	bl	800188c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f89b 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b10      	cmp	r3, #16
 800178c:	d122      	bne.n	80017d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b10      	cmp	r3, #16
 800179a:	d11b      	bne.n	80017d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f06f 0210 	mvn.w	r2, #16
 80017a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2208      	movs	r2, #8
 80017aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f86f 	bl	800189e <HAL_TIM_IC_CaptureCallback>
 80017c0:	e005      	b.n	80017ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f862 	bl	800188c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f871 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d10e      	bne.n	8001800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d107      	bne.n	8001800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f06f 0201 	mvn.w	r2, #1
 80017f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7fe feac 	bl	8000558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	2b80      	cmp	r3, #128	; 0x80
 800180c:	d10e      	bne.n	800182c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001818:	2b80      	cmp	r3, #128	; 0x80
 800181a:	d107      	bne.n	800182c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f8bf 	bl	80019aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001836:	2b40      	cmp	r3, #64	; 0x40
 8001838:	d10e      	bne.n	8001858 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001844:	2b40      	cmp	r3, #64	; 0x40
 8001846:	d107      	bne.n	8001858 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f835 	bl	80018c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	2b20      	cmp	r3, #32
 8001864:	d10e      	bne.n	8001884 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	2b20      	cmp	r3, #32
 8001872:	d107      	bne.n	8001884 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0220 	mvn.w	r2, #32
 800187c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f88a 	bl	8001998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a29      	ldr	r2, [pc, #164]	; (800198c <TIM_Base_SetConfig+0xb8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00b      	beq.n	8001904 <TIM_Base_SetConfig+0x30>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f2:	d007      	beq.n	8001904 <TIM_Base_SetConfig+0x30>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a26      	ldr	r2, [pc, #152]	; (8001990 <TIM_Base_SetConfig+0xbc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d003      	beq.n	8001904 <TIM_Base_SetConfig+0x30>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <TIM_Base_SetConfig+0xc0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d108      	bne.n	8001916 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a1c      	ldr	r2, [pc, #112]	; (800198c <TIM_Base_SetConfig+0xb8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00b      	beq.n	8001936 <TIM_Base_SetConfig+0x62>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001924:	d007      	beq.n	8001936 <TIM_Base_SetConfig+0x62>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a19      	ldr	r2, [pc, #100]	; (8001990 <TIM_Base_SetConfig+0xbc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d003      	beq.n	8001936 <TIM_Base_SetConfig+0x62>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a18      	ldr	r2, [pc, #96]	; (8001994 <TIM_Base_SetConfig+0xc0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d108      	bne.n	8001948 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800193c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a07      	ldr	r2, [pc, #28]	; (800198c <TIM_Base_SetConfig+0xb8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d103      	bne.n	800197c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	615a      	str	r2, [r3, #20]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	40012c00 	.word	0x40012c00
 8001990:	40000400 	.word	0x40000400
 8001994:	40000800 	.word	0x40000800

08001998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019c2:	f3ef 8305 	mrs	r3, IPSR
 80019c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80019c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ce:	f3ef 8310 	mrs	r3, PRIMASK
 80019d2:	607b      	str	r3, [r7, #4]
  return(result);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <osKernelInitialize+0x32>
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <osKernelInitialize+0x60>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d109      	bne.n	80019f6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019e2:	f3ef 8311 	mrs	r3, BASEPRI
 80019e6:	603b      	str	r3, [r7, #0]
  return(result);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80019ee:	f06f 0305 	mvn.w	r3, #5
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	e00c      	b.n	8001a10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <osKernelInitialize+0x60>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <osKernelInitialize+0x60>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e002      	b.n	8001a10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a10:	68fb      	ldr	r3, [r7, #12]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	2000114c 	.word	0x2000114c

08001a20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a26:	f3ef 8305 	mrs	r3, IPSR
 8001a2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10f      	bne.n	8001a52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a32:	f3ef 8310 	mrs	r3, PRIMASK
 8001a36:	607b      	str	r3, [r7, #4]
  return(result);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <osKernelStart+0x32>
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <osKernelStart+0x64>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d109      	bne.n	8001a5a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a46:	f3ef 8311 	mrs	r3, BASEPRI
 8001a4a:	603b      	str	r3, [r7, #0]
  return(result);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001a52:	f06f 0305 	mvn.w	r3, #5
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e00e      	b.n	8001a78 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <osKernelStart+0x64>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d107      	bne.n	8001a72 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <osKernelStart+0x64>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001a68:	f001 f93c 	bl	8002ce4 <vTaskStartScheduler>
      stat = osOK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e002      	b.n	8001a78 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a78:	68fb      	ldr	r3, [r7, #12]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000114c 	.word	0x2000114c

08001a88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b092      	sub	sp, #72	; 0x48
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a98:	f3ef 8305 	mrs	r3, IPSR
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 8094 	bne.w	8001bce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8001aaa:	623b      	str	r3, [r7, #32]
  return(result);
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 808d 	bne.w	8001bce <osThreadNew+0x146>
 8001ab4:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <osThreadNew+0x150>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d106      	bne.n	8001aca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001abc:	f3ef 8311 	mrs	r3, BASEPRI
 8001ac0:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 8082 	bne.w	8001bce <osThreadNew+0x146>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d07e      	beq.n	8001bce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001ad4:	2318      	movs	r3, #24
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001ad8:	2300      	movs	r3, #0
 8001ada:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001adc:	f107 031b 	add.w	r3, r7, #27
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d045      	beq.n	8001b7a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <osThreadNew+0x74>
        name = attr->name;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <osThreadNew+0x9a>
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	2b38      	cmp	r3, #56	; 0x38
 8001b14:	d805      	bhi.n	8001b22 <osThreadNew+0x9a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <osThreadNew+0x9e>
        return (NULL);
 8001b22:	2300      	movs	r3, #0
 8001b24:	e054      	b.n	8001bd0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00e      	beq.n	8001b5c <osThreadNew+0xd4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b5b      	cmp	r3, #91	; 0x5b
 8001b44:	d90a      	bls.n	8001b5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <osThreadNew+0xd4>
        mem = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b5a:	e010      	b.n	8001b7e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10c      	bne.n	8001b7e <osThreadNew+0xf6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d108      	bne.n	8001b7e <osThreadNew+0xf6>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <osThreadNew+0xf6>
          mem = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b78:	e001      	b.n	8001b7e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d110      	bne.n	8001ba6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b8c:	9202      	str	r2, [sp, #8]
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 fed6 	bl	800294c <xTaskCreateStatic>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e013      	b.n	8001bce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d110      	bne.n	8001bce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 ff20 	bl	8002a04 <xTaskCreate>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <osThreadNew+0x146>
          hTask = NULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001bce:	697b      	ldr	r3, [r7, #20]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3738      	adds	r7, #56	; 0x38
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000114c 	.word	0x2000114c

08001bdc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001be4:	f3ef 8305 	mrs	r3, IPSR
 8001be8:	613b      	str	r3, [r7, #16]
  return(result);
 8001bea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10f      	bne.n	8001c10 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8001bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <osDelay+0x34>
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <osDelay+0x58>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d109      	bne.n	8001c18 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c04:	f3ef 8311 	mrs	r3, BASEPRI
 8001c08:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <osDelay+0x3c>
    stat = osErrorISR;
 8001c10:	f06f 0305 	mvn.w	r3, #5
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e007      	b.n	8001c28 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f001 f82a 	bl	8002c7c <vTaskDelay>
    }
  }

  return (stat);
 8001c28:	697b      	ldr	r3, [r7, #20]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000114c 	.word	0x2000114c

08001c38 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c48:	f3ef 8305 	mrs	r3, IPSR
 8001c4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8001c4e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d16f      	bne.n	8001d34 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c54:	f3ef 8310 	mrs	r3, PRIMASK
 8001c58:	617b      	str	r3, [r7, #20]
  return(result);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d169      	bne.n	8001d34 <osMessageQueueNew+0xfc>
 8001c60:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <osMessageQueueNew+0x108>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d105      	bne.n	8001c74 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c68:	f3ef 8311 	mrs	r3, BASEPRI
 8001c6c:	613b      	str	r3, [r7, #16]
  return(result);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d15f      	bne.n	8001d34 <osMessageQueueNew+0xfc>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d05c      	beq.n	8001d34 <osMessageQueueNew+0xfc>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d059      	beq.n	8001d34 <osMessageQueueNew+0xfc>
    mem = -1;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d029      	beq.n	8001ce0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d012      	beq.n	8001cba <osMessageQueueNew+0x82>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b4f      	cmp	r3, #79	; 0x4f
 8001c9a:	d90e      	bls.n	8001cba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00a      	beq.n	8001cba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d302      	bcc.n	8001cba <osMessageQueueNew+0x82>
        mem = 1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	e014      	b.n	8001ce4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d110      	bne.n	8001ce4 <osMessageQueueNew+0xac>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d108      	bne.n	8001ce4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <osMessageQueueNew+0xac>
          mem = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	e001      	b.n	8001ce4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d10b      	bne.n	8001d02 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	9100      	str	r1, [sp, #0]
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f96d 	bl	8001fd8 <xQueueGenericCreateStatic>
 8001cfe:	6278      	str	r0, [r7, #36]	; 0x24
 8001d00:	e008      	b.n	8001d14 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f9da 	bl	80020c6 <xQueueGenericCreate>
 8001d12:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <osMessageQueueNew+0xf0>
        name = attr->name;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e001      	b.n	8001d2c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001d2c:	69f9      	ldr	r1, [r7, #28]
 8001d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d30:	f000 fdb0 	bl	8002894 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000114c 	.word	0x2000114c

08001d44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <vApplicationGetIdleTaskMemory+0x28>)
 8001d54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	20001150 	.word	0x20001150
 8001d70:	200011ac 	.word	0x200011ac

08001d74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <vApplicationGetTimerTaskMemory+0x2c>)
 8001d84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <vApplicationGetTimerTaskMemory+0x30>)
 8001d8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d92:	601a      	str	r2, [r3, #0]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	200013ac 	.word	0x200013ac
 8001da4:	20001408 	.word	0x20001408

08001da8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f103 0208 	add.w	r2, r3, #8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f103 0208 	add.w	r2, r3, #8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f103 0208 	add.w	r2, r3, #8
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e5a:	d103      	bne.n	8001e64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e00c      	b.n	8001e7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3308      	adds	r3, #8
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e002      	b.n	8001e72 <vListInsert+0x2e>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d2f6      	bcs.n	8001e6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6892      	ldr	r2, [r2, #8]
 8001eca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6852      	ldr	r2, [r2, #4]
 8001ed4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d103      	bne.n	8001ee8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	1e5a      	subs	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
	...

08001f08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f2e:	bf00      	nop
 8001f30:	e7fe      	b.n	8001f30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001f32:	f002 f803 	bl	8003f3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	441a      	add	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	3b01      	subs	r3, #1
 8001f64:	68f9      	ldr	r1, [r7, #12]
 8001f66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	441a      	add	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	22ff      	movs	r2, #255	; 0xff
 8001f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	22ff      	movs	r2, #255	; 0xff
 8001f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d114      	bne.n	8001fb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01a      	beq.n	8001fc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3310      	adds	r3, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 f92f 	bl	80031f8 <xTaskRemoveFromEventList>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d012      	beq.n	8001fc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <xQueueGenericReset+0xcc>)
 8001fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	e009      	b.n	8001fc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3310      	adds	r3, #16
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fef6 	bl	8001da8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3324      	adds	r3, #36	; 0x24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fef1 	bl	8001da8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001fc6:	f001 ffe9 	bl	8003f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	e000ed04 	.word	0xe000ed04

08001fd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08e      	sub	sp, #56	; 0x38
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10a      	bne.n	8002002 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ffe:	bf00      	nop
 8002000:	e7fe      	b.n	8002000 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
}
 800201a:	bf00      	nop
 800201c:	e7fe      	b.n	800201c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <xQueueGenericCreateStatic+0x52>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <xQueueGenericCreateStatic+0x56>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <xQueueGenericCreateStatic+0x58>
 800202e:	2300      	movs	r3, #0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	623b      	str	r3, [r7, #32]
}
 8002046:	bf00      	nop
 8002048:	e7fe      	b.n	8002048 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <xQueueGenericCreateStatic+0x7e>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <xQueueGenericCreateStatic+0x82>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <xQueueGenericCreateStatic+0x84>
 800205a:	2300      	movs	r3, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	61fb      	str	r3, [r7, #28]
}
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002076:	2350      	movs	r3, #80	; 0x50
 8002078:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b50      	cmp	r3, #80	; 0x50
 800207e:	d00a      	beq.n	8002096 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002084:	f383 8811 	msr	BASEPRI, r3
 8002088:	f3bf 8f6f 	isb	sy
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	61bb      	str	r3, [r7, #24]
}
 8002092:	bf00      	nop
 8002094:	e7fe      	b.n	8002094 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00d      	beq.n	80020bc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020a8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80020ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f843 	bl	8002142 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80020be:	4618      	mov	r0, r3
 80020c0:	3730      	adds	r7, #48	; 0x30
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b08a      	sub	sp, #40	; 0x28
 80020ca:	af02      	add	r7, sp, #8
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	4613      	mov	r3, r2
 80020d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10a      	bne.n	80020f0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80020da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	613b      	str	r3, [r7, #16]
}
 80020ec:	bf00      	nop
 80020ee:	e7fe      	b.n	80020ee <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e004      	b.n	8002106 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	fb02 f303 	mul.w	r3, r2, r3
 8002104:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3350      	adds	r3, #80	; 0x50
 800210a:	4618      	mov	r0, r3
 800210c:	f002 f816 	bl	800413c <pvPortMalloc>
 8002110:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00f      	beq.n	8002138 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	3350      	adds	r3, #80	; 0x50
 800211c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002126:	79fa      	ldrb	r2, [r7, #7]
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f805 	bl	8002142 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002138:	69bb      	ldr	r3, [r7, #24]
	}
 800213a:	4618      	mov	r0, r3
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e002      	b.n	8002164 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002170:	2101      	movs	r1, #1
 8002172:	69b8      	ldr	r0, [r7, #24]
 8002174:	f7ff fec8 	bl	8001f08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08e      	sub	sp, #56	; 0x38
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002196:	2300      	movs	r3, #0
 8002198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <xQueueGenericSend+0x32>
	__asm volatile
 80021a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80021b6:	bf00      	nop
 80021b8:	e7fe      	b.n	80021b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d103      	bne.n	80021c8 <xQueueGenericSend+0x40>
 80021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <xQueueGenericSend+0x44>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <xQueueGenericSend+0x46>
 80021cc:	2300      	movs	r3, #0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <xQueueGenericSend+0x60>
	__asm volatile
 80021d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021e4:	bf00      	nop
 80021e6:	e7fe      	b.n	80021e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d103      	bne.n	80021f6 <xQueueGenericSend+0x6e>
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <xQueueGenericSend+0x72>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <xQueueGenericSend+0x74>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <xQueueGenericSend+0x8e>
	__asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	623b      	str	r3, [r7, #32]
}
 8002212:	bf00      	nop
 8002214:	e7fe      	b.n	8002214 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002216:	f001 f9b1 	bl	800357c <xTaskGetSchedulerState>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <xQueueGenericSend+0x9e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <xQueueGenericSend+0xa2>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <xQueueGenericSend+0xa4>
 800222a:	2300      	movs	r3, #0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <xQueueGenericSend+0xbe>
	__asm volatile
 8002230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	61fb      	str	r3, [r7, #28]
}
 8002242:	bf00      	nop
 8002244:	e7fe      	b.n	8002244 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002246:	f001 fe79 	bl	8003f3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	429a      	cmp	r2, r3
 8002254:	d302      	bcc.n	800225c <xQueueGenericSend+0xd4>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d129      	bne.n	80022b0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002262:	f000 fa07 	bl	8002674 <prvCopyDataToQueue>
 8002266:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	2b00      	cmp	r3, #0
 800226e:	d010      	beq.n	8002292 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	3324      	adds	r3, #36	; 0x24
 8002274:	4618      	mov	r0, r3
 8002276:	f000 ffbf 	bl	80031f8 <xTaskRemoveFromEventList>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <xQueueGenericSend+0x1f8>)
 8002282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	e00a      	b.n	80022a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <xQueueGenericSend+0x1f8>)
 800229a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80022a8:	f001 fe78 	bl	8003f9c <vPortExitCritical>
				return pdPASS;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e063      	b.n	8002378 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d103      	bne.n	80022be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022b6:	f001 fe71 	bl	8003f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e05c      	b.n	8002378 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fff9 	bl	80032c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022ce:	2301      	movs	r3, #1
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022d2:	f001 fe63 	bl	8003f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022d6:	f000 fd6b 	bl	8002db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022da:	f001 fe2f 	bl	8003f3c <vPortEnterCritical>
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022e4:	b25b      	sxtb	r3, r3
 80022e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ea:	d103      	bne.n	80022f4 <xQueueGenericSend+0x16c>
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002300:	d103      	bne.n	800230a <xQueueGenericSend+0x182>
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800230a:	f001 fe47 	bl	8003f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800230e:	1d3a      	adds	r2, r7, #4
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 ffe8 	bl	80032ec <xTaskCheckForTimeOut>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d124      	bne.n	800236c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002324:	f000 fa9e 	bl	8002864 <prvIsQueueFull>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d018      	beq.n	8002360 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	3310      	adds	r3, #16
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f000 ff0e 	bl	8003158 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800233c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800233e:	f000 fa29 	bl	8002794 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002342:	f000 fd43 	bl	8002dcc <xTaskResumeAll>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	f47f af7c 	bne.w	8002246 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <xQueueGenericSend+0x1f8>)
 8002350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	f3bf 8f6f 	isb	sy
 800235e:	e772      	b.n	8002246 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002362:	f000 fa17 	bl	8002794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002366:	f000 fd31 	bl	8002dcc <xTaskResumeAll>
 800236a:	e76c      	b.n	8002246 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800236c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800236e:	f000 fa11 	bl	8002794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002372:	f000 fd2b 	bl	8002dcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002376:	2300      	movs	r3, #0
		}
	}
}
 8002378:	4618      	mov	r0, r3
 800237a:	3738      	adds	r7, #56	; 0x38
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	e000ed04 	.word	0xe000ed04

08002384 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08e      	sub	sp, #56	; 0x38
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023ae:	bf00      	nop
 80023b0:	e7fe      	b.n	80023b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d103      	bne.n	80023c0 <xQueueGenericSendFromISR+0x3c>
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <xQueueGenericSendFromISR+0x40>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <xQueueGenericSendFromISR+0x42>
 80023c4:	2300      	movs	r3, #0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	623b      	str	r3, [r7, #32]
}
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d103      	bne.n	80023ee <xQueueGenericSendFromISR+0x6a>
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <xQueueGenericSendFromISR+0x6e>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <xQueueGenericSendFromISR+0x70>
 80023f2:	2300      	movs	r3, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	61fb      	str	r3, [r7, #28]
}
 800240a:	bf00      	nop
 800240c:	e7fe      	b.n	800240c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800240e:	f001 fe57 	bl	80040c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002412:	f3ef 8211 	mrs	r2, BASEPRI
 8002416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	61ba      	str	r2, [r7, #24]
 8002428:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800242a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <xQueueGenericSendFromISR+0xbc>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d12c      	bne.n	800249a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002450:	f000 f910 	bl	8002674 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002454:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800245c:	d112      	bne.n	8002484 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	3324      	adds	r3, #36	; 0x24
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fec4 	bl	80031f8 <xTaskRemoveFromEventList>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00e      	beq.n	8002494 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00b      	beq.n	8002494 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e007      	b.n	8002494 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002484:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002488:	3301      	adds	r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	b25a      	sxtb	r2, r3
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002494:	2301      	movs	r3, #1
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002498:	e001      	b.n	800249e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80024a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80024aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3738      	adds	r7, #56	; 0x38
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	; 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <xQueueReceive+0x30>
	__asm volatile
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	623b      	str	r3, [r7, #32]
}
 80024e0:	bf00      	nop
 80024e2:	e7fe      	b.n	80024e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <xQueueReceive+0x3e>
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <xQueueReceive+0x42>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <xQueueReceive+0x44>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <xQueueReceive+0x5e>
	__asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	61fb      	str	r3, [r7, #28]
}
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002512:	f001 f833 	bl	800357c <xTaskGetSchedulerState>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <xQueueReceive+0x6e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <xQueueReceive+0x72>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <xQueueReceive+0x74>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10a      	bne.n	8002542 <xQueueReceive+0x8e>
	__asm volatile
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	61bb      	str	r3, [r7, #24]
}
 800253e:	bf00      	nop
 8002540:	e7fe      	b.n	8002540 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002542:	f001 fcfb 	bl	8003f3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01f      	beq.n	8002592 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002556:	f000 f8f7 	bl	8002748 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00f      	beq.n	800258a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	3310      	adds	r3, #16
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fe42 	bl	80031f8 <xTaskRemoveFromEventList>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <xQueueReceive+0x1bc>)
 800257c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800258a:	f001 fd07 	bl	8003f9c <vPortExitCritical>
				return pdPASS;
 800258e:	2301      	movs	r3, #1
 8002590:	e069      	b.n	8002666 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d103      	bne.n	80025a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002598:	f001 fd00 	bl	8003f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800259c:	2300      	movs	r3, #0
 800259e:	e062      	b.n	8002666 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025a6:	f107 0310 	add.w	r3, r7, #16
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fe88 	bl	80032c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025b4:	f001 fcf2 	bl	8003f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025b8:	f000 fbfa 	bl	8002db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025bc:	f001 fcbe 	bl	8003f3c <vPortEnterCritical>
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025c6:	b25b      	sxtb	r3, r3
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025cc:	d103      	bne.n	80025d6 <xQueueReceive+0x122>
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e2:	d103      	bne.n	80025ec <xQueueReceive+0x138>
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ec:	f001 fcd6 	bl	8003f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f0:	1d3a      	adds	r2, r7, #4
 80025f2:	f107 0310 	add.w	r3, r7, #16
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fe77 	bl	80032ec <xTaskCheckForTimeOut>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d123      	bne.n	800264c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002606:	f000 f917 	bl	8002838 <prvIsQueueEmpty>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d017      	beq.n	8002640 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	3324      	adds	r3, #36	; 0x24
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fd9d 	bl	8003158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800261e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002620:	f000 f8b8 	bl	8002794 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002624:	f000 fbd2 	bl	8002dcc <xTaskResumeAll>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d189      	bne.n	8002542 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <xQueueReceive+0x1bc>)
 8002630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	e780      	b.n	8002542 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002642:	f000 f8a7 	bl	8002794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002646:	f000 fbc1 	bl	8002dcc <xTaskResumeAll>
 800264a:	e77a      	b.n	8002542 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800264c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800264e:	f000 f8a1 	bl	8002794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002652:	f000 fbbb 	bl	8002dcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002658:	f000 f8ee 	bl	8002838 <prvIsQueueEmpty>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f43f af6f 	beq.w	8002542 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002664:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002666:	4618      	mov	r0, r3
 8002668:	3730      	adds	r7, #48	; 0x30
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000ed04 	.word	0xe000ed04

08002674 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d14d      	bne.n	8002736 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 ff8a 	bl	80035b8 <xTaskPriorityDisinherit>
 80026a4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	e043      	b.n	8002736 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d119      	bne.n	80026e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6898      	ldr	r0, [r3, #8]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	461a      	mov	r2, r3
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	f001 ff40 	bl	8004544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	441a      	add	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d32b      	bcc.n	8002736 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	e026      	b.n	8002736 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	68d8      	ldr	r0, [r3, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	461a      	mov	r2, r3
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	f001 ff26 	bl	8004544 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	425b      	negs	r3, r3
 8002702:	441a      	add	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	425b      	negs	r3, r3
 800271e:	441a      	add	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d105      	bne.n	8002736 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	3b01      	subs	r3, #1
 8002734:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800273e:	697b      	ldr	r3, [r7, #20]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d018      	beq.n	800278c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	441a      	add	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	d303      	bcc.n	800277c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68d9      	ldr	r1, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	461a      	mov	r2, r3
 8002786:	6838      	ldr	r0, [r7, #0]
 8002788:	f001 fedc 	bl	8004544 <memcpy>
	}
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800279c:	f001 fbce 	bl	8003f3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027a8:	e011      	b.n	80027ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d012      	beq.n	80027d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3324      	adds	r3, #36	; 0x24
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fd1e 	bl	80031f8 <xTaskRemoveFromEventList>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027c2:	f000 fdf5 	bl	80033b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	dce9      	bgt.n	80027aa <prvUnlockQueue+0x16>
 80027d6:	e000      	b.n	80027da <prvUnlockQueue+0x46>
					break;
 80027d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	22ff      	movs	r2, #255	; 0xff
 80027de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80027e2:	f001 fbdb 	bl	8003f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027e6:	f001 fba9 	bl	8003f3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027f2:	e011      	b.n	8002818 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d012      	beq.n	8002822 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3310      	adds	r3, #16
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fcf9 	bl	80031f8 <xTaskRemoveFromEventList>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800280c:	f000 fdd0 	bl	80033b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002810:	7bbb      	ldrb	r3, [r7, #14]
 8002812:	3b01      	subs	r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800281c:	2b00      	cmp	r3, #0
 800281e:	dce9      	bgt.n	80027f4 <prvUnlockQueue+0x60>
 8002820:	e000      	b.n	8002824 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002822:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	22ff      	movs	r2, #255	; 0xff
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800282c:	f001 fbb6 	bl	8003f9c <vPortExitCritical>
}
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002840:	f001 fb7c 	bl	8003f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800284c:	2301      	movs	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	e001      	b.n	8002856 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002856:	f001 fba1 	bl	8003f9c <vPortExitCritical>

	return xReturn;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800286c:	f001 fb66 	bl	8003f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	429a      	cmp	r2, r3
 800287a:	d102      	bne.n	8002882 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800287c:	2301      	movs	r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e001      	b.n	8002886 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002886:	f001 fb89 	bl	8003f9c <vPortExitCritical>

	return xReturn;
 800288a:	68fb      	ldr	r3, [r7, #12]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e014      	b.n	80028ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <vQueueAddToRegistry+0x4c>)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028b0:	490b      	ldr	r1, [pc, #44]	; (80028e0 <vQueueAddToRegistry+0x4c>)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <vQueueAddToRegistry+0x4c>)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028c6:	e006      	b.n	80028d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3301      	adds	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b07      	cmp	r3, #7
 80028d2:	d9e7      	bls.n	80028a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	20001808 	.word	0x20001808

080028e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80028f4:	f001 fb22 	bl	8003f3c <vPortEnterCritical>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002904:	d103      	bne.n	800290e <vQueueWaitForMessageRestricted+0x2a>
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002914:	b25b      	sxtb	r3, r3
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291a:	d103      	bne.n	8002924 <vQueueWaitForMessageRestricted+0x40>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002924:	f001 fb3a 	bl	8003f9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d106      	bne.n	800293e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fc31 	bl	80031a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800293e:	6978      	ldr	r0, [r7, #20]
 8002940:	f7ff ff28 	bl	8002794 <prvUnlockQueue>
	}
 8002944:	bf00      	nop
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	; 0x38
 8002950:	af04      	add	r7, sp, #16
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	623b      	str	r3, [r7, #32]
}
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <xTaskCreateStatic+0x46>
	__asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	61fb      	str	r3, [r7, #28]
}
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002992:	235c      	movs	r3, #92	; 0x5c
 8002994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b5c      	cmp	r3, #92	; 0x5c
 800299a:	d00a      	beq.n	80029b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	61bb      	str	r3, [r7, #24]
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01e      	beq.n	80029f6 <xTaskCreateStatic+0xaa>
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d01b      	beq.n	80029f6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029d0:	2300      	movs	r3, #0
 80029d2:	9303      	str	r3, [sp, #12]
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	9302      	str	r3, [sp, #8]
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f850 	bl	8002a8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029f0:	f000 f8d4 	bl	8002b9c <prvAddNewTaskToReadyList>
 80029f4:	e001      	b.n	80029fa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029fa:	697b      	ldr	r3, [r7, #20]
	}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08c      	sub	sp, #48	; 0x30
 8002a08:	af04      	add	r7, sp, #16
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 fb8f 	bl	800413c <pvPortMalloc>
 8002a1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00e      	beq.n	8002a44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a26:	205c      	movs	r0, #92	; 0x5c
 8002a28:	f001 fb88 	bl	800413c <pvPortMalloc>
 8002a2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
 8002a3a:	e005      	b.n	8002a48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a3c:	6978      	ldr	r0, [r7, #20]
 8002a3e:	f001 fc41 	bl	80042c4 <vPortFree>
 8002a42:	e001      	b.n	8002a48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d017      	beq.n	8002a7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9303      	str	r3, [sp, #12]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	9302      	str	r3, [sp, #8]
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f80e 	bl	8002a8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a72:	69f8      	ldr	r0, [r7, #28]
 8002a74:	f000 f892 	bl	8002b9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e002      	b.n	8002a84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a84:	69bb      	ldr	r3, [r7, #24]
	}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b088      	sub	sp, #32
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	21a5      	movs	r1, #165	; 0xa5
 8002aa8:	f001 fd20 	bl	80044ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f023 0307 	bic.w	r3, r3, #7
 8002ac4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	617b      	str	r3, [r7, #20]
}
 8002ae2:	bf00      	nop
 8002ae4:	e7fe      	b.n	8002ae4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e012      	b.n	8002b12 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	7819      	ldrb	r1, [r3, #0]
 8002af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4413      	add	r3, r2
 8002afa:	3334      	adds	r3, #52	; 0x34
 8002afc:	460a      	mov	r2, r1
 8002afe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	4413      	add	r3, r2
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d9e9      	bls.n	8002aec <prvInitialiseNewTask+0x5e>
 8002b18:	e000      	b.n	8002b1c <prvInitialiseNewTask+0x8e>
		{
			break;
 8002b1a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	2b37      	cmp	r3, #55	; 0x37
 8002b28:	d901      	bls.n	8002b2e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b2a:	2337      	movs	r3, #55	; 0x37
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	3304      	adds	r3, #4
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff f94e 	bl	8001de6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	3318      	adds	r3, #24
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f949 	bl	8001de6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	68f9      	ldr	r1, [r7, #12]
 8002b7c:	69b8      	ldr	r0, [r7, #24]
 8002b7e:	f001 f8ef 	bl	8003d60 <pxPortInitialiseStack>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b94:	bf00      	nop
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ba4:	f001 f9ca 	bl	8003f3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <prvAddNewTaskToReadyList+0xc4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <prvAddNewTaskToReadyList+0xc4>)
 8002bb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <prvAddNewTaskToReadyList+0xc8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bba:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <prvAddNewTaskToReadyList+0xc8>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <prvAddNewTaskToReadyList+0xc4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d110      	bne.n	8002bea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bc8:	f000 fc16 	bl	80033f8 <prvInitialiseTaskLists>
 8002bcc:	e00d      	b.n	8002bea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <prvAddNewTaskToReadyList+0xcc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bd6:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <prvAddNewTaskToReadyList+0xc8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d802      	bhi.n	8002bea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002be4:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <prvAddNewTaskToReadyList+0xc8>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <prvAddNewTaskToReadyList+0xd0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <prvAddNewTaskToReadyList+0xd0>)
 8002bf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <prvAddNewTaskToReadyList+0xd0>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <prvAddNewTaskToReadyList+0xd4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d903      	bls.n	8002c10 <prvAddNewTaskToReadyList+0x74>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <prvAddNewTaskToReadyList+0xd4>)
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <prvAddNewTaskToReadyList+0xd8>)
 8002c1e:	441a      	add	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f7ff f8e9 	bl	8001dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c2c:	f001 f9b6 	bl	8003f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c30:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <prvAddNewTaskToReadyList+0xcc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00e      	beq.n	8002c56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <prvAddNewTaskToReadyList+0xc8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d207      	bcs.n	8002c56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <prvAddNewTaskToReadyList+0xdc>)
 8002c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20001d1c 	.word	0x20001d1c
 8002c64:	20001848 	.word	0x20001848
 8002c68:	20001d28 	.word	0x20001d28
 8002c6c:	20001d38 	.word	0x20001d38
 8002c70:	20001d24 	.word	0x20001d24
 8002c74:	2000184c 	.word	0x2000184c
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d017      	beq.n	8002cbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <vTaskDelay+0x60>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <vTaskDelay+0x30>
	__asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	60bb      	str	r3, [r7, #8]
}
 8002ca8:	bf00      	nop
 8002caa:	e7fe      	b.n	8002caa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002cac:	f000 f880 	bl	8002db0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fcee 	bl	8003694 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002cb8:	f000 f888 	bl	8002dcc <xTaskResumeAll>
 8002cbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <vTaskDelay+0x64>)
 8002cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20001d44 	.word	0x20001d44
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cf2:	463a      	mov	r2, r7
 8002cf4:	1d39      	adds	r1, r7, #4
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff f822 	bl	8001d44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d00:	6839      	ldr	r1, [r7, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	9202      	str	r2, [sp, #8]
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	460a      	mov	r2, r1
 8002d12:	4921      	ldr	r1, [pc, #132]	; (8002d98 <vTaskStartScheduler+0xb4>)
 8002d14:	4821      	ldr	r0, [pc, #132]	; (8002d9c <vTaskStartScheduler+0xb8>)
 8002d16:	f7ff fe19 	bl	800294c <xTaskCreateStatic>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <vTaskStartScheduler+0xbc>)
 8002d1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <vTaskStartScheduler+0xbc>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e001      	b.n	8002d32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d102      	bne.n	8002d3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d38:	f000 fd00 	bl	800373c <xTimerCreateTimerTask>
 8002d3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d116      	bne.n	8002d72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	613b      	str	r3, [r7, #16]
}
 8002d56:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <vTaskStartScheduler+0xc0>)
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <vTaskStartScheduler+0xc4>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <vTaskStartScheduler+0xc8>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d6c:	f001 f874 	bl	8003e58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d70:	e00e      	b.n	8002d90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d78:	d10a      	bne.n	8002d90 <vTaskStartScheduler+0xac>
	__asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	60fb      	str	r3, [r7, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	e7fe      	b.n	8002d8e <vTaskStartScheduler+0xaa>
}
 8002d90:	bf00      	nop
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	08004620 	.word	0x08004620
 8002d9c:	080033c9 	.word	0x080033c9
 8002da0:	20001d40 	.word	0x20001d40
 8002da4:	20001d3c 	.word	0x20001d3c
 8002da8:	20001d28 	.word	0x20001d28
 8002dac:	20001d20 	.word	0x20001d20

08002db0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <vTaskSuspendAll+0x18>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	4a03      	ldr	r2, [pc, #12]	; (8002dc8 <vTaskSuspendAll+0x18>)
 8002dbc:	6013      	str	r3, [r2, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20001d44 	.word	0x20001d44

08002dcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dda:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <xTaskResumeAll+0x118>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	603b      	str	r3, [r7, #0]
}
 8002df4:	bf00      	nop
 8002df6:	e7fe      	b.n	8002df6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002df8:	f001 f8a0 	bl	8003f3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002dfc:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <xTaskResumeAll+0x118>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	4a38      	ldr	r2, [pc, #224]	; (8002ee4 <xTaskResumeAll+0x118>)
 8002e04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e06:	4b37      	ldr	r3, [pc, #220]	; (8002ee4 <xTaskResumeAll+0x118>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d162      	bne.n	8002ed4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e0e:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <xTaskResumeAll+0x11c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d05e      	beq.n	8002ed4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e16:	e02f      	b.n	8002e78 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e18:	4b34      	ldr	r3, [pc, #208]	; (8002eec <xTaskResumeAll+0x120>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3318      	adds	r3, #24
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff f845 	bl	8001eb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff f840 	bl	8001eb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <xTaskResumeAll+0x124>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d903      	bls.n	8002e48 <xTaskResumeAll+0x7c>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	4a2a      	ldr	r2, [pc, #168]	; (8002ef0 <xTaskResumeAll+0x124>)
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <xTaskResumeAll+0x128>)
 8002e56:	441a      	add	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7fe ffcd 	bl	8001dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <xTaskResumeAll+0x12c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d302      	bcc.n	8002e78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <xTaskResumeAll+0x130>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e78:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <xTaskResumeAll+0x120>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1cb      	bne.n	8002e18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e86:	f000 fb55 	bl	8003534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <xTaskResumeAll+0x134>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e96:	f000 f845 	bl	8002f24 <xTaskIncrementTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002ea0:	4b16      	ldr	r3, [pc, #88]	; (8002efc <xTaskResumeAll+0x130>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f1      	bne.n	8002e96 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <xTaskResumeAll+0x134>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <xTaskResumeAll+0x130>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <xTaskResumeAll+0x138>)
 8002ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ed4:	f001 f862 	bl	8003f9c <vPortExitCritical>

	return xAlreadyYielded;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20001d44 	.word	0x20001d44
 8002ee8:	20001d1c 	.word	0x20001d1c
 8002eec:	20001cdc 	.word	0x20001cdc
 8002ef0:	20001d24 	.word	0x20001d24
 8002ef4:	2000184c 	.word	0x2000184c
 8002ef8:	20001848 	.word	0x20001848
 8002efc:	20001d30 	.word	0x20001d30
 8002f00:	20001d2c 	.word	0x20001d2c
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f0e:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <xTaskGetTickCount+0x18>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f14:	687b      	ldr	r3, [r7, #4]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	20001d20 	.word	0x20001d20

08002f24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f2e:	4b51      	ldr	r3, [pc, #324]	; (8003074 <xTaskIncrementTick+0x150>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 808e 	bne.w	8003054 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f38:	4b4f      	ldr	r3, [pc, #316]	; (8003078 <xTaskIncrementTick+0x154>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f40:	4a4d      	ldr	r2, [pc, #308]	; (8003078 <xTaskIncrementTick+0x154>)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d120      	bne.n	8002f8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	; (800307c <xTaskIncrementTick+0x158>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <xTaskIncrementTick+0x48>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	603b      	str	r3, [r7, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	e7fe      	b.n	8002f6a <xTaskIncrementTick+0x46>
 8002f6c:	4b43      	ldr	r3, [pc, #268]	; (800307c <xTaskIncrementTick+0x158>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b43      	ldr	r3, [pc, #268]	; (8003080 <xTaskIncrementTick+0x15c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a41      	ldr	r2, [pc, #260]	; (800307c <xTaskIncrementTick+0x158>)
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4a41      	ldr	r2, [pc, #260]	; (8003080 <xTaskIncrementTick+0x15c>)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b40      	ldr	r3, [pc, #256]	; (8003084 <xTaskIncrementTick+0x160>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	4a3f      	ldr	r2, [pc, #252]	; (8003084 <xTaskIncrementTick+0x160>)
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	f000 fad3 	bl	8003534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f8e:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <xTaskIncrementTick+0x164>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d34e      	bcc.n	8003036 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f98:	4b38      	ldr	r3, [pc, #224]	; (800307c <xTaskIncrementTick+0x158>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <xTaskIncrementTick+0x82>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <xTaskIncrementTick+0x84>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fac:	4b36      	ldr	r3, [pc, #216]	; (8003088 <xTaskIncrementTick+0x164>)
 8002fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb2:	601a      	str	r2, [r3, #0]
					break;
 8002fb4:	e03f      	b.n	8003036 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <xTaskIncrementTick+0x158>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d203      	bcs.n	8002fd6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fce:	4a2e      	ldr	r2, [pc, #184]	; (8003088 <xTaskIncrementTick+0x164>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6013      	str	r3, [r2, #0]
						break;
 8002fd4:	e02f      	b.n	8003036 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe ff6a 	bl	8001eb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	3318      	adds	r3, #24
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe ff61 	bl	8001eb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff6:	4b25      	ldr	r3, [pc, #148]	; (800308c <xTaskIncrementTick+0x168>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d903      	bls.n	8003006 <xTaskIncrementTick+0xe2>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	4a22      	ldr	r2, [pc, #136]	; (800308c <xTaskIncrementTick+0x168>)
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <xTaskIncrementTick+0x16c>)
 8003014:	441a      	add	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3304      	adds	r3, #4
 800301a:	4619      	mov	r1, r3
 800301c:	4610      	mov	r0, r2
 800301e:	f7fe feee 	bl	8001dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <xTaskIncrementTick+0x170>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	429a      	cmp	r2, r3
 800302e:	d3b3      	bcc.n	8002f98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003030:	2301      	movs	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003034:	e7b0      	b.n	8002f98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <xTaskIncrementTick+0x170>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	4914      	ldr	r1, [pc, #80]	; (8003090 <xTaskIncrementTick+0x16c>)
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d907      	bls.n	800305e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800304e:	2301      	movs	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e004      	b.n	800305e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <xTaskIncrementTick+0x174>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	4a0f      	ldr	r2, [pc, #60]	; (8003098 <xTaskIncrementTick+0x174>)
 800305c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <xTaskIncrementTick+0x178>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003066:	2301      	movs	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800306a:	697b      	ldr	r3, [r7, #20]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20001d44 	.word	0x20001d44
 8003078:	20001d20 	.word	0x20001d20
 800307c:	20001cd4 	.word	0x20001cd4
 8003080:	20001cd8 	.word	0x20001cd8
 8003084:	20001d34 	.word	0x20001d34
 8003088:	20001d3c 	.word	0x20001d3c
 800308c:	20001d24 	.word	0x20001d24
 8003090:	2000184c 	.word	0x2000184c
 8003094:	20001848 	.word	0x20001848
 8003098:	20001d2c 	.word	0x20001d2c
 800309c:	20001d30 	.word	0x20001d30

080030a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030a6:	4b27      	ldr	r3, [pc, #156]	; (8003144 <vTaskSwitchContext+0xa4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <vTaskSwitchContext+0xa8>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030b4:	e041      	b.n	800313a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <vTaskSwitchContext+0xa8>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80030bc:	4b23      	ldr	r3, [pc, #140]	; (800314c <vTaskSwitchContext+0xac>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e010      	b.n	80030e6 <vTaskSwitchContext+0x46>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	607b      	str	r3, [r7, #4]
}
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <vTaskSwitchContext+0x3e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	491a      	ldr	r1, [pc, #104]	; (8003150 <vTaskSwitchContext+0xb0>)
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0e4      	beq.n	80030c4 <vTaskSwitchContext+0x24>
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4a12      	ldr	r2, [pc, #72]	; (8003150 <vTaskSwitchContext+0xb0>)
 8003106:	4413      	add	r3, r2
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	3308      	adds	r3, #8
 800311c:	429a      	cmp	r2, r3
 800311e:	d104      	bne.n	800312a <vTaskSwitchContext+0x8a>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a08      	ldr	r2, [pc, #32]	; (8003154 <vTaskSwitchContext+0xb4>)
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4a05      	ldr	r2, [pc, #20]	; (800314c <vTaskSwitchContext+0xac>)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6013      	str	r3, [r2, #0]
}
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	20001d44 	.word	0x20001d44
 8003148:	20001d30 	.word	0x20001d30
 800314c:	20001d24 	.word	0x20001d24
 8003150:	2000184c 	.word	0x2000184c
 8003154:	20001848 	.word	0x20001848

08003158 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	60fb      	str	r3, [r7, #12]
}
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800317e:	4b07      	ldr	r3, [pc, #28]	; (800319c <vTaskPlaceOnEventList+0x44>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3318      	adds	r3, #24
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe fe5c 	bl	8001e44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800318c:	2101      	movs	r1, #1
 800318e:	6838      	ldr	r0, [r7, #0]
 8003190:	f000 fa80 	bl	8003694 <prvAddCurrentTaskToDelayedList>
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20001848 	.word	0x20001848

080031a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10a      	bne.n	80031c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	617b      	str	r3, [r7, #20]
}
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3318      	adds	r3, #24
 80031ce:	4619      	mov	r1, r3
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7fe fe14 	bl	8001dfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	68b8      	ldr	r0, [r7, #8]
 80031e6:	f000 fa55 	bl	8003694 <prvAddCurrentTaskToDelayedList>
	}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20001848 	.word	0x20001848

080031f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	60fb      	str	r3, [r7, #12]
}
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	3318      	adds	r3, #24
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe fe43 	bl	8001eb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800322e:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <xTaskRemoveFromEventList+0xb0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d11d      	bne.n	8003272 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	3304      	adds	r3, #4
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fe3a 	bl	8001eb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <xTaskRemoveFromEventList+0xb4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d903      	bls.n	8003254 <xTaskRemoveFromEventList+0x5c>
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	4a16      	ldr	r2, [pc, #88]	; (80032ac <xTaskRemoveFromEventList+0xb4>)
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <xTaskRemoveFromEventList+0xb8>)
 8003262:	441a      	add	r2, r3
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f7fe fdc7 	bl	8001dfe <vListInsertEnd>
 8003270:	e005      	b.n	800327e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	3318      	adds	r3, #24
 8003276:	4619      	mov	r1, r3
 8003278:	480e      	ldr	r0, [pc, #56]	; (80032b4 <xTaskRemoveFromEventList+0xbc>)
 800327a:	f7fe fdc0 	bl	8001dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <xTaskRemoveFromEventList+0xc0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	429a      	cmp	r2, r3
 800328a:	d905      	bls.n	8003298 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <xTaskRemoveFromEventList+0xc4>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e001      	b.n	800329c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800329c:	697b      	ldr	r3, [r7, #20]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20001d44 	.word	0x20001d44
 80032ac:	20001d24 	.word	0x20001d24
 80032b0:	2000184c 	.word	0x2000184c
 80032b4:	20001cdc 	.word	0x20001cdc
 80032b8:	20001848 	.word	0x20001848
 80032bc:	20001d30 	.word	0x20001d30

080032c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <vTaskInternalSetTimeOutState+0x24>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <vTaskInternalSetTimeOutState+0x28>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	605a      	str	r2, [r3, #4]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20001d34 	.word	0x20001d34
 80032e8:	20001d20 	.word	0x20001d20

080032ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	613b      	str	r3, [r7, #16]
}
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	60fb      	str	r3, [r7, #12]
}
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800332e:	f000 fe05 	bl	8003f3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003332:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <xTaskCheckForTimeOut+0xbc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800334a:	d102      	bne.n	8003352 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	e023      	b.n	800339a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <xTaskCheckForTimeOut+0xc0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d007      	beq.n	800336e <xTaskCheckForTimeOut+0x82>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	429a      	cmp	r2, r3
 8003366:	d302      	bcc.n	800336e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003368:	2301      	movs	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	e015      	b.n	800339a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	429a      	cmp	r2, r3
 8003376:	d20b      	bcs.n	8003390 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	1ad2      	subs	r2, r2, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff9b 	bl	80032c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	e004      	b.n	800339a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003396:	2301      	movs	r3, #1
 8003398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800339a:	f000 fdff 	bl	8003f9c <vPortExitCritical>

	return xReturn;
 800339e:	69fb      	ldr	r3, [r7, #28]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20001d20 	.word	0x20001d20
 80033ac:	20001d34 	.word	0x20001d34

080033b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <vTaskMissedYield+0x14>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20001d30 	.word	0x20001d30

080033c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033d0:	f000 f852 	bl	8003478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <prvIdleTask+0x28>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d9f9      	bls.n	80033d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <prvIdleTask+0x2c>)
 80033de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033ec:	e7f0      	b.n	80033d0 <prvIdleTask+0x8>
 80033ee:	bf00      	nop
 80033f0:	2000184c 	.word	0x2000184c
 80033f4:	e000ed04 	.word	0xe000ed04

080033f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	e00c      	b.n	800341e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <prvInitialiseTaskLists+0x60>)
 8003410:	4413      	add	r3, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fcc8 	bl	8001da8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3301      	adds	r3, #1
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b37      	cmp	r3, #55	; 0x37
 8003422:	d9ef      	bls.n	8003404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003424:	480d      	ldr	r0, [pc, #52]	; (800345c <prvInitialiseTaskLists+0x64>)
 8003426:	f7fe fcbf 	bl	8001da8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800342a:	480d      	ldr	r0, [pc, #52]	; (8003460 <prvInitialiseTaskLists+0x68>)
 800342c:	f7fe fcbc 	bl	8001da8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <prvInitialiseTaskLists+0x6c>)
 8003432:	f7fe fcb9 	bl	8001da8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003436:	480c      	ldr	r0, [pc, #48]	; (8003468 <prvInitialiseTaskLists+0x70>)
 8003438:	f7fe fcb6 	bl	8001da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800343c:	480b      	ldr	r0, [pc, #44]	; (800346c <prvInitialiseTaskLists+0x74>)
 800343e:	f7fe fcb3 	bl	8001da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <prvInitialiseTaskLists+0x78>)
 8003444:	4a05      	ldr	r2, [pc, #20]	; (800345c <prvInitialiseTaskLists+0x64>)
 8003446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <prvInitialiseTaskLists+0x7c>)
 800344a:	4a05      	ldr	r2, [pc, #20]	; (8003460 <prvInitialiseTaskLists+0x68>)
 800344c:	601a      	str	r2, [r3, #0]
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	2000184c 	.word	0x2000184c
 800345c:	20001cac 	.word	0x20001cac
 8003460:	20001cc0 	.word	0x20001cc0
 8003464:	20001cdc 	.word	0x20001cdc
 8003468:	20001cf0 	.word	0x20001cf0
 800346c:	20001d08 	.word	0x20001d08
 8003470:	20001cd4 	.word	0x20001cd4
 8003474:	20001cd8 	.word	0x20001cd8

08003478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800347e:	e019      	b.n	80034b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003480:	f000 fd5c 	bl	8003f3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <prvCheckTasksWaitingTermination+0x50>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe fd0f 	bl	8001eb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <prvCheckTasksWaitingTermination+0x54>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3b01      	subs	r3, #1
 800349c:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <prvCheckTasksWaitingTermination+0x54>)
 800349e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <prvCheckTasksWaitingTermination+0x58>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <prvCheckTasksWaitingTermination+0x58>)
 80034a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034aa:	f000 fd77 	bl	8003f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f810 	bl	80034d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <prvCheckTasksWaitingTermination+0x58>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e1      	bne.n	8003480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20001cf0 	.word	0x20001cf0
 80034cc:	20001d1c 	.word	0x20001d1c
 80034d0:	20001d04 	.word	0x20001d04

080034d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d108      	bne.n	80034f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 feea 	bl	80042c4 <vPortFree>
				vPortFree( pxTCB );
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fee7 	bl	80042c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034f6:	e018      	b.n	800352a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d103      	bne.n	800350a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fede 	bl	80042c4 <vPortFree>
	}
 8003508:	e00f      	b.n	800352a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003510:	2b02      	cmp	r3, #2
 8003512:	d00a      	beq.n	800352a <prvDeleteTCB+0x56>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	60fb      	str	r3, [r7, #12]
}
 8003526:	bf00      	nop
 8003528:	e7fe      	b.n	8003528 <prvDeleteTCB+0x54>
	}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <prvResetNextTaskUnblockTime+0x40>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <prvResetNextTaskUnblockTime+0x14>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <prvResetNextTaskUnblockTime+0x16>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <prvResetNextTaskUnblockTime+0x44>)
 8003550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003554:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003556:	e008      	b.n	800356a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <prvResetNextTaskUnblockTime+0x40>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4a04      	ldr	r2, [pc, #16]	; (8003578 <prvResetNextTaskUnblockTime+0x44>)
 8003568:	6013      	str	r3, [r2, #0]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	20001cd4 	.word	0x20001cd4
 8003578:	20001d3c 	.word	0x20001d3c

0800357c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <xTaskGetSchedulerState+0x34>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800358a:	2301      	movs	r3, #1
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	e008      	b.n	80035a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <xTaskGetSchedulerState+0x38>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003598:	2302      	movs	r3, #2
 800359a:	607b      	str	r3, [r7, #4]
 800359c:	e001      	b.n	80035a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035a2:	687b      	ldr	r3, [r7, #4]
	}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20001d28 	.word	0x20001d28
 80035b4:	20001d44 	.word	0x20001d44

080035b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d056      	beq.n	800367c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80035ce:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <xTaskPriorityDisinherit+0xd0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d00a      	beq.n	80035ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	60fb      	str	r3, [r7, #12]
}
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	60bb      	str	r3, [r7, #8]
}
 8003608:	bf00      	nop
 800360a:	e7fe      	b.n	800360a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	1e5a      	subs	r2, r3, #1
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	429a      	cmp	r2, r3
 8003620:	d02c      	beq.n	800367c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003626:	2b00      	cmp	r3, #0
 8003628:	d128      	bne.n	800367c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	3304      	adds	r3, #4
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fc40 	bl	8001eb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <xTaskPriorityDisinherit+0xd4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d903      	bls.n	800365c <xTaskPriorityDisinherit+0xa4>
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	4a0c      	ldr	r2, [pc, #48]	; (800368c <xTaskPriorityDisinherit+0xd4>)
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4a09      	ldr	r2, [pc, #36]	; (8003690 <xTaskPriorityDisinherit+0xd8>)
 800366a:	441a      	add	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f7fe fbc3 	bl	8001dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003678:	2301      	movs	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800367c:	697b      	ldr	r3, [r7, #20]
	}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20001848 	.word	0x20001848
 800368c:	20001d24 	.word	0x20001d24
 8003690:	2000184c 	.word	0x2000184c

08003694 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800369e:	4b21      	ldr	r3, [pc, #132]	; (8003724 <prvAddCurrentTaskToDelayedList+0x90>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036a4:	4b20      	ldr	r3, [pc, #128]	; (8003728 <prvAddCurrentTaskToDelayedList+0x94>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3304      	adds	r3, #4
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fc02 	bl	8001eb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b6:	d10a      	bne.n	80036ce <prvAddCurrentTaskToDelayedList+0x3a>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <prvAddCurrentTaskToDelayedList+0x94>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4819      	ldr	r0, [pc, #100]	; (800372c <prvAddCurrentTaskToDelayedList+0x98>)
 80036c8:	f7fe fb99 	bl	8001dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80036cc:	e026      	b.n	800371c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <prvAddCurrentTaskToDelayedList+0x94>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d209      	bcs.n	80036fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <prvAddCurrentTaskToDelayedList+0x9c>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <prvAddCurrentTaskToDelayedList+0x94>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f7fe fba6 	bl	8001e44 <vListInsert>
}
 80036f8:	e010      	b.n	800371c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <prvAddCurrentTaskToDelayedList+0xa0>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <prvAddCurrentTaskToDelayedList+0x94>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f7fe fb9c 	bl	8001e44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <prvAddCurrentTaskToDelayedList+0xa4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d202      	bcs.n	800371c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003716:	4a08      	ldr	r2, [pc, #32]	; (8003738 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20001d20 	.word	0x20001d20
 8003728:	20001848 	.word	0x20001848
 800372c:	20001d08 	.word	0x20001d08
 8003730:	20001cd8 	.word	0x20001cd8
 8003734:	20001cd4 	.word	0x20001cd4
 8003738:	20001d3c 	.word	0x20001d3c

0800373c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003746:	f000 facb 	bl	8003ce0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800374a:	4b1c      	ldr	r3, [pc, #112]	; (80037bc <xTimerCreateTimerTask+0x80>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d021      	beq.n	8003796 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800375a:	1d3a      	adds	r2, r7, #4
 800375c:	f107 0108 	add.w	r1, r7, #8
 8003760:	f107 030c 	add.w	r3, r7, #12
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fb05 	bl	8001d74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	9202      	str	r2, [sp, #8]
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	2302      	movs	r3, #2
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	2300      	movs	r3, #0
 800377a:	460a      	mov	r2, r1
 800377c:	4910      	ldr	r1, [pc, #64]	; (80037c0 <xTimerCreateTimerTask+0x84>)
 800377e:	4811      	ldr	r0, [pc, #68]	; (80037c4 <xTimerCreateTimerTask+0x88>)
 8003780:	f7ff f8e4 	bl	800294c <xTaskCreateStatic>
 8003784:	4603      	mov	r3, r0
 8003786:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <xTimerCreateTimerTask+0x8c>)
 8003788:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <xTimerCreateTimerTask+0x8c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003792:	2301      	movs	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	613b      	str	r3, [r7, #16]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80037b2:	697b      	ldr	r3, [r7, #20]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20001d78 	.word	0x20001d78
 80037c0:	08004628 	.word	0x08004628
 80037c4:	080038e9 	.word	0x080038e9
 80037c8:	20001d7c 	.word	0x20001d7c

080037cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	623b      	str	r3, [r7, #32]
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <xTimerGenericCommand+0x98>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d02a      	beq.n	8003858 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b05      	cmp	r3, #5
 8003812:	dc18      	bgt.n	8003846 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003814:	f7ff feb2 	bl	800357c <xTaskGetSchedulerState>
 8003818:	4603      	mov	r3, r0
 800381a:	2b02      	cmp	r3, #2
 800381c:	d109      	bne.n	8003832 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <xTimerGenericCommand+0x98>)
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	f107 0110 	add.w	r1, r7, #16
 8003826:	2300      	movs	r3, #0
 8003828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382a:	f7fe fcad 	bl	8002188 <xQueueGenericSend>
 800382e:	6278      	str	r0, [r7, #36]	; 0x24
 8003830:	e012      	b.n	8003858 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <xTimerGenericCommand+0x98>)
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	f107 0110 	add.w	r1, r7, #16
 800383a:	2300      	movs	r3, #0
 800383c:	2200      	movs	r2, #0
 800383e:	f7fe fca3 	bl	8002188 <xQueueGenericSend>
 8003842:	6278      	str	r0, [r7, #36]	; 0x24
 8003844:	e008      	b.n	8003858 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <xTimerGenericCommand+0x98>)
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	f107 0110 	add.w	r1, r7, #16
 800384e:	2300      	movs	r3, #0
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	f7fe fd97 	bl	8002384 <xQueueGenericSendFromISR>
 8003856:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800385a:	4618      	mov	r0, r3
 800385c:	3728      	adds	r7, #40	; 0x28
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20001d78 	.word	0x20001d78

08003868 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af02      	add	r7, sp, #8
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003872:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <prvProcessExpiredTimer+0x7c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	3304      	adds	r3, #4
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fb17 	bl	8001eb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d122      	bne.n	80038d4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	18d1      	adds	r1, r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	6978      	ldr	r0, [r7, #20]
 800389c:	f000 f8c8 	bl	8003a30 <prvInsertTimerInActiveList>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d016      	beq.n	80038d4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038a6:	2300      	movs	r3, #0
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2300      	movs	r3, #0
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	2100      	movs	r1, #0
 80038b0:	6978      	ldr	r0, [r7, #20]
 80038b2:	f7ff ff8b 	bl	80037cc <xTimerGenericCommand>
 80038b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60fb      	str	r3, [r7, #12]
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	6978      	ldr	r0, [r7, #20]
 80038da:	4798      	blx	r3
}
 80038dc:	bf00      	nop
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20001d70 	.word	0x20001d70

080038e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038f0:	f107 0308 	add.w	r3, r7, #8
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f857 	bl	80039a8 <prvGetNextExpireTime>
 80038fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4619      	mov	r1, r3
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f803 	bl	800390c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003906:	f000 f8d5 	bl	8003ab4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800390a:	e7f1      	b.n	80038f0 <prvTimerTask+0x8>

0800390c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003916:	f7ff fa4b 	bl	8002db0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800391a:	f107 0308 	add.w	r3, r7, #8
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f866 	bl	80039f0 <prvSampleTimeNow>
 8003924:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d130      	bne.n	800398e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <prvProcessTimerOrBlockTask+0x3c>
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	429a      	cmp	r2, r3
 8003938:	d806      	bhi.n	8003948 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800393a:	f7ff fa47 	bl	8002dcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff91 	bl	8003868 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003946:	e024      	b.n	8003992 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <prvProcessTimerOrBlockTask+0x90>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <prvProcessTimerOrBlockTask+0x94>)
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	f7fe ffb9 	bl	80028e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003972:	f7ff fa2b 	bl	8002dcc <xTaskResumeAll>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <prvProcessTimerOrBlockTask+0x98>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
}
 800398c:	e001      	b.n	8003992 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800398e:	f7ff fa1d 	bl	8002dcc <xTaskResumeAll>
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20001d74 	.word	0x20001d74
 80039a0:	20001d78 	.word	0x20001d78
 80039a4:	e000ed04 	.word	0xe000ed04

080039a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <prvGetNextExpireTime+0x44>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf0c      	ite	eq
 80039ba:	2301      	moveq	r3, #1
 80039bc:	2300      	movne	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <prvGetNextExpireTime+0x44>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	e001      	b.n	80039de <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80039de:	68fb      	ldr	r3, [r7, #12]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20001d70 	.word	0x20001d70

080039f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80039f8:	f7ff fa86 	bl	8002f08 <xTaskGetTickCount>
 80039fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <prvSampleTimeNow+0x3c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d205      	bcs.n	8003a14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003a08:	f000 f908 	bl	8003c1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e002      	b.n	8003a1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003a1a:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <prvSampleTimeNow+0x3c>)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003a20:	68fb      	ldr	r3, [r7, #12]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20001d80 	.word	0x20001d80

08003a30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d812      	bhi.n	8003a7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	1ad2      	subs	r2, r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d302      	bcc.n	8003a6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003a64:	2301      	movs	r3, #1
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e01b      	b.n	8003aa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a6a:	4b10      	ldr	r3, [pc, #64]	; (8003aac <prvInsertTimerInActiveList+0x7c>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3304      	adds	r3, #4
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f7fe f9e5 	bl	8001e44 <vListInsert>
 8003a7a:	e012      	b.n	8003aa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d206      	bcs.n	8003a92 <prvInsertTimerInActiveList+0x62>
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d302      	bcc.n	8003a92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e007      	b.n	8003aa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a92:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <prvInsertTimerInActiveList+0x80>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f7fe f9d1 	bl	8001e44 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003aa2:	697b      	ldr	r3, [r7, #20]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20001d74 	.word	0x20001d74
 8003ab0:	20001d70 	.word	0x20001d70

08003ab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08e      	sub	sp, #56	; 0x38
 8003ab8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003aba:	e09d      	b.n	8003bf8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	da18      	bge.n	8003af4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003ac2:	1d3b      	adds	r3, r7, #4
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	61fb      	str	r3, [r7, #28]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aea:	6850      	ldr	r0, [r2, #4]
 8003aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aee:	6892      	ldr	r2, [r2, #8]
 8003af0:	4611      	mov	r1, r2
 8003af2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	db7e      	blt.n	8003bf8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe f9d2 	bl	8001eb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b10:	463b      	mov	r3, r7
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ff6c 	bl	80039f0 <prvSampleTimeNow>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b09      	cmp	r3, #9
 8003b1e:	d86a      	bhi.n	8003bf6 <prvProcessReceivedCommands+0x142>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <prvProcessReceivedCommands+0x74>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b51 	.word	0x08003b51
 8003b2c:	08003b51 	.word	0x08003b51
 8003b30:	08003b51 	.word	0x08003b51
 8003b34:	08003bf9 	.word	0x08003bf9
 8003b38:	08003bad 	.word	0x08003bad
 8003b3c:	08003be5 	.word	0x08003be5
 8003b40:	08003b51 	.word	0x08003b51
 8003b44:	08003b51 	.word	0x08003b51
 8003b48:	08003bf9 	.word	0x08003bf9
 8003b4c:	08003bad 	.word	0x08003bad
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	18d1      	adds	r1, r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b5e:	f7ff ff67 	bl	8003a30 <prvInsertTimerInActiveList>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d047      	beq.n	8003bf8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b6e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d13f      	bne.n	8003bf8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	441a      	add	r2, r3
 8003b80:	2300      	movs	r3, #0
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	2300      	movs	r3, #0
 8003b86:	2100      	movs	r1, #0
 8003b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b8a:	f7ff fe1f 	bl	80037cc <xTimerGenericCommand>
 8003b8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d130      	bne.n	8003bf8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	61bb      	str	r3, [r7, #24]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	617b      	str	r3, [r7, #20]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	699a      	ldr	r2, [r3, #24]
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	18d1      	adds	r1, r2, r3
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bde:	f7ff ff27 	bl	8003a30 <prvInsertTimerInActiveList>
					break;
 8003be2:	e009      	b.n	8003bf8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d104      	bne.n	8003bf8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bf0:	f000 fb68 	bl	80042c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003bf4:	e000      	b.n	8003bf8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8003bf6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bf8:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <prvProcessReceivedCommands+0x164>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	1d39      	adds	r1, r7, #4
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fc57 	bl	80024b4 <xQueueReceive>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f47f af57 	bne.w	8003abc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
 8003c12:	3730      	adds	r7, #48	; 0x30
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20001d78 	.word	0x20001d78

08003c1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c22:	e045      	b.n	8003cb0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c24:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <prvSwitchTimerLists+0xbc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <prvSwitchTimerLists+0xbc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe f939 	bl	8001eb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d12e      	bne.n	8003cb0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4413      	add	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d90e      	bls.n	8003c82 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <prvSwitchTimerLists+0xbc>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f7fe f8e2 	bl	8001e44 <vListInsert>
 8003c80:	e016      	b.n	8003cb0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c82:	2300      	movs	r3, #0
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2300      	movs	r3, #0
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff fd9d 	bl	80037cc <xTimerGenericCommand>
 8003c92:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	603b      	str	r3, [r7, #0]
}
 8003cac:	bf00      	nop
 8003cae:	e7fe      	b.n	8003cae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <prvSwitchTimerLists+0xbc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1b4      	bne.n	8003c24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <prvSwitchTimerLists+0xbc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <prvSwitchTimerLists+0xc0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <prvSwitchTimerLists+0xbc>)
 8003cc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <prvSwitchTimerLists+0xc0>)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	6013      	str	r3, [r2, #0]
}
 8003cce:	bf00      	nop
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20001d70 	.word	0x20001d70
 8003cdc:	20001d74 	.word	0x20001d74

08003ce0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003ce6:	f000 f929 	bl	8003f3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <prvCheckForValidListAndQueue+0x60>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d120      	bne.n	8003d34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003cf2:	4814      	ldr	r0, [pc, #80]	; (8003d44 <prvCheckForValidListAndQueue+0x64>)
 8003cf4:	f7fe f858 	bl	8001da8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003cf8:	4813      	ldr	r0, [pc, #76]	; (8003d48 <prvCheckForValidListAndQueue+0x68>)
 8003cfa:	f7fe f855 	bl	8001da8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <prvCheckForValidListAndQueue+0x6c>)
 8003d00:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <prvCheckForValidListAndQueue+0x64>)
 8003d02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d04:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <prvCheckForValidListAndQueue+0x70>)
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <prvCheckForValidListAndQueue+0x68>)
 8003d08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <prvCheckForValidListAndQueue+0x74>)
 8003d10:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <prvCheckForValidListAndQueue+0x78>)
 8003d12:	2110      	movs	r1, #16
 8003d14:	200a      	movs	r0, #10
 8003d16:	f7fe f95f 	bl	8001fd8 <xQueueGenericCreateStatic>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <prvCheckForValidListAndQueue+0x60>)
 8003d1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <prvCheckForValidListAndQueue+0x60>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <prvCheckForValidListAndQueue+0x60>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	490b      	ldr	r1, [pc, #44]	; (8003d5c <prvCheckForValidListAndQueue+0x7c>)
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fdb0 	bl	8002894 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d34:	f000 f932 	bl	8003f9c <vPortExitCritical>
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20001d78 	.word	0x20001d78
 8003d44:	20001d48 	.word	0x20001d48
 8003d48:	20001d5c 	.word	0x20001d5c
 8003d4c:	20001d70 	.word	0x20001d70
 8003d50:	20001d74 	.word	0x20001d74
 8003d54:	20001e24 	.word	0x20001e24
 8003d58:	20001d84 	.word	0x20001d84
 8003d5c:	08004630 	.word	0x08004630

08003d60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b04      	subs	r3, #4
 8003d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0201 	bic.w	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3b04      	subs	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d90:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <pxPortInitialiseStack+0x54>)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3b14      	subs	r3, #20
 8003d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3b20      	subs	r3, #32
 8003da6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003da8:	68fb      	ldr	r3, [r7, #12]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	08003db9 	.word	0x08003db9

08003db8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dc2:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <prvTaskExitError+0x54>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dca:	d00a      	beq.n	8003de2 <prvTaskExitError+0x2a>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60fb      	str	r3, [r7, #12]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <prvTaskExitError+0x28>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	60bb      	str	r3, [r7, #8]
}
 8003df4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003df6:	bf00      	nop
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0fc      	beq.n	8003df8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	2000000c 	.word	0x2000000c

08003e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e10:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <pxCurrentTCBConst2>)
 8003e12:	6819      	ldr	r1, [r3, #0]
 8003e14:	6808      	ldr	r0, [r1, #0]
 8003e16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e1a:	f380 8809 	msr	PSP, r0
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f380 8811 	msr	BASEPRI, r0
 8003e2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003e2e:	4770      	bx	lr

08003e30 <pxCurrentTCBConst2>:
 8003e30:	20001848 	.word	0x20001848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop

08003e38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003e38:	4806      	ldr	r0, [pc, #24]	; (8003e54 <prvPortStartFirstTask+0x1c>)
 8003e3a:	6800      	ldr	r0, [r0, #0]
 8003e3c:	6800      	ldr	r0, [r0, #0]
 8003e3e:	f380 8808 	msr	MSP, r0
 8003e42:	b662      	cpsie	i
 8003e44:	b661      	cpsie	f
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	df00      	svc	0
 8003e50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e52:	bf00      	nop
 8003e54:	e000ed08 	.word	0xe000ed08

08003e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e5e:	4b32      	ldr	r3, [pc, #200]	; (8003f28 <xPortStartScheduler+0xd0>)
 8003e60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	22ff      	movs	r2, #255	; 0xff
 8003e6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <xPortStartScheduler+0xd4>)
 8003e84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e86:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <xPortStartScheduler+0xd8>)
 8003e88:	2207      	movs	r2, #7
 8003e8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e8c:	e009      	b.n	8003ea2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003e8e:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <xPortStartScheduler+0xd8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	4a26      	ldr	r2, [pc, #152]	; (8003f30 <xPortStartScheduler+0xd8>)
 8003e96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b80      	cmp	r3, #128	; 0x80
 8003eac:	d0ef      	beq.n	8003e8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <xPortStartScheduler+0xd8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1c3 0307 	rsb	r3, r3, #7
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d00a      	beq.n	8003ed0 <xPortStartScheduler+0x78>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	60bb      	str	r3, [r7, #8]
}
 8003ecc:	bf00      	nop
 8003ece:	e7fe      	b.n	8003ece <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ed0:	4b17      	ldr	r3, [pc, #92]	; (8003f30 <xPortStartScheduler+0xd8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <xPortStartScheduler+0xd8>)
 8003ed8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <xPortStartScheduler+0xd8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ee2:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <xPortStartScheduler+0xd8>)
 8003ee4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003eee:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <xPortStartScheduler+0xdc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a10      	ldr	r2, [pc, #64]	; (8003f34 <xPortStartScheduler+0xdc>)
 8003ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003efa:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <xPortStartScheduler+0xdc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <xPortStartScheduler+0xdc>)
 8003f00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f06:	f000 f8b9 	bl	800407c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <xPortStartScheduler+0xe0>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f10:	f7ff ff92 	bl	8003e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f14:	f7ff f8c4 	bl	80030a0 <vTaskSwitchContext>
	prvTaskExitError();
 8003f18:	f7ff ff4e 	bl	8003db8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	e000e400 	.word	0xe000e400
 8003f2c:	20001e74 	.word	0x20001e74
 8003f30:	20001e78 	.word	0x20001e78
 8003f34:	e000ed20 	.word	0xe000ed20
 8003f38:	2000000c 	.word	0x2000000c

08003f3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	607b      	str	r3, [r7, #4]
}
 8003f54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f56:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <vPortEnterCritical+0x58>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	4a0d      	ldr	r2, [pc, #52]	; (8003f94 <vPortEnterCritical+0x58>)
 8003f5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <vPortEnterCritical+0x58>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d10f      	bne.n	8003f88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <vPortEnterCritical+0x5c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	603b      	str	r3, [r7, #0]
}
 8003f84:	bf00      	nop
 8003f86:	e7fe      	b.n	8003f86 <vPortEnterCritical+0x4a>
	}
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	2000000c 	.word	0x2000000c
 8003f98:	e000ed04 	.word	0xe000ed04

08003f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fa2:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <vPortExitCritical+0x4c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <vPortExitCritical+0x24>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	607b      	str	r3, [r7, #4]
}
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003fc0:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <vPortExitCritical+0x4c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <vPortExitCritical+0x4c>)
 8003fc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <vPortExitCritical+0x4c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <vPortExitCritical+0x42>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f383 8811 	msr	BASEPRI, r3
}
 8003fdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	00000000 	.word	0x00000000

08003ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ff0:	f3ef 8009 	mrs	r0, PSP
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <pxCurrentTCBConst>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004000:	6010      	str	r0, [r2, #0]
 8004002:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004006:	f04f 0050 	mov.w	r0, #80	; 0x50
 800400a:	f380 8811 	msr	BASEPRI, r0
 800400e:	f7ff f847 	bl	80030a0 <vTaskSwitchContext>
 8004012:	f04f 0000 	mov.w	r0, #0
 8004016:	f380 8811 	msr	BASEPRI, r0
 800401a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800401e:	6819      	ldr	r1, [r3, #0]
 8004020:	6808      	ldr	r0, [r1, #0]
 8004022:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004026:	f380 8809 	msr	PSP, r0
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	4770      	bx	lr

08004030 <pxCurrentTCBConst>:
 8004030:	20001848 	.word	0x20001848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop

08004038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	607b      	str	r3, [r7, #4]
}
 8004050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004052:	f7fe ff67 	bl	8002f24 <xTaskIncrementTick>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <SysTick_Handler+0x40>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	2300      	movs	r3, #0
 8004066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	f383 8811 	msr	BASEPRI, r3
}
 800406e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <vPortSetupTimerInterrupt+0x30>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <vPortSetupTimerInterrupt+0x34>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800408c:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <vPortSetupTimerInterrupt+0x38>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <vPortSetupTimerInterrupt+0x3c>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	4a08      	ldr	r2, [pc, #32]	; (80040bc <vPortSetupTimerInterrupt+0x40>)
 800409a:	3b01      	subs	r3, #1
 800409c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800409e:	4b03      	ldr	r3, [pc, #12]	; (80040ac <vPortSetupTimerInterrupt+0x30>)
 80040a0:	2207      	movs	r2, #7
 80040a2:	601a      	str	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	e000e010 	.word	0xe000e010
 80040b0:	e000e018 	.word	0xe000e018
 80040b4:	20000000 	.word	0x20000000
 80040b8:	10624dd3 	.word	0x10624dd3
 80040bc:	e000e014 	.word	0xe000e014

080040c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80040c6:	f3ef 8305 	mrs	r3, IPSR
 80040ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b0f      	cmp	r3, #15
 80040d0:	d914      	bls.n	80040fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040d2:	4a16      	ldr	r2, [pc, #88]	; (800412c <vPortValidateInterruptPriority+0x6c>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040dc:	4b14      	ldr	r3, [pc, #80]	; (8004130 <vPortValidateInterruptPriority+0x70>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	7afa      	ldrb	r2, [r7, #11]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d20a      	bcs.n	80040fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	607b      	str	r3, [r7, #4]
}
 80040f8:	bf00      	nop
 80040fa:	e7fe      	b.n	80040fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <vPortValidateInterruptPriority+0x74>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <vPortValidateInterruptPriority+0x78>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d90a      	bls.n	8004122 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	603b      	str	r3, [r7, #0]
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <vPortValidateInterruptPriority+0x60>
	}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	e000e3f0 	.word	0xe000e3f0
 8004130:	20001e74 	.word	0x20001e74
 8004134:	e000ed0c 	.word	0xe000ed0c
 8004138:	20001e78 	.word	0x20001e78

0800413c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004148:	f7fe fe32 	bl	8002db0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800414c:	4b58      	ldr	r3, [pc, #352]	; (80042b0 <pvPortMalloc+0x174>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004154:	f000 f910 	bl	8004378 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004158:	4b56      	ldr	r3, [pc, #344]	; (80042b4 <pvPortMalloc+0x178>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	f040 808e 	bne.w	8004282 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01d      	beq.n	80041a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800416c:	2208      	movs	r2, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	2b00      	cmp	r3, #0
 800417c:	d014      	beq.n	80041a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f023 0307 	bic.w	r3, r3, #7
 8004184:	3308      	adds	r3, #8
 8004186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <pvPortMalloc+0x6c>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	617b      	str	r3, [r7, #20]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d069      	beq.n	8004282 <pvPortMalloc+0x146>
 80041ae:	4b42      	ldr	r3, [pc, #264]	; (80042b8 <pvPortMalloc+0x17c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d864      	bhi.n	8004282 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041b8:	4b40      	ldr	r3, [pc, #256]	; (80042bc <pvPortMalloc+0x180>)
 80041ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041bc:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <pvPortMalloc+0x180>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041c2:	e004      	b.n	80041ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d903      	bls.n	80041e0 <pvPortMalloc+0xa4>
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f1      	bne.n	80041c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80041e0:	4b33      	ldr	r3, [pc, #204]	; (80042b0 <pvPortMalloc+0x174>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d04b      	beq.n	8004282 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2208      	movs	r2, #8
 80041f0:	4413      	add	r3, r2
 80041f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	2308      	movs	r3, #8
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	429a      	cmp	r2, r3
 800420a:	d91f      	bls.n	800424c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800420c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <pvPortMalloc+0xf8>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	613b      	str	r3, [r7, #16]
}
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1ad2      	subs	r2, r2, r3
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004246:	69b8      	ldr	r0, [r7, #24]
 8004248:	f000 f8f8 	bl	800443c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <pvPortMalloc+0x17c>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <pvPortMalloc+0x17c>)
 8004258:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800425a:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <pvPortMalloc+0x17c>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <pvPortMalloc+0x184>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d203      	bcs.n	800426e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004266:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <pvPortMalloc+0x17c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <pvPortMalloc+0x184>)
 800426c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <pvPortMalloc+0x178>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	431a      	orrs	r2, r3
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004282:	f7fe fda3 	bl	8002dcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <pvPortMalloc+0x16a>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	60fb      	str	r3, [r7, #12]
}
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <pvPortMalloc+0x168>
	return pvReturn;
 80042a6:	69fb      	ldr	r3, [r7, #28]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3728      	adds	r7, #40	; 0x28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20002a84 	.word	0x20002a84
 80042b4:	20002a90 	.word	0x20002a90
 80042b8:	20002a88 	.word	0x20002a88
 80042bc:	20002a7c 	.word	0x20002a7c
 80042c0:	20002a8c 	.word	0x20002a8c

080042c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d048      	beq.n	8004368 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042d6:	2308      	movs	r3, #8
 80042d8:	425b      	negs	r3, r3
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4413      	add	r3, r2
 80042de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <vPortFree+0xac>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <vPortFree+0x44>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	60fb      	str	r3, [r7, #12]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <vPortFree+0x62>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60bb      	str	r3, [r7, #8]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <vPortFree+0xac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4013      	ands	r3, r2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d019      	beq.n	8004368 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d115      	bne.n	8004368 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <vPortFree+0xac>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	43db      	mvns	r3, r3
 8004346:	401a      	ands	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800434c:	f7fe fd30 	bl	8002db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4b07      	ldr	r3, [pc, #28]	; (8004374 <vPortFree+0xb0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4413      	add	r3, r2
 800435a:	4a06      	ldr	r2, [pc, #24]	; (8004374 <vPortFree+0xb0>)
 800435c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800435e:	6938      	ldr	r0, [r7, #16]
 8004360:	f000 f86c 	bl	800443c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004364:	f7fe fd32 	bl	8002dcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004368:	bf00      	nop
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20002a90 	.word	0x20002a90
 8004374:	20002a88 	.word	0x20002a88

08004378 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800437e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004382:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <prvHeapInit+0xac>)
 8004386:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3307      	adds	r3, #7
 8004396:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0307 	bic.w	r3, r3, #7
 800439e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <prvHeapInit+0xac>)
 80043a8:	4413      	add	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043b0:	4a1d      	ldr	r2, [pc, #116]	; (8004428 <prvHeapInit+0xb0>)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <prvHeapInit+0xb0>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	4413      	add	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043c4:	2208      	movs	r2, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0307 	bic.w	r3, r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <prvHeapInit+0xb4>)
 80043d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <prvHeapInit+0xb4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <prvHeapInit+0xb4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <prvHeapInit+0xb4>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <prvHeapInit+0xb8>)
 8004406:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4a09      	ldr	r2, [pc, #36]	; (8004434 <prvHeapInit+0xbc>)
 800440e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <prvHeapInit+0xc0>)
 8004412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004416:	601a      	str	r2, [r3, #0]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20001e7c 	.word	0x20001e7c
 8004428:	20002a7c 	.word	0x20002a7c
 800442c:	20002a84 	.word	0x20002a84
 8004430:	20002a8c 	.word	0x20002a8c
 8004434:	20002a88 	.word	0x20002a88
 8004438:	20002a90 	.word	0x20002a90

0800443c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004444:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <prvInsertBlockIntoFreeList+0xa8>)
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e002      	b.n	8004450 <prvInsertBlockIntoFreeList+0x14>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d8f7      	bhi.n	800444a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	4413      	add	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	d108      	bne.n	800447e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	441a      	add	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	441a      	add	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d118      	bne.n	80044c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <prvInsertBlockIntoFreeList+0xac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d00d      	beq.n	80044ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	441a      	add	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e008      	b.n	80044cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <prvInsertBlockIntoFreeList+0xac>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e003      	b.n	80044cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d002      	beq.n	80044da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	20002a7c 	.word	0x20002a7c
 80044e8:	20002a84 	.word	0x20002a84

080044ec <memset>:
 80044ec:	4603      	mov	r3, r0
 80044ee:	4402      	add	r2, r0
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d100      	bne.n	80044f6 <memset+0xa>
 80044f4:	4770      	bx	lr
 80044f6:	f803 1b01 	strb.w	r1, [r3], #1
 80044fa:	e7f9      	b.n	80044f0 <memset+0x4>

080044fc <__libc_init_array>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	2600      	movs	r6, #0
 8004500:	4d0c      	ldr	r5, [pc, #48]	; (8004534 <__libc_init_array+0x38>)
 8004502:	4c0d      	ldr	r4, [pc, #52]	; (8004538 <__libc_init_array+0x3c>)
 8004504:	1b64      	subs	r4, r4, r5
 8004506:	10a4      	asrs	r4, r4, #2
 8004508:	42a6      	cmp	r6, r4
 800450a:	d109      	bne.n	8004520 <__libc_init_array+0x24>
 800450c:	f000 f828 	bl	8004560 <_init>
 8004510:	2600      	movs	r6, #0
 8004512:	4d0a      	ldr	r5, [pc, #40]	; (800453c <__libc_init_array+0x40>)
 8004514:	4c0a      	ldr	r4, [pc, #40]	; (8004540 <__libc_init_array+0x44>)
 8004516:	1b64      	subs	r4, r4, r5
 8004518:	10a4      	asrs	r4, r4, #2
 800451a:	42a6      	cmp	r6, r4
 800451c:	d105      	bne.n	800452a <__libc_init_array+0x2e>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	f855 3b04 	ldr.w	r3, [r5], #4
 8004524:	4798      	blx	r3
 8004526:	3601      	adds	r6, #1
 8004528:	e7ee      	b.n	8004508 <__libc_init_array+0xc>
 800452a:	f855 3b04 	ldr.w	r3, [r5], #4
 800452e:	4798      	blx	r3
 8004530:	3601      	adds	r6, #1
 8004532:	e7f2      	b.n	800451a <__libc_init_array+0x1e>
 8004534:	080047cc 	.word	0x080047cc
 8004538:	080047cc 	.word	0x080047cc
 800453c:	080047cc 	.word	0x080047cc
 8004540:	080047d0 	.word	0x080047d0

08004544 <memcpy>:
 8004544:	440a      	add	r2, r1
 8004546:	4291      	cmp	r1, r2
 8004548:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800454c:	d100      	bne.n	8004550 <memcpy+0xc>
 800454e:	4770      	bx	lr
 8004550:	b510      	push	{r4, lr}
 8004552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004556:	4291      	cmp	r1, r2
 8004558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800455c:	d1f9      	bne.n	8004552 <memcpy+0xe>
 800455e:	bd10      	pop	{r4, pc}

08004560 <_init>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	bf00      	nop
 8004564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004566:	bc08      	pop	{r3}
 8004568:	469e      	mov	lr, r3
 800456a:	4770      	bx	lr

0800456c <_fini>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	bf00      	nop
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr
