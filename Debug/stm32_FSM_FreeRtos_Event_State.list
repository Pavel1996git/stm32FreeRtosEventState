
stm32_FSM_FreeRtos_Event_State.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004ff8  08004ff8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ff8  08004ff8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003294  20000010  08005010  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200032a4  08005010  000232a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125ba  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b91  00000000  00000000  00032636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  000351c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d61  00000000  00000000  00036320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025d4  00000000  00000000  00037081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011810  00000000  00000000  00039655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091944  00000000  00000000  0004ae65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004868  00000000  00000000  000dc7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e1014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004cb0 	.word	0x08004cb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004cb0 	.word	0x08004cb0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b092      	sub	sp, #72	; 0x48
 8000154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fd4b 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f8e9 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f923 	bl	80003a8 <MX_GPIO_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000162:	f001 fe83 	bl	8001e6c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBlinkDelay */
  TimerBlinkDelayHandle = osTimerNew(CallbackTimerBlinkDelay, osTimerPeriodic, NULL, &TimerBlinkDelay_attributes);
 8000166:	4b46      	ldr	r3, [pc, #280]	; (8000280 <main+0x130>)
 8000168:	2200      	movs	r2, #0
 800016a:	2101      	movs	r1, #1
 800016c:	4845      	ldr	r0, [pc, #276]	; (8000284 <main+0x134>)
 800016e:	f001 ffd1 	bl	8002114 <osTimerNew>
 8000172:	4603      	mov	r3, r0
 8000174:	4a44      	ldr	r2, [pc, #272]	; (8000288 <main+0x138>)
 8000176:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue0 */
  myQueue0Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue0_attributes);
 8000178:	4a44      	ldr	r2, [pc, #272]	; (800028c <main+0x13c>)
 800017a:	2102      	movs	r1, #2
 800017c:	2004      	movs	r0, #4
 800017e:	f002 f84d 	bl	800221c <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a42      	ldr	r2, [pc, #264]	; (8000290 <main+0x140>)
 8000186:	6013      	str	r3, [r2, #0]

  /* creation of myQueue1 */
  myQueue1Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue1_attributes);
 8000188:	4a42      	ldr	r2, [pc, #264]	; (8000294 <main+0x144>)
 800018a:	2102      	movs	r1, #2
 800018c:	2004      	movs	r0, #4
 800018e:	f002 f845 	bl	800221c <osMessageQueueNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a40      	ldr	r2, [pc, #256]	; (8000298 <main+0x148>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of myQueue2 */
  myQueue2Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue2_attributes);
 8000198:	4a40      	ldr	r2, [pc, #256]	; (800029c <main+0x14c>)
 800019a:	2102      	movs	r1, #2
 800019c:	2004      	movs	r0, #4
 800019e:	f002 f83d 	bl	800221c <osMessageQueueNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a3e      	ldr	r2, [pc, #248]	; (80002a0 <main+0x150>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue3 */
  myQueue3Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue3_attributes);
 80001a8:	4a3e      	ldr	r2, [pc, #248]	; (80002a4 <main+0x154>)
 80001aa:	2102      	movs	r1, #2
 80001ac:	2004      	movs	r0, #4
 80001ae:	f002 f835 	bl	800221c <osMessageQueueNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a3c      	ldr	r2, [pc, #240]	; (80002a8 <main+0x158>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue4 */
  myQueue4Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue4_attributes);
 80001b8:	4a3c      	ldr	r2, [pc, #240]	; (80002ac <main+0x15c>)
 80001ba:	2102      	movs	r1, #2
 80001bc:	2004      	movs	r0, #4
 80001be:	f002 f82d 	bl	800221c <osMessageQueueNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a3a      	ldr	r2, [pc, #232]	; (80002b0 <main+0x160>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue5 */
  myQueue5Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue5_attributes);
 80001c8:	4a3a      	ldr	r2, [pc, #232]	; (80002b4 <main+0x164>)
 80001ca:	2102      	movs	r1, #2
 80001cc:	2004      	movs	r0, #4
 80001ce:	f002 f825 	bl	800221c <osMessageQueueNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a38      	ldr	r2, [pc, #224]	; (80002b8 <main+0x168>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue6 */
  myQueue6Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue6_attributes);
 80001d8:	4a38      	ldr	r2, [pc, #224]	; (80002bc <main+0x16c>)
 80001da:	2102      	movs	r1, #2
 80001dc:	2004      	movs	r0, #4
 80001de:	f002 f81d 	bl	800221c <osMessageQueueNew>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a36      	ldr	r2, [pc, #216]	; (80002c0 <main+0x170>)
 80001e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskBlinkLong */
  TaskBlinkLongHandle = osThreadNew(fTaskBlinkLong, NULL, &TaskBlinkLong_attributes);
 80001e8:	4a36      	ldr	r2, [pc, #216]	; (80002c4 <main+0x174>)
 80001ea:	2100      	movs	r1, #0
 80001ec:	4836      	ldr	r0, [pc, #216]	; (80002c8 <main+0x178>)
 80001ee:	f001 fea3 	bl	8001f38 <osThreadNew>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a35      	ldr	r2, [pc, #212]	; (80002cc <main+0x17c>)
 80001f6:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlinkShort */
  TaskBlinkShortHandle = osThreadNew(fTaskBlinkShort, NULL, &TaskBlinkShort_attributes);
 80001f8:	4a35      	ldr	r2, [pc, #212]	; (80002d0 <main+0x180>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4835      	ldr	r0, [pc, #212]	; (80002d4 <main+0x184>)
 80001fe:	f001 fe9b 	bl	8001f38 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a34      	ldr	r2, [pc, #208]	; (80002d8 <main+0x188>)
 8000206:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlinkReal */
  TaskBlinkRealHandle = osThreadNew(fTaskBlinkReal, NULL, &TaskBlinkReal_attributes);
 8000208:	4a34      	ldr	r2, [pc, #208]	; (80002dc <main+0x18c>)
 800020a:	2100      	movs	r1, #0
 800020c:	4834      	ldr	r0, [pc, #208]	; (80002e0 <main+0x190>)
 800020e:	f001 fe93 	bl	8001f38 <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a33      	ldr	r2, [pc, #204]	; (80002e4 <main+0x194>)
 8000216:	6013      	str	r3, [r2, #0]

  /* creation of TaskStateHandle */
  TaskStateHandleHandle = osThreadNew(fTaskStateHandler, NULL, &TaskStateHandle_attributes);
 8000218:	4a33      	ldr	r2, [pc, #204]	; (80002e8 <main+0x198>)
 800021a:	2100      	movs	r1, #0
 800021c:	4833      	ldr	r0, [pc, #204]	; (80002ec <main+0x19c>)
 800021e:	f001 fe8b 	bl	8001f38 <osThreadNew>
 8000222:	4603      	mov	r3, r0
 8000224:	4a32      	ldr	r2, [pc, #200]	; (80002f0 <main+0x1a0>)
 8000226:	6013      	str	r3, [r2, #0]

  /* creation of TaskExtEventHan */
  TaskExtEventHanHandle = osThreadNew(fTaskEventHandler, NULL, &TaskExtEventHan_attributes);
 8000228:	4a32      	ldr	r2, [pc, #200]	; (80002f4 <main+0x1a4>)
 800022a:	2100      	movs	r1, #0
 800022c:	4832      	ldr	r0, [pc, #200]	; (80002f8 <main+0x1a8>)
 800022e:	f001 fe83 	bl	8001f38 <osThreadNew>
 8000232:	4603      	mov	r3, r0
 8000234:	4a31      	ldr	r2, [pc, #196]	; (80002fc <main+0x1ac>)
 8000236:	6013      	str	r3, [r2, #0]

  /* creation of TaskStart */
  TaskStartHandle = osThreadNew(fTaskStart, NULL, &TaskStart_attributes);
 8000238:	4a31      	ldr	r2, [pc, #196]	; (8000300 <main+0x1b0>)
 800023a:	2100      	movs	r1, #0
 800023c:	4831      	ldr	r0, [pc, #196]	; (8000304 <main+0x1b4>)
 800023e:	f001 fe7b 	bl	8001f38 <osThreadNew>
 8000242:	4603      	mov	r3, r0
 8000244:	4a30      	ldr	r2, [pc, #192]	; (8000308 <main+0x1b8>)
 8000246:	6013      	str	r3, [r2, #0]

  /* creation of TaskTimerEvent */
  TaskTimerEventHandle = osThreadNew(fTaskTimerEvent, NULL, &TaskTimerEvent_attributes);
 8000248:	4a30      	ldr	r2, [pc, #192]	; (800030c <main+0x1bc>)
 800024a:	2100      	movs	r1, #0
 800024c:	4830      	ldr	r0, [pc, #192]	; (8000310 <main+0x1c0>)
 800024e:	f001 fe73 	bl	8001f38 <osThreadNew>
 8000252:	4603      	mov	r3, r0
 8000254:	4a2f      	ldr	r2, [pc, #188]	; (8000314 <main+0x1c4>)
 8000256:	6013      	str	r3, [r2, #0]

  /* creation of TaskStartFSM1 */
  TaskStartFSM1Handle = osThreadNew(fTaskStartFSM1, NULL, &TaskStartFSM1_attributes);
 8000258:	4a2f      	ldr	r2, [pc, #188]	; (8000318 <main+0x1c8>)
 800025a:	2100      	movs	r1, #0
 800025c:	482f      	ldr	r0, [pc, #188]	; (800031c <main+0x1cc>)
 800025e:	f001 fe6b 	bl	8001f38 <osThreadNew>
 8000262:	4603      	mov	r3, r0
 8000264:	4a2e      	ldr	r2, [pc, #184]	; (8000320 <main+0x1d0>)
 8000266:	6013      	str	r3, [r2, #0]

  /* creation of TaskStartFSM2 */
  TaskStartFSM2Handle = osThreadNew(fTaskStartFSM2, NULL, &TaskStartFSM2_attributes);
 8000268:	4a2e      	ldr	r2, [pc, #184]	; (8000324 <main+0x1d4>)
 800026a:	2100      	movs	r1, #0
 800026c:	482e      	ldr	r0, [pc, #184]	; (8000328 <main+0x1d8>)
 800026e:	f001 fe63 	bl	8001f38 <osThreadNew>
 8000272:	4603      	mov	r3, r0
 8000274:	4a2d      	ldr	r2, [pc, #180]	; (800032c <main+0x1dc>)
 8000276:	6013      	str	r3, [r2, #0]
  int8_t transitionTable[NUM_STATES][NUM_EVENTS];
  //initializeTransitionTable((int8_t **)transitionTable, NUM_STATES, NUM_EVENTS);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000278:	f001 fe2a 	bl	8001ed0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027c:	e7fe      	b.n	800027c <main+0x12c>
 800027e:	bf00      	nop
 8000280:	08004fbc 	.word	0x08004fbc
 8000284:	080009c1 	.word	0x080009c1
 8000288:	20001810 	.word	0x20001810
 800028c:	08004f14 	.word	0x08004f14
 8000290:	2000158c 	.word	0x2000158c
 8000294:	08004f2c 	.word	0x08004f2c
 8000298:	200015e8 	.word	0x200015e8
 800029c:	08004f44 	.word	0x08004f44
 80002a0:	20001644 	.word	0x20001644
 80002a4:	08004f5c 	.word	0x08004f5c
 80002a8:	200016a0 	.word	0x200016a0
 80002ac:	08004f74 	.word	0x08004f74
 80002b0:	200016fc 	.word	0x200016fc
 80002b4:	08004f8c 	.word	0x08004f8c
 80002b8:	20001758 	.word	0x20001758
 80002bc:	08004fa4 	.word	0x08004fa4
 80002c0:	200017b4 	.word	0x200017b4
 80002c4:	08004dd0 	.word	0x08004dd0
 80002c8:	08000715 	.word	0x08000715
 80002cc:	2000002c 	.word	0x2000002c
 80002d0:	08004df4 	.word	0x08004df4
 80002d4:	08000775 	.word	0x08000775
 80002d8:	2000028c 	.word	0x2000028c
 80002dc:	08004e18 	.word	0x08004e18
 80002e0:	080007d5 	.word	0x080007d5
 80002e4:	200004ec 	.word	0x200004ec
 80002e8:	08004e3c 	.word	0x08004e3c
 80002ec:	08000835 	.word	0x08000835
 80002f0:	2000074c 	.word	0x2000074c
 80002f4:	08004e60 	.word	0x08004e60
 80002f8:	08000845 	.word	0x08000845
 80002fc:	200009ac 	.word	0x200009ac
 8000300:	08004e84 	.word	0x08004e84
 8000304:	08000855 	.word	0x08000855
 8000308:	20000c0c 	.word	0x20000c0c
 800030c:	08004ea8 	.word	0x08004ea8
 8000310:	0800094d 	.word	0x0800094d
 8000314:	20000e6c 	.word	0x20000e6c
 8000318:	08004ecc 	.word	0x08004ecc
 800031c:	08000979 	.word	0x08000979
 8000320:	200010cc 	.word	0x200010cc
 8000324:	08004ef0 	.word	0x08004ef0
 8000328:	0800099d 	.word	0x0800099d
 800032c:	2000132c 	.word	0x2000132c

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b090      	sub	sp, #64	; 0x40
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0318 	add.w	r3, r7, #24
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f004 fc7c 	bl	8004c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000352:	2302      	movs	r3, #2
 8000354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035a:	2310      	movs	r3, #16
 800035c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035e:	2300      	movs	r3, #0
 8000360:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0318 	add.w	r3, r7, #24
 8000366:	4618      	mov	r0, r3
 8000368:	f000 ff0a 	bl	8001180 <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000372:	f000 fb41 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	230f      	movs	r3, #15
 8000378:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f001 f978 	bl	8001684 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800039a:	f000 fb2d 	bl	80009f8 <Error_Handler>
  }
}
 800039e:	bf00      	nop
 80003a0:	3740      	adds	r7, #64	; 0x40
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003bc:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a1d      	ldr	r2, [pc, #116]	; (8000438 <MX_GPIO_Init+0x90>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <MX_GPIO_Init+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a17      	ldr	r2, [pc, #92]	; (8000438 <MX_GPIO_Init+0x90>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <MX_GPIO_Init+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a11      	ldr	r2, [pc, #68]	; (8000438 <MX_GPIO_Init+0x90>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_GPIO_Init+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040a:	480c      	ldr	r0, [pc, #48]	; (800043c <MX_GPIO_Init+0x94>)
 800040c:	f000 fe86 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	4619      	mov	r1, r3
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <MX_GPIO_Init+0x94>)
 800042a:	f000 fcf3 	bl	8000e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800042e:	bf00      	nop
 8000430:	3720      	adds	r7, #32
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000
 800043c:	40011000 	.word	0x40011000

08000440 <initializeTransitionEvent>:

/* USER CODE BEGIN 4 */
void initializeTransitionEvent(int8_t **table, uint8_t num_states, uint8_t num_events) {
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	70fb      	strb	r3, [r7, #3]
 800044c:	4613      	mov	r3, r2
 800044e:	70bb      	strb	r3, [r7, #2]
    // Заполнение таблицы состояний значением -1
    for (uint8_t i = 0; i < num_states; ++i) {
 8000450:	2300      	movs	r3, #0
 8000452:	73fb      	strb	r3, [r7, #15]
 8000454:	e015      	b.n	8000482 <initializeTransitionEvent+0x42>
        for (uint8_t j = 0; j < num_events; ++j) {
 8000456:	2300      	movs	r3, #0
 8000458:	73bb      	strb	r3, [r7, #14]
 800045a:	e00b      	b.n	8000474 <initializeTransitionEvent+0x34>
            table[i][j] = -1;
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	4413      	add	r3, r2
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	7bbb      	ldrb	r3, [r7, #14]
 8000468:	4413      	add	r3, r2
 800046a:	22ff      	movs	r2, #255	; 0xff
 800046c:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < num_events; ++j) {
 800046e:	7bbb      	ldrb	r3, [r7, #14]
 8000470:	3301      	adds	r3, #1
 8000472:	73bb      	strb	r3, [r7, #14]
 8000474:	7bba      	ldrb	r2, [r7, #14]
 8000476:	78bb      	ldrb	r3, [r7, #2]
 8000478:	429a      	cmp	r2, r3
 800047a:	d3ef      	bcc.n	800045c <initializeTransitionEvent+0x1c>
    for (uint8_t i = 0; i < num_states; ++i) {
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3301      	adds	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	7bfa      	ldrb	r2, [r7, #15]
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	429a      	cmp	r2, r3
 8000488:	d3e5      	bcc.n	8000456 <initializeTransitionEvent+0x16>
        }
    }
}
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <initializeTransitionFork>:

void initializeTransitionFork(int8_t **table, uint8_t num_states, uint8_t num_new_states) {
 8000496:	b480      	push	{r7}
 8000498:	b085      	sub	sp, #20
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	460b      	mov	r3, r1
 80004a0:	70fb      	strb	r3, [r7, #3]
 80004a2:	4613      	mov	r3, r2
 80004a4:	70bb      	strb	r3, [r7, #2]
    // Заполнение таблицы состояний значением -1
    for (uint8_t i = 0; i < num_states; ++i) {
 80004a6:	2300      	movs	r3, #0
 80004a8:	73fb      	strb	r3, [r7, #15]
 80004aa:	e015      	b.n	80004d8 <initializeTransitionFork+0x42>
        for (uint8_t j = 0; j < num_new_states; ++j) {
 80004ac:	2300      	movs	r3, #0
 80004ae:	73bb      	strb	r3, [r7, #14]
 80004b0:	e00b      	b.n	80004ca <initializeTransitionFork+0x34>
            table[i][j] = -1;
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	7bbb      	ldrb	r3, [r7, #14]
 80004be:	4413      	add	r3, r2
 80004c0:	22ff      	movs	r2, #255	; 0xff
 80004c2:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < num_new_states; ++j) {
 80004c4:	7bbb      	ldrb	r3, [r7, #14]
 80004c6:	3301      	adds	r3, #1
 80004c8:	73bb      	strb	r3, [r7, #14]
 80004ca:	7bba      	ldrb	r2, [r7, #14]
 80004cc:	78bb      	ldrb	r3, [r7, #2]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d3ef      	bcc.n	80004b2 <initializeTransitionFork+0x1c>
    for (uint8_t i = 0; i < num_states; ++i) {
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	3301      	adds	r3, #1
 80004d6:	73fb      	strb	r3, [r7, #15]
 80004d8:	7bfa      	ldrb	r2, [r7, #15]
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d3e5      	bcc.n	80004ac <initializeTransitionFork+0x16>
        }
    }
}
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <initializeTransitionEndState>:

void initializeTransitionEndState(int8_t table[], uint8_t num_states) {
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]
    // Заполнение таблицы окончаний состояний значением -1
    for (uint8_t i = 0; i < num_states; ++i) {
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]
 80004fc:	e007      	b.n	800050e <initializeTransitionEndState+0x22>
        table[i] = -1;
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4413      	add	r3, r2
 8000504:	22ff      	movs	r2, #255	; 0xff
 8000506:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_states; ++i) {
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	3301      	adds	r3, #1
 800050c:	73fb      	strb	r3, [r7, #15]
 800050e:	7bfa      	ldrb	r2, [r7, #15]
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	429a      	cmp	r2, r3
 8000514:	d3f3      	bcc.n	80004fe <initializeTransitionEndState+0x12>
    }
}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
	...

08000524 <addToTransitionFork>:
void addToTransitionFork(State_t initial_state, State_t new_state) {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
    // Проверяем, что переданные состояния валидны
    if (initial_state >= NUM_STATES || new_state >= NUM_STATES) {
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b08      	cmp	r3, #8
 8000538:	d80d      	bhi.n	8000556 <addToTransitionFork+0x32>
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	2b08      	cmp	r3, #8
 800053e:	d80a      	bhi.n	8000556 <addToTransitionFork+0x32>
        // Выводим сообщение об ошибке или принимаем другие меры
        return;
    }

    // Заполняем массив transitionForkState
    transitionForkState[initial_state][new_state] = 1; // Здесь 1 может быть любым другим значением в зависимости от вашей логики
 8000540:	79fa      	ldrb	r2, [r7, #7]
 8000542:	79b9      	ldrb	r1, [r7, #6]
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <addToTransitionFork+0x3c>)
 8000546:	4613      	mov	r3, r2
 8000548:	00db      	lsls	r3, r3, #3
 800054a:	4413      	add	r3, r2
 800054c:	4403      	add	r3, r0
 800054e:	440b      	add	r3, r1
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e000      	b.n	8000558 <addToTransitionFork+0x34>
        return;
 8000556:	bf00      	nop
}
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	20001898 	.word	0x20001898

08000564 <addToTransitionEvent>:

void addToTransitionEvent(State_t initial_state, State_t new_state, Event_t event) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	460b      	mov	r3, r1
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	4613      	mov	r3, r2
 8000574:	717b      	strb	r3, [r7, #5]
    // Проверяем, что переданные состояния и событие валидны
    if (initial_state >= NUM_STATES || new_state >= NUM_STATES || event >= NUM_EVENTS) {
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b08      	cmp	r3, #8
 800057a:	d810      	bhi.n	800059e <addToTransitionEvent+0x3a>
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	2b08      	cmp	r3, #8
 8000580:	d80d      	bhi.n	800059e <addToTransitionEvent+0x3a>
 8000582:	797b      	ldrb	r3, [r7, #5]
 8000584:	2b07      	cmp	r3, #7
 8000586:	d80a      	bhi.n	800059e <addToTransitionEvent+0x3a>
        // Выводим сообщение об ошибке или принимаем другие меры
        return;
    }

    // Заполняем таблицу переходов
    transitionTable[initial_state][event] = new_state;
 8000588:	79fa      	ldrb	r2, [r7, #7]
 800058a:	797b      	ldrb	r3, [r7, #5]
 800058c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8000590:	4905      	ldr	r1, [pc, #20]	; (80005a8 <addToTransitionEvent+0x44>)
 8000592:	00d2      	lsls	r2, r2, #3
 8000594:	440a      	add	r2, r1
 8000596:	4413      	add	r3, r2
 8000598:	4602      	mov	r2, r0
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	e000      	b.n	80005a0 <addToTransitionEvent+0x3c>
        return;
 800059e:	bf00      	nop
}
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	20001844 	.word	0x20001844

080005ac <addToTransitionEndState>:



void addToTransitionEndState(State_t initial_state, State_t new_state)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	460a      	mov	r2, r1
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	71bb      	strb	r3, [r7, #6]
	// Проверяем, что переданные состояния и событие валидны
	    if (initial_state >= NUM_STATES || new_state >= NUM_STATES) {
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b08      	cmp	r3, #8
 80005c0:	d807      	bhi.n	80005d2 <addToTransitionEndState+0x26>
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	2b08      	cmp	r3, #8
 80005c6:	d804      	bhi.n	80005d2 <addToTransitionEndState+0x26>
	        // Выводим сообщение об ошибке или принимаем другие меры
	        return;
	    }
	    // Заполняем таблицу переходов
	    transitionEndState[NUM_STATES] = new_state;
 80005c8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <addToTransitionEndState+0x30>)
 80005ce:	725a      	strb	r2, [r3, #9]
 80005d0:	e000      	b.n	80005d4 <addToTransitionEndState+0x28>
	        return;
 80005d2:	bf00      	nop
}
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	2000188c 	.word	0x2000188c

080005e0 <createStateQueueMapping>:
    	return -1;
    }
}

// Функция для создания ассоциативного значения (связи) между состоянием и очередью
void createStateQueueMapping(State_t state, osMessageQueueId_t queueHandle) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
    //StateQueueMapping_t mapping = {state, queueHandle};
    stateQueueMappings[state] = queueHandle;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4904      	ldr	r1, [pc, #16]	; (8000600 <createStateQueueMapping+0x20>)
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	200018ec 	.word	0x200018ec

08000604 <getQueueForState>:

// Функция для получения очереди по состоянию
osMessageQueueId_t getQueueForState(State_t state) {
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
    return stateQueueMappings[state];
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <getQueueForState+0x1c>)
 8000612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	200018ec 	.word	0x200018ec

08000624 <MessageQueueState>:

void MessageQueueState(State_t state) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	xQueueSend(getQueueForState(state), &state, pdMS_TO_TICKS(DELAY_QUEUE));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffe7 	bl	8000604 <getQueueForState>
 8000636:	1df9      	adds	r1, r7, #7
 8000638:	2300      	movs	r3, #0
 800063a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800063e:	f002 f895 	bl	800276c <xQueueGenericSend>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <sendToTransitionFork>:

void sendToTransitionFork(State_t currentState) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
    // Проверяем, что текущее состояние валидно
    if (currentState >= NUM_STATES) {
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b08      	cmp	r3, #8
 800065a:	d819      	bhi.n	8000690 <sendToTransitionFork+0x44>
        // Выводим сообщение об ошибке или принимаем другие меры
        return;
    }

    // Проходим по всем возможным состояниям
    for (State_t new_state = 0; new_state < NUM_STATES; ++new_state) {
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e012      	b.n	8000688 <sendToTransitionFork+0x3c>
        // Проверяем, есть ли переход от текущего состояния к новому состоянию
        if (transitionForkState[currentState][new_state] == 1) {
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	7bf9      	ldrb	r1, [r7, #15]
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <sendToTransitionFork+0x4c>)
 8000668:	4613      	mov	r3, r2
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	4413      	add	r3, r2
 800066e:	4403      	add	r3, r0
 8000670:	440b      	add	r3, r1
 8000672:	f993 3000 	ldrsb.w	r3, [r3]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d103      	bne.n	8000682 <sendToTransitionFork+0x36>
            // Отправляем сообщение в очередь соответствующего нового состояния
        	MessageQueueState(new_state);
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ffd1 	bl	8000624 <MessageQueueState>
    for (State_t new_state = 0; new_state < NUM_STATES; ++new_state) {
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	3301      	adds	r3, #1
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	2b08      	cmp	r3, #8
 800068c:	d9e9      	bls.n	8000662 <sendToTransitionFork+0x16>
 800068e:	e000      	b.n	8000692 <sendToTransitionFork+0x46>
        return;
 8000690:	bf00      	nop
            //xQueueSend(getQueueForState(new_state), &new_state, pdMS_TO_TICKS(DELAY_QUEUE));
        }
    }
}
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20001898 	.word	0x20001898

0800069c <sendToTransitionEndState>:
void sendToTransitionEvent(State_t currentState, Event_t event)
{
	MessageQueueState(handleTransition(event, currentState));
}
void sendToTransitionEndState(State_t currentState)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	MessageQueueState(transitionEndState[currentState]);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <sendToTransitionEndState+0x20>)
 80006aa:	56d3      	ldrsb	r3, [r2, r3]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffb8 	bl	8000624 <MessageQueueState>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000188c 	.word	0x2000188c

080006c0 <waitForOwnState>:

void waitForOwnState(State_t currentState) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
    // Ожидаем получение текущего состояния из очереди
    xQueueReceive(getQueueForState(currentState), &currentState, portMAX_DELAY);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff99 	bl	8000604 <getQueueForState>
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006d8:	4619      	mov	r1, r3
 80006da:	f002 f9dd 	bl	8002a98 <xQueueReceive>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <waitForOwnEvent>:

void waitForOwnEvent(State_t currentState, Event_t event) {
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	4603      	mov	r3, r0
 80006ee:	460a      	mov	r2, r1
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	4613      	mov	r3, r2
 80006f4:	71bb      	strb	r3, [r7, #6]
    // Ожидаем получение текущего состояния из очереди
    xQueueReceive(getQueueForState(currentState), &event, portMAX_DELAY);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff83 	bl	8000604 <getQueueForState>
 80006fe:	1dbb      	adds	r3, r7, #6
 8000700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000704:	4619      	mov	r1, r3
 8000706:	f002 f9c7 	bl	8002a98 <xQueueReceive>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <fTaskBlinkLong>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fTaskBlinkLong */
void fTaskBlinkLong(void *argument)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	State_t currentState = TaskBlinkLong;
 800071c:	2300      	movs	r3, #0
 800071e:	75fb      	strb	r3, [r7, #23]
	const uint32_t xFrequency = 1000; // 1000 миллисекунд
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	613b      	str	r3, [r7, #16]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8000726:	f241 7370 	movw	r3, #6000	; 0x1770
 800072a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  waitForOwnState(currentState);
 800072c:	7dfb      	ldrb	r3, [r7, #23]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffc6 	bl	80006c0 <waitForOwnState>

	  TickType_t xLastWakeTime = xTaskGetTickCount();
 8000734:	f002 feda 	bl	80034ec <xTaskGetTickCount>
 8000738:	4603      	mov	r3, r0
 800073a:	60bb      	str	r3, [r7, #8]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 800073c:	e007      	b.n	800074e <fTaskBlinkLong+0x3a>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 800073e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000742:	480b      	ldr	r0, [pc, #44]	; (8000770 <fTaskBlinkLong+0x5c>)
 8000744:	f000 fd02 	bl	800114c <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8000748:	6938      	ldr	r0, [r7, #16]
 800074a:	f001 fc9f 	bl	800208c <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 800074e:	f002 fecd 	bl	80034ec <xTaskGetTickCount>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	429a      	cmp	r2, r3
 800075e:	d8ee      	bhi.n	800073e <fTaskBlinkLong+0x2a>
	  }
		sendToTransitionEndState(currentState);
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff9a 	bl	800069c <sendToTransitionEndState>
	    osDelay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f001 fc8f 	bl	800208c <osDelay>
  {
 800076e:	e7dd      	b.n	800072c <fTaskBlinkLong+0x18>
 8000770:	40011000 	.word	0x40011000

08000774 <fTaskBlinkShort>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskBlinkShort */
void fTaskBlinkShort(void *argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskBlinkShort */
	State_t currentState = TaskBlinkShort;
 800077c:	2301      	movs	r3, #1
 800077e:	75fb      	strb	r3, [r7, #23]
	const uint32_t xFrequency = 500; // 500 миллисекунд
 8000780:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000784:	613b      	str	r3, [r7, #16]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8000786:	f241 7370 	movw	r3, #6000	; 0x1770
 800078a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  waitForOwnState(currentState);
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff96 	bl	80006c0 <waitForOwnState>

	  TickType_t xLastWakeTime = xTaskGetTickCount();
 8000794:	f002 feaa 	bl	80034ec <xTaskGetTickCount>
 8000798:	4603      	mov	r3, r0
 800079a:	60bb      	str	r3, [r7, #8]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 800079c:	e007      	b.n	80007ae <fTaskBlinkShort+0x3a>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 800079e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a2:	480b      	ldr	r0, [pc, #44]	; (80007d0 <fTaskBlinkShort+0x5c>)
 80007a4:	f000 fcd2 	bl	800114c <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 80007a8:	6938      	ldr	r0, [r7, #16]
 80007aa:	f001 fc6f 	bl	800208c <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 80007ae:	f002 fe9d 	bl	80034ec <xTaskGetTickCount>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8ee      	bhi.n	800079e <fTaskBlinkShort+0x2a>
	  }
		sendToTransitionEndState(currentState);
 80007c0:	7dfb      	ldrb	r3, [r7, #23]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff6a 	bl	800069c <sendToTransitionEndState>
	    osDelay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f001 fc5f 	bl	800208c <osDelay>
  {
 80007ce:	e7dd      	b.n	800078c <fTaskBlinkShort+0x18>
 80007d0:	40011000 	.word	0x40011000

080007d4 <fTaskBlinkReal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskBlinkReal */
void fTaskBlinkReal(void *argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskBlinkReal */
	State_t currentState = TaskBlinkReal;
 80007dc:	2302      	movs	r3, #2
 80007de:	75fb      	strb	r3, [r7, #23]
	const uint32_t xFrequency = 100; // 100 миллисекунд
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	613b      	str	r3, [r7, #16]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(2000); // 6 секунд
 80007e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007e8:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  waitForOwnState(currentState);
 80007ea:	7dfb      	ldrb	r3, [r7, #23]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff67 	bl	80006c0 <waitForOwnState>

	  TickType_t xLastWakeTime = xTaskGetTickCount();
 80007f2:	f002 fe7b 	bl	80034ec <xTaskGetTickCount>
 80007f6:	4603      	mov	r3, r0
 80007f8:	60bb      	str	r3, [r7, #8]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 80007fa:	e007      	b.n	800080c <fTaskBlinkReal+0x38>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <fTaskBlinkReal+0x5c>)
 8000802:	f000 fca3 	bl	800114c <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8000806:	6938      	ldr	r0, [r7, #16]
 8000808:	f001 fc40 	bl	800208c <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 800080c:	f002 fe6e 	bl	80034ec <xTaskGetTickCount>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	429a      	cmp	r2, r3
 800081c:	d8ee      	bhi.n	80007fc <fTaskBlinkReal+0x28>
	  }
		sendToTransitionEndState(currentState);
 800081e:	7dfb      	ldrb	r3, [r7, #23]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff3b 	bl	800069c <sendToTransitionEndState>
	    osDelay(1);
 8000826:	2001      	movs	r0, #1
 8000828:	f001 fc30 	bl	800208c <osDelay>
  {
 800082c:	e7dd      	b.n	80007ea <fTaskBlinkReal+0x16>
 800082e:	bf00      	nop
 8000830:	40011000 	.word	0x40011000

08000834 <fTaskStateHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStateHandler */
void fTaskStateHandler(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStateHandler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f001 fc25 	bl	800208c <osDelay>
 8000842:	e7fb      	b.n	800083c <fTaskStateHandler+0x8>

08000844 <fTaskEventHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskEventHandler */
void fTaskEventHandler(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskEventHandler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f001 fc1d 	bl	800208c <osDelay>
 8000852:	e7fb      	b.n	800084c <fTaskEventHandler+0x8>

08000854 <fTaskStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStart */
void fTaskStart(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStart */
	initializeTransitionEvent((int8_t **)transitionTable, NUM_STATES, NUM_EVENTS);
 800085c:	2208      	movs	r2, #8
 800085e:	2109      	movs	r1, #9
 8000860:	4830      	ldr	r0, [pc, #192]	; (8000924 <fTaskStart+0xd0>)
 8000862:	f7ff fded 	bl	8000440 <initializeTransitionEvent>
	initializeTransitionEndState(transitionEndState, NUM_STATES);
 8000866:	2109      	movs	r1, #9
 8000868:	482f      	ldr	r0, [pc, #188]	; (8000928 <fTaskStart+0xd4>)
 800086a:	f7ff fe3f 	bl	80004ec <initializeTransitionEndState>
	initializeTransitionFork((int8_t **)transitionForkState, NUM_STATES, NUM_STATES);
 800086e:	2209      	movs	r2, #9
 8000870:	2109      	movs	r1, #9
 8000872:	482e      	ldr	r0, [pc, #184]	; (800092c <fTaskStart+0xd8>)
 8000874:	f7ff fe0f 	bl	8000496 <initializeTransitionFork>

	addToTransitionFork(TaskStart, TaskStartFSM1);
 8000878:	2107      	movs	r1, #7
 800087a:	2005      	movs	r0, #5
 800087c:	f7ff fe52 	bl	8000524 <addToTransitionFork>
	addToTransitionFork(TaskStart, TaskStartFSM2);
 8000880:	2108      	movs	r1, #8
 8000882:	2005      	movs	r0, #5
 8000884:	f7ff fe4e 	bl	8000524 <addToTransitionFork>

	addToTransitionEndState(TaskStartFSM1, TaskBlinkShort);
 8000888:	2101      	movs	r1, #1
 800088a:	2007      	movs	r0, #7
 800088c:	f7ff fe8e 	bl	80005ac <addToTransitionEndState>
	addToTransitionEndState(TaskBlinkShort, TaskBlinkLong);
 8000890:	2100      	movs	r1, #0
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff fe8a 	bl	80005ac <addToTransitionEndState>
	addToTransitionEndState(TaskStartFSM2, TaskTimerEvent);
 8000898:	2106      	movs	r1, #6
 800089a:	2008      	movs	r0, #8
 800089c:	f7ff fe86 	bl	80005ac <addToTransitionEndState>
	addToTransitionEndState(TaskBlinkReal, TaskTimerEvent);
 80008a0:	2106      	movs	r1, #6
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff fe82 	bl	80005ac <addToTransitionEndState>

	addToTransitionEvent(TaskTimerEvent, TaskBlinkReal, EVENT_TIMER_UPDATE);
 80008a8:	2206      	movs	r2, #6
 80008aa:	2102      	movs	r1, #2
 80008ac:	2006      	movs	r0, #6
 80008ae:	f7ff fe59 	bl	8000564 <addToTransitionEvent>

	createStateQueueMapping(TaskStart, myQueue0Handle);
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <fTaskStart+0xdc>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4619      	mov	r1, r3
 80008b8:	2005      	movs	r0, #5
 80008ba:	f7ff fe91 	bl	80005e0 <createStateQueueMapping>
	createStateQueueMapping(TaskStartFSM1, myQueue1Handle);
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <fTaskStart+0xe0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	2007      	movs	r0, #7
 80008c6:	f7ff fe8b 	bl	80005e0 <createStateQueueMapping>
	createStateQueueMapping(TaskStartFSM2, myQueue2Handle);
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <fTaskStart+0xe4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4619      	mov	r1, r3
 80008d0:	2008      	movs	r0, #8
 80008d2:	f7ff fe85 	bl	80005e0 <createStateQueueMapping>
	createStateQueueMapping(TaskBlinkShort, myQueue3Handle);
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <fTaskStart+0xe8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff fe7f 	bl	80005e0 <createStateQueueMapping>
	createStateQueueMapping(TaskBlinkLong, myQueue4Handle);
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <fTaskStart+0xec>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fe79 	bl	80005e0 <createStateQueueMapping>
	createStateQueueMapping(TaskBlinkReal, myQueue5Handle);
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <fTaskStart+0xf0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	2002      	movs	r0, #2
 80008f6:	f7ff fe73 	bl	80005e0 <createStateQueueMapping>
	createStateQueueMapping(TaskTimerEvent, myQueue6Handle);
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <fTaskStart+0xf4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	2006      	movs	r0, #6
 8000902:	f7ff fe6d 	bl	80005e0 <createStateQueueMapping>

	State_t currentState = TaskStart;
 8000906:	2305      	movs	r3, #5
 8000908:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	sendToTransitionFork(currentState);
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe9d 	bl	800064c <sendToTransitionFork>
	waitForOwnState(currentState);
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fed3 	bl	80006c0 <waitForOwnState>
	  osDelay(1);
 800091a:	2001      	movs	r0, #1
 800091c:	f001 fbb6 	bl	800208c <osDelay>
	sendToTransitionFork(currentState);
 8000920:	e7f3      	b.n	800090a <fTaskStart+0xb6>
 8000922:	bf00      	nop
 8000924:	20001844 	.word	0x20001844
 8000928:	2000188c 	.word	0x2000188c
 800092c:	20001898 	.word	0x20001898
 8000930:	2000158c 	.word	0x2000158c
 8000934:	200015e8 	.word	0x200015e8
 8000938:	20001644 	.word	0x20001644
 800093c:	200016a0 	.word	0x200016a0
 8000940:	200016fc 	.word	0x200016fc
 8000944:	20001758 	.word	0x20001758
 8000948:	200017b4 	.word	0x200017b4

0800094c <fTaskTimerEvent>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskTimerEvent */
void fTaskTimerEvent(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskTimerEvent */
	State_t currentState = TaskTimerEvent;
 8000954:	2306      	movs	r3, #6
 8000956:	73fb      	strb	r3, [r7, #15]
	Event_t event = NUM_EVENTS;
 8000958:	2308      	movs	r3, #8
 800095a:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	waitForOwnState(currentState);
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff feae 	bl	80006c0 <waitForOwnState>

	waitForOwnEvent(currentState, event);
 8000964:	7bba      	ldrb	r2, [r7, #14]
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff febb 	bl	80006e6 <waitForOwnEvent>
    osDelay(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f001 fb8b 	bl	800208c <osDelay>
	waitForOwnState(currentState);
 8000976:	e7f1      	b.n	800095c <fTaskTimerEvent+0x10>

08000978 <fTaskStartFSM1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStartFSM1 */
void fTaskStartFSM1(void *argument)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStartFSM1 */
	State_t currentState = TaskStartFSM1;
 8000980:	2307      	movs	r3, #7
 8000982:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	waitForOwnState(currentState);
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fe9a 	bl	80006c0 <waitForOwnState>

	sendToTransitionEndState(currentState);
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fe84 	bl	800069c <sendToTransitionEndState>
    osDelay(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f001 fb79 	bl	800208c <osDelay>
	waitForOwnState(currentState);
 800099a:	e7f3      	b.n	8000984 <fTaskStartFSM1+0xc>

0800099c <fTaskStartFSM2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStartFSM2 */
void fTaskStartFSM2(void *argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStartFSM2 */
	State_t currentState = TaskStartFSM2;
 80009a4:	2308      	movs	r3, #8
 80009a6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	waitForOwnState(currentState);
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fe88 	bl	80006c0 <waitForOwnState>

	sendToTransitionEndState(currentState);
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe72 	bl	800069c <sendToTransitionEndState>
    osDelay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f001 fb67 	bl	800208c <osDelay>
	waitForOwnState(currentState);
 80009be:	e7f3      	b.n	80009a8 <fTaskStartFSM2+0xc>

080009c0 <CallbackTimerBlinkDelay>:
  /* USER CODE END fTaskStartFSM2 */
}

/* CallbackTimerBlinkDelay function */
void CallbackTimerBlinkDelay(void *argument)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBlinkDelay */

  /* USER CODE END CallbackTimerBlinkDelay */
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
	...

080009d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e6:	f000 f919 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40012c00 	.word	0x40012c00

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_MspInit+0x68>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_MspInit+0x68>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_MspInit+0x68>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_MspInit+0x68>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <HAL_MspInit+0x68>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x68>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	f06f 0001 	mvn.w	r0, #1
 8000a42:	f000 f9bc 	bl	8000dbe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_MspInit+0x6c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_MspInit+0x6c>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010000 	.word	0x40010000

08000a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <HAL_InitTick+0xd0>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a2d      	ldr	r2, [pc, #180]	; (8000b44 <HAL_InitTick+0xd0>)
 8000a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <HAL_InitTick+0xd0>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 ff45 	bl	800193c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ab2:	f000 ff2f 	bl	8001914 <HAL_RCC_GetPCLK2Freq>
 8000ab6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <HAL_InitTick+0xd4>)
 8000abc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac0:	0c9b      	lsrs	r3, r3, #18
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <HAL_InitTick+0xd8>)
 8000ac8:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <HAL_InitTick+0xdc>)
 8000aca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <HAL_InitTick+0xd8>)
 8000ace:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <HAL_InitTick+0xd8>)
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_InitTick+0xd8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_InitTick+0xd8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_InitTick+0xd8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000aec:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_InitTick+0xd8>)
 8000aee:	f000 ff73 	bl	80019d8 <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000af8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d11b      	bne.n	8000b38 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b00:	4812      	ldr	r0, [pc, #72]	; (8000b4c <HAL_InitTick+0xd8>)
 8000b02:	f000 ffc1 	bl	8001a88 <HAL_TIM_Base_Start_IT>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d111      	bne.n	8000b38 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b14:	2019      	movs	r0, #25
 8000b16:	f000 f96e 	bl	8000df6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d808      	bhi.n	8000b32 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2019      	movs	r0, #25
 8000b26:	f000 f94a 	bl	8000dbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_InitTick+0xe0>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	e002      	b.n	8000b38 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3730      	adds	r7, #48	; 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000
 8000b48:	431bde83 	.word	0x431bde83
 8000b4c:	20001910 	.word	0x20001910
 8000b50:	40012c00 	.word	0x40012c00
 8000b54:	20000004 	.word	0x20000004

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
	...

08000b84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <TIM1_UP_IRQHandler+0x10>)
 8000b8a:	f000 ffcf 	bl	8001b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20001910 	.word	0x20001910

08000b98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba4:	f7ff fff8 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000baa:	490c      	ldr	r1, [pc, #48]	; (8000bdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bac:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bc0:	4c09      	ldr	r4, [pc, #36]	; (8000be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bce:	f004 f83d 	bl	8004c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd2:	f7ff fabd 	bl	8000150 <main>
  bx lr
 8000bd6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000be0:	08005000 	.word	0x08005000
  ldr r2, =_sbss
 8000be4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000be8:	200032a4 	.word	0x200032a4

08000bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_Init+0x28>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_Init+0x28>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 f8d1 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f7ff ff34 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0c:	f7ff fefa 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x1c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x20>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <HAL_IncTick+0x20>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20001958 	.word	0x20001958

08000c40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <HAL_GetTick+0x10>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20001958 	.word	0x20001958

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4906      	ldr	r1, [pc, #24]	; (8000cec <__NVIC_EnableIRQ+0x34>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff4f 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff64 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ffb2 	bl	8000d44 <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff81 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff57 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b08b      	sub	sp, #44	; 0x2c
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e169      	b.n	80010fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	f040 8158 	bne.w	80010f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	4a9a      	ldr	r2, [pc, #616]	; (80010b4 <HAL_GPIO_Init+0x2a0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d05e      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e50:	4a98      	ldr	r2, [pc, #608]	; (80010b4 <HAL_GPIO_Init+0x2a0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d875      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e56:	4a98      	ldr	r2, [pc, #608]	; (80010b8 <HAL_GPIO_Init+0x2a4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d058      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e5c:	4a96      	ldr	r2, [pc, #600]	; (80010b8 <HAL_GPIO_Init+0x2a4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d86f      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e62:	4a96      	ldr	r2, [pc, #600]	; (80010bc <HAL_GPIO_Init+0x2a8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d052      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e68:	4a94      	ldr	r2, [pc, #592]	; (80010bc <HAL_GPIO_Init+0x2a8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d869      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e6e:	4a94      	ldr	r2, [pc, #592]	; (80010c0 <HAL_GPIO_Init+0x2ac>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d04c      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e74:	4a92      	ldr	r2, [pc, #584]	; (80010c0 <HAL_GPIO_Init+0x2ac>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d863      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e7a:	4a92      	ldr	r2, [pc, #584]	; (80010c4 <HAL_GPIO_Init+0x2b0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d046      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e80:	4a90      	ldr	r2, [pc, #576]	; (80010c4 <HAL_GPIO_Init+0x2b0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d85d      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d82a      	bhi.n	8000ee0 <HAL_GPIO_Init+0xcc>
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d859      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e8e:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <HAL_GPIO_Init+0x80>)
 8000e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e94:	08000f0f 	.word	0x08000f0f
 8000e98:	08000ee9 	.word	0x08000ee9
 8000e9c:	08000efb 	.word	0x08000efb
 8000ea0:	08000f3d 	.word	0x08000f3d
 8000ea4:	08000f43 	.word	0x08000f43
 8000ea8:	08000f43 	.word	0x08000f43
 8000eac:	08000f43 	.word	0x08000f43
 8000eb0:	08000f43 	.word	0x08000f43
 8000eb4:	08000f43 	.word	0x08000f43
 8000eb8:	08000f43 	.word	0x08000f43
 8000ebc:	08000f43 	.word	0x08000f43
 8000ec0:	08000f43 	.word	0x08000f43
 8000ec4:	08000f43 	.word	0x08000f43
 8000ec8:	08000f43 	.word	0x08000f43
 8000ecc:	08000f43 	.word	0x08000f43
 8000ed0:	08000f43 	.word	0x08000f43
 8000ed4:	08000f43 	.word	0x08000f43
 8000ed8:	08000ef1 	.word	0x08000ef1
 8000edc:	08000f05 	.word	0x08000f05
 8000ee0:	4a79      	ldr	r2, [pc, #484]	; (80010c8 <HAL_GPIO_Init+0x2b4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ee6:	e02c      	b.n	8000f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e029      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e024      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	3308      	adds	r3, #8
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e01f      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	330c      	adds	r3, #12
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e01a      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f16:	2304      	movs	r3, #4
 8000f18:	623b      	str	r3, [r7, #32]
          break;
 8000f1a:	e013      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d105      	bne.n	8000f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f24:	2308      	movs	r3, #8
 8000f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	611a      	str	r2, [r3, #16]
          break;
 8000f2e:	e009      	b.n	8000f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f30:	2308      	movs	r3, #8
 8000f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	615a      	str	r2, [r3, #20]
          break;
 8000f3a:	e003      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
          break;
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          break;
 8000f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2bff      	cmp	r3, #255	; 0xff
 8000f48:	d801      	bhi.n	8000f4e <HAL_GPIO_Init+0x13a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	e001      	b.n	8000f52 <HAL_GPIO_Init+0x13e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3304      	adds	r3, #4
 8000f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2bff      	cmp	r3, #255	; 0xff
 8000f58:	d802      	bhi.n	8000f60 <HAL_GPIO_Init+0x14c>
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	e002      	b.n	8000f66 <HAL_GPIO_Init+0x152>
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	3b08      	subs	r3, #8
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	6a39      	ldr	r1, [r7, #32]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	431a      	orrs	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80b1 	beq.w	80010f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x2b8>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <HAL_GPIO_Init+0x2b8>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_GPIO_Init+0x2b8>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fac:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <HAL_GPIO_Init+0x2bc>)
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a40      	ldr	r2, [pc, #256]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d013      	beq.n	8001000 <HAL_GPIO_Init+0x1ec>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3f      	ldr	r2, [pc, #252]	; (80010d8 <HAL_GPIO_Init+0x2c4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d00d      	beq.n	8000ffc <HAL_GPIO_Init+0x1e8>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3e      	ldr	r2, [pc, #248]	; (80010dc <HAL_GPIO_Init+0x2c8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d007      	beq.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a3d      	ldr	r2, [pc, #244]	; (80010e0 <HAL_GPIO_Init+0x2cc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d101      	bne.n	8000ff4 <HAL_GPIO_Init+0x1e0>
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e004      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8001000:	2300      	movs	r3, #0
 8001002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001004:	f002 0203 	and.w	r2, r2, #3
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	4093      	lsls	r3, r2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001012:	492f      	ldr	r1, [pc, #188]	; (80010d0 <HAL_GPIO_Init+0x2bc>)
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	492c      	ldr	r1, [pc, #176]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	608b      	str	r3, [r1, #8]
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	43db      	mvns	r3, r3
 8001042:	4928      	ldr	r1, [pc, #160]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001044:	4013      	ands	r3, r2
 8001046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	4922      	ldr	r1, [pc, #136]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	60cb      	str	r3, [r1, #12]
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	43db      	mvns	r3, r3
 800106a:	491e      	ldr	r1, [pc, #120]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800106c:	4013      	ands	r3, r2
 800106e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4918      	ldr	r1, [pc, #96]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	43db      	mvns	r3, r3
 8001092:	4914      	ldr	r1, [pc, #80]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001094:	4013      	ands	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d021      	beq.n	80010e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	490e      	ldr	r1, [pc, #56]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]
 80010b0:	e021      	b.n	80010f6 <HAL_GPIO_Init+0x2e2>
 80010b2:	bf00      	nop
 80010b4:	10320000 	.word	0x10320000
 80010b8:	10310000 	.word	0x10310000
 80010bc:	10220000 	.word	0x10220000
 80010c0:	10210000 	.word	0x10210000
 80010c4:	10120000 	.word	0x10120000
 80010c8:	10110000 	.word	0x10110000
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	40010800 	.word	0x40010800
 80010d8:	40010c00 	.word	0x40010c00
 80010dc:	40011000 	.word	0x40011000
 80010e0:	40011400 	.word	0x40011400
 80010e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	4909      	ldr	r1, [pc, #36]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	3301      	adds	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	fa22 f303 	lsr.w	r3, r2, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	f47f ae8e 	bne.w	8000e28 <HAL_GPIO_Init+0x14>
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	372c      	adds	r7, #44	; 0x2c
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	611a      	str	r2, [r3, #16]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43d9      	mvns	r1, r3
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	400b      	ands	r3, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	611a      	str	r2, [r3, #16]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
	...

08001180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e272      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8087 	beq.w	80012ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a0:	4b92      	ldr	r3, [pc, #584]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d00c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ac:	4b8f      	ldr	r3, [pc, #572]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	d112      	bne.n	80011de <HAL_RCC_OscConfig+0x5e>
 80011b8:	4b8c      	ldr	r3, [pc, #560]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d10b      	bne.n	80011de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c6:	4b89      	ldr	r3, [pc, #548]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d06c      	beq.n	80012ac <HAL_RCC_OscConfig+0x12c>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d168      	bne.n	80012ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e24c      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x76>
 80011e8:	4b80      	ldr	r3, [pc, #512]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a7f      	ldr	r2, [pc, #508]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e02e      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x98>
 80011fe:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b78      	ldr	r3, [pc, #480]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a77      	ldr	r2, [pc, #476]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e01d      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0xbc>
 8001222:	4b72      	ldr	r3, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a71      	ldr	r2, [pc, #452]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b6f      	ldr	r3, [pc, #444]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a6e      	ldr	r2, [pc, #440]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 800123c:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a6a      	ldr	r2, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b68      	ldr	r3, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a67      	ldr	r2, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fcf0 	bl	8000c40 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fcec 	bl	8000c40 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e200      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0xe4>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fcdc 	bl	8000c40 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fcd8 	bl	8000c40 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e1ec      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x10c>
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d063      	beq.n	8001382 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ba:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d11c      	bne.n	800130c <HAL_RCC_OscConfig+0x18c>
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d116      	bne.n	800130c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_RCC_OscConfig+0x176>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e1c0      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4939      	ldr	r1, [pc, #228]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	e03a      	b.n	8001382 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d020      	beq.n	8001356 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fc91 	bl	8000c40 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fc8d 	bl	8000c40 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e1a1      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4927      	ldr	r1, [pc, #156]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
 8001354:	e015      	b.n	8001382 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fc70 	bl	8000c40 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fc6c 	bl	8000c40 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e180      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d03a      	beq.n	8001404 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d019      	beq.n	80013ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff fc50 	bl	8000c40 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc4c 	bl	8000c40 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e160      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f000 faea 	bl	800199c <RCC_Delay>
 80013c8:	e01c      	b.n	8001404 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff fc36 	bl	8000c40 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d6:	e00f      	b.n	80013f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc32 	bl	8000c40 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d908      	bls.n	80013f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e146      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	42420000 	.word	0x42420000
 80013f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	4b92      	ldr	r3, [pc, #584]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1e9      	bne.n	80013d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a6 	beq.w	800155e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001416:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10d      	bne.n	800143e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b88      	ldr	r3, [pc, #544]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a87      	ldr	r2, [pc, #540]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b85      	ldr	r3, [pc, #532]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <HAL_RCC_OscConfig+0x4c8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144a:	4b7f      	ldr	r3, [pc, #508]	; (8001648 <HAL_RCC_OscConfig+0x4c8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a7e      	ldr	r2, [pc, #504]	; (8001648 <HAL_RCC_OscConfig+0x4c8>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001456:	f7ff fbf3 	bl	8000c40 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145e:	f7ff fbef 	bl	8000c40 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e103      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b75      	ldr	r3, [pc, #468]	; (8001648 <HAL_RCC_OscConfig+0x4c8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x312>
 8001484:	4b6f      	ldr	r3, [pc, #444]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4a6e      	ldr	r2, [pc, #440]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6213      	str	r3, [r2, #32]
 8001490:	e02d      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x334>
 800149a:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a69      	ldr	r2, [pc, #420]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	4b67      	ldr	r3, [pc, #412]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a66      	ldr	r2, [pc, #408]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	6213      	str	r3, [r2, #32]
 80014b2:	e01c      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d10c      	bne.n	80014d6 <HAL_RCC_OscConfig+0x356>
 80014bc:	4b61      	ldr	r3, [pc, #388]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a60      	ldr	r2, [pc, #384]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	4b5e      	ldr	r3, [pc, #376]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4a5d      	ldr	r2, [pc, #372]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6213      	str	r3, [r2, #32]
 80014d4:	e00b      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 80014d6:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a5a      	ldr	r2, [pc, #360]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	4b58      	ldr	r3, [pc, #352]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a57      	ldr	r2, [pc, #348]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d015      	beq.n	8001522 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fba3 	bl	8000c40 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fb9f 	bl	8000c40 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e0b1      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0ee      	beq.n	80014fe <HAL_RCC_OscConfig+0x37e>
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff fb8d 	bl	8000c40 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff fb89 	bl	8000c40 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e09b      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	4b40      	ldr	r3, [pc, #256]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ee      	bne.n	800152a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d105      	bne.n	800155e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001552:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a3b      	ldr	r2, [pc, #236]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 8087 	beq.w	8001676 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d061      	beq.n	8001638 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d146      	bne.n	800160a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_RCC_OscConfig+0x4cc>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fb5d 	bl	8000c40 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fb59 	bl	8000c40 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e06d      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d108      	bne.n	80015c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	4921      	ldr	r1, [pc, #132]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a19      	ldr	r1, [r3, #32]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	430b      	orrs	r3, r1
 80015d6:	491b      	ldr	r1, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x4cc>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb2d 	bl	8000c40 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff fb29 	bl	8000c40 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e03d      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x46a>
 8001608:	e035      	b.n	8001676 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_RCC_OscConfig+0x4cc>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fb16 	bl	8000c40 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fb12 	bl	8000c40 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e026      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x498>
 8001636:	e01e      	b.n	8001676 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d107      	bne.n	8001650 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e019      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
 8001644:	40021000 	.word	0x40021000
 8001648:	40007000 	.word	0x40007000
 800164c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_OscConfig+0x500>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	429a      	cmp	r2, r3
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0d0      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d910      	bls.n	80016c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 0207 	bic.w	r2, r3, #7
 80016ae:	4965      	ldr	r1, [pc, #404]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b63      	ldr	r3, [pc, #396]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0b8      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4a58      	ldr	r2, [pc, #352]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001704:	4b50      	ldr	r3, [pc, #320]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	494d      	ldr	r1, [pc, #308]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d040      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d107      	bne.n	800173a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b47      	ldr	r3, [pc, #284]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d115      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e07f      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e073      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e06b      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4936      	ldr	r1, [pc, #216]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001774:	f7ff fa64 	bl	8000c40 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	e00a      	b.n	8001792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7ff fa60 	bl	8000c40 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e053      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 020c 	and.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1eb      	bne.n	800177c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a4:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d210      	bcs.n	80017d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 0207 	bic.w	r2, r3, #7
 80017ba:	4922      	ldr	r1, [pc, #136]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e032      	b.n	800183a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4916      	ldr	r1, [pc, #88]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	490e      	ldr	r1, [pc, #56]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001812:	f000 f821 	bl	8001858 <HAL_RCC_GetSysClockFreq>
 8001816:	4602      	mov	r2, r0
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	490a      	ldr	r1, [pc, #40]	; (800184c <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	5ccb      	ldrb	r3, [r1, r3]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <HAL_RCC_ClockConfig+0x1cc>)
 800182c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_RCC_ClockConfig+0x1d0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f91e 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40022000 	.word	0x40022000
 8001848:	40021000 	.word	0x40021000
 800184c:	08004fcc 	.word	0x08004fcc
 8001850:	20000000 	.word	0x20000000
 8001854:	20000004 	.word	0x20000004

08001858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_RCC_GetSysClockFreq+0x94>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b04      	cmp	r3, #4
 8001880:	d002      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x30>
 8001882:	2b08      	cmp	r3, #8
 8001884:	d003      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x36>
 8001886:	e027      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800188a:	613b      	str	r3, [r7, #16]
      break;
 800188c:	e027      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d010      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_RCC_GetSysClockFreq+0x94>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	0c5b      	lsrs	r3, r3, #17
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018b2:	5cd3      	ldrb	r3, [r2, r3]
 80018b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ba:	fb03 f202 	mul.w	r2, r3, r2
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e004      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	613b      	str	r3, [r7, #16]
      break;
 80018d6:	e002      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018da:	613b      	str	r3, [r7, #16]
      break;
 80018dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018de:	693b      	ldr	r3, [r7, #16]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	007a1200 	.word	0x007a1200
 80018f4:	08004fe4 	.word	0x08004fe4
 80018f8:	08004ff4 	.word	0x08004ff4
 80018fc:	003d0900 	.word	0x003d0900

08001900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001904:	4b02      	ldr	r3, [pc, #8]	; (8001910 <HAL_RCC_GetHCLKFreq+0x10>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	20000000 	.word	0x20000000

08001914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001918:	f7ff fff2 	bl	8001900 <HAL_RCC_GetHCLKFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	0adb      	lsrs	r3, r3, #11
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	4903      	ldr	r1, [pc, #12]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	08004fdc 	.word	0x08004fdc

0800193c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	220f      	movs	r2, #15
 800194a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_RCC_GetClockConfig+0x58>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0203 	and.w	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_RCC_GetClockConfig+0x58>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_GetClockConfig+0x58>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_RCC_GetClockConfig+0x58>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_RCC_GetClockConfig+0x5c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0207 	and.w	r2, r3, #7
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40021000 	.word	0x40021000
 8001998:	40022000 	.word	0x40022000

0800199c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <RCC_Delay+0x34>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <RCC_Delay+0x38>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0a5b      	lsrs	r3, r3, #9
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019b8:	bf00      	nop
  }
  while (Delay --);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e5a      	subs	r2, r3, #1
 80019be:	60fa      	str	r2, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f9      	bne.n	80019b8 <RCC_Delay+0x1c>
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000000 	.word	0x20000000
 80019d4:	10624dd3 	.word	0x10624dd3

080019d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e041      	b.n	8001a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f839 	bl	8001a76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2202      	movs	r2, #2
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3304      	adds	r3, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f000 f9b4 	bl	8001d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d001      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e03a      	b.n	8001b16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <HAL_TIM_Base_Start_IT+0x98>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00e      	beq.n	8001ae0 <HAL_TIM_Base_Start_IT+0x58>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aca:	d009      	beq.n	8001ae0 <HAL_TIM_Base_Start_IT+0x58>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d004      	beq.n	8001ae0 <HAL_TIM_Base_Start_IT+0x58>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <HAL_TIM_Base_Start_IT+0xa0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d111      	bne.n	8001b04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d010      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0201 	orr.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b02:	e007      	b.n	8001b14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40012c00 	.word	0x40012c00
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40000800 	.word	0x40000800

08001b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d122      	bne.n	8001b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d11b      	bne.n	8001b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0202 	mvn.w	r2, #2
 8001b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f8ed 	bl	8001d4e <HAL_TIM_IC_CaptureCallback>
 8001b74:	e005      	b.n	8001b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8e0 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f8ef 	bl	8001d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d122      	bne.n	8001bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d11b      	bne.n	8001bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f06f 0204 	mvn.w	r2, #4
 8001bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8c3 	bl	8001d4e <HAL_TIM_IC_CaptureCallback>
 8001bc8:	e005      	b.n	8001bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8b6 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f8c5 	bl	8001d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d122      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d11b      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0208 	mvn.w	r2, #8
 8001c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2204      	movs	r2, #4
 8001c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f899 	bl	8001d4e <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f88c 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f89b 	bl	8001d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	d122      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b10      	cmp	r3, #16
 8001c4a:	d11b      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0210 	mvn.w	r2, #16
 8001c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f86f 	bl	8001d4e <HAL_TIM_IC_CaptureCallback>
 8001c70:	e005      	b.n	8001c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f862 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f871 	bl	8001d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10e      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d107      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0201 	mvn.w	r2, #1
 8001ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fe92 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cba:	2b80      	cmp	r3, #128	; 0x80
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc8:	2b80      	cmp	r3, #128	; 0x80
 8001cca:	d107      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8bf 	bl	8001e5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce6:	2b40      	cmp	r3, #64	; 0x40
 8001ce8:	d10e      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf4:	2b40      	cmp	r3, #64	; 0x40
 8001cf6:	d107      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f835 	bl	8001d72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	d10e      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d107      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0220 	mvn.w	r2, #32
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f88a 	bl	8001e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a29      	ldr	r2, [pc, #164]	; (8001e3c <TIM_Base_SetConfig+0xb8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d00b      	beq.n	8001db4 <TIM_Base_SetConfig+0x30>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da2:	d007      	beq.n	8001db4 <TIM_Base_SetConfig+0x30>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <TIM_Base_SetConfig+0xbc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d003      	beq.n	8001db4 <TIM_Base_SetConfig+0x30>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <TIM_Base_SetConfig+0xc0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d108      	bne.n	8001dc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <TIM_Base_SetConfig+0xb8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00b      	beq.n	8001de6 <TIM_Base_SetConfig+0x62>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd4:	d007      	beq.n	8001de6 <TIM_Base_SetConfig+0x62>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <TIM_Base_SetConfig+0xbc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d003      	beq.n	8001de6 <TIM_Base_SetConfig+0x62>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <TIM_Base_SetConfig+0xc0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d108      	bne.n	8001df8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <TIM_Base_SetConfig+0xb8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d103      	bne.n	8001e2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	615a      	str	r2, [r3, #20]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40000800 	.word	0x40000800

08001e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e72:	f3ef 8305 	mrs	r3, IPSR
 8001e76:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e82:	607b      	str	r3, [r7, #4]
  return(result);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <osKernelInitialize+0x32>
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <osKernelInitialize+0x60>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d109      	bne.n	8001ea6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e92:	f3ef 8311 	mrs	r3, BASEPRI
 8001e96:	603b      	str	r3, [r7, #0]
  return(result);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001e9e:	f06f 0305 	mvn.w	r3, #5
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	e00c      	b.n	8001ec0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <osKernelInitialize+0x60>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <osKernelInitialize+0x60>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e002      	b.n	8001ec0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ebe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	2000195c 	.word	0x2000195c

08001ed0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ed6:	f3ef 8305 	mrs	r3, IPSR
 8001eda:	60bb      	str	r3, [r7, #8]
  return(result);
 8001edc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10f      	bne.n	8001f02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ee6:	607b      	str	r3, [r7, #4]
  return(result);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <osKernelStart+0x32>
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <osKernelStart+0x64>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d109      	bne.n	8001f0a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8001efa:	603b      	str	r3, [r7, #0]
  return(result);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001f02:	f06f 0305 	mvn.w	r3, #5
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e00e      	b.n	8001f28 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <osKernelStart+0x64>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <osKernelStart+0x64>)
 8001f14:	2202      	movs	r2, #2
 8001f16:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001f18:	f001 f9d6 	bl	80032c8 <vTaskStartScheduler>
      stat = osOK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e002      	b.n	8001f28 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001f28:	68fb      	ldr	r3, [r7, #12]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000195c 	.word	0x2000195c

08001f38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b092      	sub	sp, #72	; 0x48
 8001f3c:	af04      	add	r7, sp, #16
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f48:	f3ef 8305 	mrs	r3, IPSR
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f040 8094 	bne.w	800207e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f56:	f3ef 8310 	mrs	r3, PRIMASK
 8001f5a:	623b      	str	r3, [r7, #32]
  return(result);
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 808d 	bne.w	800207e <osThreadNew+0x146>
 8001f64:	4b48      	ldr	r3, [pc, #288]	; (8002088 <osThreadNew+0x150>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d106      	bne.n	8001f7a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8001f70:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 8082 	bne.w	800207e <osThreadNew+0x146>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d07e      	beq.n	800207e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001f84:	2318      	movs	r3, #24
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001f88:	2300      	movs	r3, #0
 8001f8a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001f8c:	f107 031b 	add.w	r3, r7, #27
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d045      	beq.n	800202a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <osThreadNew+0x74>
        name = attr->name;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <osThreadNew+0x9a>
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	2b38      	cmp	r3, #56	; 0x38
 8001fc4:	d805      	bhi.n	8001fd2 <osThreadNew+0x9a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <osThreadNew+0x9e>
        return (NULL);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e054      	b.n	8002080 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00e      	beq.n	800200c <osThreadNew+0xd4>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b5b      	cmp	r3, #91	; 0x5b
 8001ff4:	d90a      	bls.n	800200c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <osThreadNew+0xd4>
        mem = 1;
 8002006:	2301      	movs	r3, #1
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
 800200a:	e010      	b.n	800202e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10c      	bne.n	800202e <osThreadNew+0xf6>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d108      	bne.n	800202e <osThreadNew+0xf6>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d104      	bne.n	800202e <osThreadNew+0xf6>
          mem = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
 8002028:	e001      	b.n	800202e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	2b01      	cmp	r3, #1
 8002032:	d110      	bne.n	8002056 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800203c:	9202      	str	r2, [sp, #8]
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002048:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 ff70 	bl	8002f30 <xTaskCreateStatic>
 8002050:	4603      	mov	r3, r0
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e013      	b.n	800207e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d110      	bne.n	800207e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	b29a      	uxth	r2, r3
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 ffba 	bl	8002fe8 <xTaskCreate>
 8002074:	4603      	mov	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	d001      	beq.n	800207e <osThreadNew+0x146>
          hTask = NULL;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800207e:	697b      	ldr	r3, [r7, #20]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3738      	adds	r7, #56	; 0x38
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	2000195c 	.word	0x2000195c

0800208c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002094:	f3ef 8305 	mrs	r3, IPSR
 8002098:	613b      	str	r3, [r7, #16]
  return(result);
 800209a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10f      	bne.n	80020c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a0:	f3ef 8310 	mrs	r3, PRIMASK
 80020a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <osDelay+0x34>
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <osDelay+0x58>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d109      	bne.n	80020c8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020b4:	f3ef 8311 	mrs	r3, BASEPRI
 80020b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <osDelay+0x3c>
    stat = osErrorISR;
 80020c0:	f06f 0305 	mvn.w	r3, #5
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e007      	b.n	80020d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f001 f8c4 	bl	8003260 <vTaskDelay>
    }
  }

  return (stat);
 80020d8:	697b      	ldr	r3, [r7, #20]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000195c 	.word	0x2000195c

080020e8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f002 f9b7 	bl	8004464 <pvTimerGetTimerID>
 80020f6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <TimerCallback+0x22>
    callb->func (callb->arg);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	6852      	ldr	r2, [r2, #4]
 8002106:	4610      	mov	r0, r2
 8002108:	4798      	blx	r3
  }
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b08e      	sub	sp, #56	; 0x38
 8002118:	af02      	add	r7, sp, #8
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	460b      	mov	r3, r1
 8002122:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002128:	f3ef 8305 	mrs	r3, IPSR
 800212c:	61bb      	str	r3, [r7, #24]
  return(result);
 800212e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8002130:	2b00      	cmp	r3, #0
 8002132:	d16a      	bne.n	800220a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002134:	f3ef 8310 	mrs	r3, PRIMASK
 8002138:	617b      	str	r3, [r7, #20]
  return(result);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d164      	bne.n	800220a <osTimerNew+0xf6>
 8002140:	4b34      	ldr	r3, [pc, #208]	; (8002214 <osTimerNew+0x100>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d105      	bne.n	8002154 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002148:	f3ef 8311 	mrs	r3, BASEPRI
 800214c:	613b      	str	r3, [r7, #16]
  return(result);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d15a      	bne.n	800220a <osTimerNew+0xf6>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d057      	beq.n	800220a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800215a:	2008      	movs	r0, #8
 800215c:	f002 fb96 	bl	800488c <pvPortMalloc>
 8002160:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d050      	beq.n	800220a <osTimerNew+0xf6>
      callb->func = func;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002174:	7afb      	ldrb	r3, [r7, #11]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <osTimerNew+0x6c>
        reload = pdFALSE;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	e001      	b.n	8002184 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8002180:	2301      	movs	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002188:	623b      	str	r3, [r7, #32]
      name = NULL;
 800218a:	2300      	movs	r3, #0
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01c      	beq.n	80021ce <osTimerNew+0xba>
        if (attr->name != NULL) {
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <osTimerNew+0x8e>
          name = attr->name;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d006      	beq.n	80021b8 <osTimerNew+0xa4>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b2f      	cmp	r3, #47	; 0x2f
 80021b0:	d902      	bls.n	80021b8 <osTimerNew+0xa4>
          mem = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	623b      	str	r3, [r7, #32]
 80021b6:	e00c      	b.n	80021d2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d108      	bne.n	80021d2 <osTimerNew+0xbe>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d104      	bne.n	80021d2 <osTimerNew+0xbe>
            mem = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	e001      	b.n	80021d2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10c      	bne.n	80021f2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <osTimerNew+0x104>)
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e6:	2101      	movs	r1, #1
 80021e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021ea:	f001 fe02 	bl	8003df2 <xTimerCreateStatic>
 80021ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80021f0:	e00b      	b.n	800220a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d108      	bne.n	800220a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <osTimerNew+0x104>)
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	2101      	movs	r1, #1
 8002202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002204:	f001 fdd4 	bl	8003db0 <xTimerCreate>
 8002208:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800220c:	4618      	mov	r0, r3
 800220e:	3730      	adds	r7, #48	; 0x30
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000195c 	.word	0x2000195c
 8002218:	080020e9 	.word	0x080020e9

0800221c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b08c      	sub	sp, #48	; 0x30
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800222c:	f3ef 8305 	mrs	r3, IPSR
 8002230:	61bb      	str	r3, [r7, #24]
  return(result);
 8002232:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002234:	2b00      	cmp	r3, #0
 8002236:	d16f      	bne.n	8002318 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002238:	f3ef 8310 	mrs	r3, PRIMASK
 800223c:	617b      	str	r3, [r7, #20]
  return(result);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d169      	bne.n	8002318 <osMessageQueueNew+0xfc>
 8002244:	4b37      	ldr	r3, [pc, #220]	; (8002324 <osMessageQueueNew+0x108>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d105      	bne.n	8002258 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800224c:	f3ef 8311 	mrs	r3, BASEPRI
 8002250:	613b      	str	r3, [r7, #16]
  return(result);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d15f      	bne.n	8002318 <osMessageQueueNew+0xfc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d05c      	beq.n	8002318 <osMessageQueueNew+0xfc>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d059      	beq.n	8002318 <osMessageQueueNew+0xfc>
    mem = -1;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002268:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d029      	beq.n	80022c4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d012      	beq.n	800229e <osMessageQueueNew+0x82>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b4f      	cmp	r3, #79	; 0x4f
 800227e:	d90e      	bls.n	800229e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	429a      	cmp	r2, r3
 8002296:	d302      	bcc.n	800229e <osMessageQueueNew+0x82>
        mem = 1;
 8002298:	2301      	movs	r3, #1
 800229a:	623b      	str	r3, [r7, #32]
 800229c:	e014      	b.n	80022c8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d110      	bne.n	80022c8 <osMessageQueueNew+0xac>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <osMessageQueueNew+0xac>
          mem = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	e001      	b.n	80022c8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10b      	bne.n	80022e6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2100      	movs	r1, #0
 80022d8:	9100      	str	r1, [sp, #0]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f96d 	bl	80025bc <xQueueGenericCreateStatic>
 80022e2:	6278      	str	r0, [r7, #36]	; 0x24
 80022e4:	e008      	b.n	80022f8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80022ec:	2200      	movs	r2, #0
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f9da 	bl	80026aa <xQueueGenericCreate>
 80022f6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00c      	beq.n	8002318 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <osMessageQueueNew+0xf0>
        name = attr->name;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e001      	b.n	8002310 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002310:	69f9      	ldr	r1, [r7, #28]
 8002312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002314:	f000 fdb0 	bl	8002e78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800231a:	4618      	mov	r0, r3
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	2000195c 	.word	0x2000195c

08002328 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a06      	ldr	r2, [pc, #24]	; (8002350 <vApplicationGetIdleTaskMemory+0x28>)
 8002338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	4a05      	ldr	r2, [pc, #20]	; (8002354 <vApplicationGetIdleTaskMemory+0x2c>)
 800233e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	601a      	str	r2, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20001960 	.word	0x20001960
 8002354:	200019bc 	.word	0x200019bc

08002358 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <vApplicationGetTimerTaskMemory+0x2c>)
 8002368:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <vApplicationGetTimerTaskMemory+0x30>)
 800236e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002376:	601a      	str	r2, [r3, #0]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20001bbc 	.word	0x20001bbc
 8002388:	20001c18 	.word	0x20001c18

0800238c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f103 0208 	add.w	r2, r3, #8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f103 0208 	add.w	r2, r3, #8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f103 0208 	add.w	r2, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800243e:	d103      	bne.n	8002448 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e00c      	b.n	8002462 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3308      	adds	r3, #8
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e002      	b.n	8002456 <vListInsert+0x2e>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d2f6      	bcs.n	8002450 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	601a      	str	r2, [r3, #0]
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6892      	ldr	r2, [r2, #8]
 80024ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6852      	ldr	r2, [r2, #4]
 80024b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d103      	bne.n	80024cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	1e5a      	subs	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
	...

080024ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002516:	f002 f8b9 	bl	800468c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	441a      	add	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	3b01      	subs	r3, #1
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	441a      	add	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	22ff      	movs	r2, #255	; 0xff
 8002562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d114      	bne.n	8002596 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01a      	beq.n	80025aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3310      	adds	r3, #16
 8002578:	4618      	mov	r0, r3
 800257a:	f001 f92f 	bl	80037dc <xTaskRemoveFromEventList>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d012      	beq.n	80025aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <xQueueGenericReset+0xcc>)
 8002586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	e009      	b.n	80025aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3310      	adds	r3, #16
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fef6 	bl	800238c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3324      	adds	r3, #36	; 0x24
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fef1 	bl	800238c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025aa:	f002 f89f 	bl	80046ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	; 0x38
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025e2:	bf00      	nop
 80025e4:	e7fe      	b.n	80025e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025fe:	bf00      	nop
 8002600:	e7fe      	b.n	8002600 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <xQueueGenericCreateStatic+0x52>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <xQueueGenericCreateStatic+0x56>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <xQueueGenericCreateStatic+0x58>
 8002612:	2300      	movs	r3, #0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	623b      	str	r3, [r7, #32]
}
 800262a:	bf00      	nop
 800262c:	e7fe      	b.n	800262c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <xQueueGenericCreateStatic+0x7e>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <xQueueGenericCreateStatic+0x82>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xQueueGenericCreateStatic+0x84>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	61fb      	str	r3, [r7, #28]
}
 8002656:	bf00      	nop
 8002658:	e7fe      	b.n	8002658 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800265a:	2350      	movs	r3, #80	; 0x50
 800265c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b50      	cmp	r3, #80	; 0x50
 8002662:	d00a      	beq.n	800267a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	61bb      	str	r3, [r7, #24]
}
 8002676:	bf00      	nop
 8002678:	e7fe      	b.n	8002678 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00d      	beq.n	80026a0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800268c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f843 	bl	8002726 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3730      	adds	r7, #48	; 0x30
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b08a      	sub	sp, #40	; 0x28
 80026ae:	af02      	add	r7, sp, #8
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	4613      	mov	r3, r2
 80026b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	613b      	str	r3, [r7, #16]
}
 80026d0:	bf00      	nop
 80026d2:	e7fe      	b.n	80026d2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	e004      	b.n	80026ea <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3350      	adds	r3, #80	; 0x50
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 f8cc 	bl	800488c <pvPortMalloc>
 80026f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00f      	beq.n	800271c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	3350      	adds	r3, #80	; 0x50
 8002700:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800270a:	79fa      	ldrb	r2, [r7, #7]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f805 	bl	8002726 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800271c:	69bb      	ldr	r3, [r7, #24]
	}
 800271e:	4618      	mov	r0, r3
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e002      	b.n	8002748 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002754:	2101      	movs	r1, #1
 8002756:	69b8      	ldr	r0, [r7, #24]
 8002758:	f7ff fec8 	bl	80024ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	; 0x38
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <xQueueGenericSend+0x32>
	__asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800279a:	bf00      	nop
 800279c:	e7fe      	b.n	800279c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <xQueueGenericSend+0x40>
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <xQueueGenericSend+0x44>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <xQueueGenericSend+0x46>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <xQueueGenericSend+0x60>
	__asm volatile
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027c8:	bf00      	nop
 80027ca:	e7fe      	b.n	80027ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d103      	bne.n	80027da <xQueueGenericSend+0x6e>
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <xQueueGenericSend+0x72>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <xQueueGenericSend+0x74>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xQueueGenericSend+0x8e>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	623b      	str	r3, [r7, #32]
}
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027fa:	f001 f9b1 	bl	8003b60 <xTaskGetSchedulerState>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <xQueueGenericSend+0x9e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <xQueueGenericSend+0xa2>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <xQueueGenericSend+0xa4>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <xQueueGenericSend+0xbe>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	61fb      	str	r3, [r7, #28]
}
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800282a:	f001 ff2f 	bl	800468c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <xQueueGenericSend+0xd4>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d129      	bne.n	8002894 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002846:	f000 fa07 	bl	8002c58 <prvCopyDataToQueue>
 800284a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2b00      	cmp	r3, #0
 8002852:	d010      	beq.n	8002876 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	3324      	adds	r3, #36	; 0x24
 8002858:	4618      	mov	r0, r3
 800285a:	f000 ffbf 	bl	80037dc <xTaskRemoveFromEventList>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002864:	4b3f      	ldr	r3, [pc, #252]	; (8002964 <xQueueGenericSend+0x1f8>)
 8002866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	e00a      	b.n	800288c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800287c:	4b39      	ldr	r3, [pc, #228]	; (8002964 <xQueueGenericSend+0x1f8>)
 800287e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800288c:	f001 ff2e 	bl	80046ec <vPortExitCritical>
				return pdPASS;
 8002890:	2301      	movs	r3, #1
 8002892:	e063      	b.n	800295c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800289a:	f001 ff27 	bl	80046ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	e05c      	b.n	800295c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fff9 	bl	80038a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028b2:	2301      	movs	r3, #1
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028b6:	f001 ff19 	bl	80046ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028ba:	f000 fd6b 	bl	8003394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028be:	f001 fee5 	bl	800468c <vPortEnterCritical>
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028c8:	b25b      	sxtb	r3, r3
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ce:	d103      	bne.n	80028d8 <xQueueGenericSend+0x16c>
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028de:	b25b      	sxtb	r3, r3
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028e4:	d103      	bne.n	80028ee <xQueueGenericSend+0x182>
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028ee:	f001 fefd 	bl	80046ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028f2:	1d3a      	adds	r2, r7, #4
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 ffe8 	bl	80038d0 <xTaskCheckForTimeOut>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d124      	bne.n	8002950 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002908:	f000 fa9e 	bl	8002e48 <prvIsQueueFull>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d018      	beq.n	8002944 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	3310      	adds	r3, #16
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f000 ff0e 	bl	800373c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002922:	f000 fa29 	bl	8002d78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002926:	f000 fd43 	bl	80033b0 <xTaskResumeAll>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	f47f af7c 	bne.w	800282a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <xQueueGenericSend+0x1f8>)
 8002934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	e772      	b.n	800282a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002946:	f000 fa17 	bl	8002d78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800294a:	f000 fd31 	bl	80033b0 <xTaskResumeAll>
 800294e:	e76c      	b.n	800282a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002952:	f000 fa11 	bl	8002d78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002956:	f000 fd2b 	bl	80033b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800295a:	2300      	movs	r3, #0
		}
	}
}
 800295c:	4618      	mov	r0, r3
 800295e:	3738      	adds	r7, #56	; 0x38
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	e000ed04 	.word	0xe000ed04

08002968 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08e      	sub	sp, #56	; 0x38
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d103      	bne.n	80029a4 <xQueueGenericSendFromISR+0x3c>
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <xQueueGenericSendFromISR+0x40>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <xQueueGenericSendFromISR+0x42>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	623b      	str	r3, [r7, #32]
}
 80029c0:	bf00      	nop
 80029c2:	e7fe      	b.n	80029c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d103      	bne.n	80029d2 <xQueueGenericSendFromISR+0x6a>
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <xQueueGenericSendFromISR+0x6e>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <xQueueGenericSendFromISR+0x70>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	61fb      	str	r3, [r7, #28]
}
 80029ee:	bf00      	nop
 80029f0:	e7fe      	b.n	80029f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029f2:	f001 ff0d 	bl	8004810 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029f6:	f3ef 8211 	mrs	r2, BASEPRI
 80029fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	61ba      	str	r2, [r7, #24]
 8002a0c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a0e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <xQueueGenericSendFromISR+0xbc>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d12c      	bne.n	8002a7e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a34:	f000 f910 	bl	8002c58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a38:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a40:	d112      	bne.n	8002a68 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d016      	beq.n	8002a78 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	3324      	adds	r3, #36	; 0x24
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fec4 	bl	80037dc <xTaskRemoveFromEventList>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00e      	beq.n	8002a78 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e007      	b.n	8002a78 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	b25a      	sxtb	r2, r3
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002a7c:	e001      	b.n	8002a82 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3738      	adds	r7, #56	; 0x38
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08c      	sub	sp, #48	; 0x30
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <xQueueReceive+0x30>
	__asm volatile
 8002ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	623b      	str	r3, [r7, #32]
}
 8002ac4:	bf00      	nop
 8002ac6:	e7fe      	b.n	8002ac6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <xQueueReceive+0x3e>
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <xQueueReceive+0x42>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <xQueueReceive+0x44>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <xQueueReceive+0x5e>
	__asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	61fb      	str	r3, [r7, #28]
}
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002af6:	f001 f833 	bl	8003b60 <xTaskGetSchedulerState>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <xQueueReceive+0x6e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <xQueueReceive+0x72>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <xQueueReceive+0x74>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <xQueueReceive+0x8e>
	__asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	61bb      	str	r3, [r7, #24]
}
 8002b22:	bf00      	nop
 8002b24:	e7fe      	b.n	8002b24 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b26:	f001 fdb1 	bl	800468c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01f      	beq.n	8002b76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b3a:	f000 f8f7 	bl	8002d2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	1e5a      	subs	r2, r3, #1
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00f      	beq.n	8002b6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	3310      	adds	r3, #16
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fe42 	bl	80037dc <xTaskRemoveFromEventList>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <xQueueReceive+0x1bc>)
 8002b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b6e:	f001 fdbd 	bl	80046ec <vPortExitCritical>
				return pdPASS;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e069      	b.n	8002c4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b7c:	f001 fdb6 	bl	80046ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e062      	b.n	8002c4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b8a:	f107 0310 	add.w	r3, r7, #16
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fe88 	bl	80038a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b94:	2301      	movs	r3, #1
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b98:	f001 fda8 	bl	80046ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b9c:	f000 fbfa 	bl	8003394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ba0:	f001 fd74 	bl	800468c <vPortEnterCritical>
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002baa:	b25b      	sxtb	r3, r3
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb0:	d103      	bne.n	8002bba <xQueueReceive+0x122>
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bc6:	d103      	bne.n	8002bd0 <xQueueReceive+0x138>
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd0:	f001 fd8c 	bl	80046ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bd4:	1d3a      	adds	r2, r7, #4
 8002bd6:	f107 0310 	add.w	r3, r7, #16
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fe77 	bl	80038d0 <xTaskCheckForTimeOut>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d123      	bne.n	8002c30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bea:	f000 f917 	bl	8002e1c <prvIsQueueEmpty>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d017      	beq.n	8002c24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	3324      	adds	r3, #36	; 0x24
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fd9d 	bl	800373c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c04:	f000 f8b8 	bl	8002d78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c08:	f000 fbd2 	bl	80033b0 <xTaskResumeAll>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d189      	bne.n	8002b26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <xQueueReceive+0x1bc>)
 8002c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	e780      	b.n	8002b26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c26:	f000 f8a7 	bl	8002d78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c2a:	f000 fbc1 	bl	80033b0 <xTaskResumeAll>
 8002c2e:	e77a      	b.n	8002b26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c32:	f000 f8a1 	bl	8002d78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c36:	f000 fbbb 	bl	80033b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c3c:	f000 f8ee 	bl	8002e1c <prvIsQueueEmpty>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f43f af6f 	beq.w	8002b26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3730      	adds	r7, #48	; 0x30
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000ed04 	.word	0xe000ed04

08002c58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d14d      	bne.n	8002d1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 ff8a 	bl	8003b9c <xTaskPriorityDisinherit>
 8002c88:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	e043      	b.n	8002d1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d119      	bne.n	8002ccc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6898      	ldr	r0, [r3, #8]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	f001 fff6 	bl	8004c94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	441a      	add	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d32b      	bcc.n	8002d1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	e026      	b.n	8002d1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68d8      	ldr	r0, [r3, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	f001 ffdc 	bl	8004c94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	425b      	negs	r3, r3
 8002ce6:	441a      	add	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d207      	bcs.n	8002d08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	425b      	negs	r3, r3
 8002d02:	441a      	add	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d105      	bne.n	8002d1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d22:	697b      	ldr	r3, [r7, #20]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d018      	beq.n	8002d70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d303      	bcc.n	8002d60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68d9      	ldr	r1, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6838      	ldr	r0, [r7, #0]
 8002d6c:	f001 ff92 	bl	8004c94 <memcpy>
	}
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d80:	f001 fc84 	bl	800468c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d8c:	e011      	b.n	8002db2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d012      	beq.n	8002dbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3324      	adds	r3, #36	; 0x24
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fd1e 	bl	80037dc <xTaskRemoveFromEventList>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002da6:	f000 fdf5 	bl	8003994 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	dce9      	bgt.n	8002d8e <prvUnlockQueue+0x16>
 8002dba:	e000      	b.n	8002dbe <prvUnlockQueue+0x46>
					break;
 8002dbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002dc6:	f001 fc91 	bl	80046ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002dca:	f001 fc5f 	bl	800468c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dd6:	e011      	b.n	8002dfc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d012      	beq.n	8002e06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3310      	adds	r3, #16
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fcf9 	bl	80037dc <xTaskRemoveFromEventList>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002df0:	f000 fdd0 	bl	8003994 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002df4:	7bbb      	ldrb	r3, [r7, #14]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	dce9      	bgt.n	8002dd8 <prvUnlockQueue+0x60>
 8002e04:	e000      	b.n	8002e08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	22ff      	movs	r2, #255	; 0xff
 8002e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e10:	f001 fc6c 	bl	80046ec <vPortExitCritical>
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e24:	f001 fc32 	bl	800468c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e30:	2301      	movs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e001      	b.n	8002e3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e3a:	f001 fc57 	bl	80046ec <vPortExitCritical>

	return xReturn;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e50:	f001 fc1c 	bl	800468c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d102      	bne.n	8002e66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e60:	2301      	movs	r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e001      	b.n	8002e6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e6a:	f001 fc3f 	bl	80046ec <vPortExitCritical>

	return xReturn;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	e014      	b.n	8002eb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e88:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <vQueueAddToRegistry+0x4c>)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e94:	490b      	ldr	r1, [pc, #44]	; (8002ec4 <vQueueAddToRegistry+0x4c>)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <vQueueAddToRegistry+0x4c>)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002eaa:	e006      	b.n	8002eba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b07      	cmp	r3, #7
 8002eb6:	d9e7      	bls.n	8002e88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	20002018 	.word	0x20002018

08002ec8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ed8:	f001 fbd8 	bl	800468c <vPortEnterCritical>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee8:	d103      	bne.n	8002ef2 <vQueueWaitForMessageRestricted+0x2a>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002efe:	d103      	bne.n	8002f08 <vQueueWaitForMessageRestricted+0x40>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f08:	f001 fbf0 	bl	80046ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3324      	adds	r3, #36	; 0x24
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fc31 	bl	8003784 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f7ff ff28 	bl	8002d78 <prvUnlockQueue>
	}
 8002f28:	bf00      	nop
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08e      	sub	sp, #56	; 0x38
 8002f34:	af04      	add	r7, sp, #16
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	623b      	str	r3, [r7, #32]
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <xTaskCreateStatic+0x46>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	61fb      	str	r3, [r7, #28]
}
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f76:	235c      	movs	r3, #92	; 0x5c
 8002f78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b5c      	cmp	r3, #92	; 0x5c
 8002f7e:	d00a      	beq.n	8002f96 <xTaskCreateStatic+0x66>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	61bb      	str	r3, [r7, #24]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01e      	beq.n	8002fda <xTaskCreateStatic+0xaa>
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01b      	beq.n	8002fda <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9303      	str	r3, [sp, #12]
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	9302      	str	r3, [sp, #8]
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f850 	bl	8003072 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fd4:	f000 f8d4 	bl	8003180 <prvAddNewTaskToReadyList>
 8002fd8:	e001      	b.n	8002fde <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fde:	697b      	ldr	r3, [r7, #20]
	}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af04      	add	r7, sp, #16
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 fc45 	bl	800488c <pvPortMalloc>
 8003002:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800300a:	205c      	movs	r0, #92	; 0x5c
 800300c:	f001 fc3e 	bl	800488c <pvPortMalloc>
 8003010:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
 800301e:	e005      	b.n	800302c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003020:	6978      	ldr	r0, [r7, #20]
 8003022:	f001 fcf7 	bl	8004a14 <vPortFree>
 8003026:	e001      	b.n	800302c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d017      	beq.n	8003062 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800303a:	88fa      	ldrh	r2, [r7, #6]
 800303c:	2300      	movs	r3, #0
 800303e:	9303      	str	r3, [sp, #12]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f80e 	bl	8003072 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003056:	69f8      	ldr	r0, [r7, #28]
 8003058:	f000 f892 	bl	8003180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800305c:	2301      	movs	r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	e002      	b.n	8003068 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003066:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003068:	69bb      	ldr	r3, [r7, #24]
	}
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b088      	sub	sp, #32
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	461a      	mov	r2, r3
 800308a:	21a5      	movs	r1, #165	; 0xa5
 800308c:	f001 fdd6 	bl	8004c3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800309a:	3b01      	subs	r3, #1
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f023 0307 	bic.w	r3, r3, #7
 80030a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <prvInitialiseNewTask+0x58>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	617b      	str	r3, [r7, #20]
}
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e012      	b.n	80030f6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	4413      	add	r3, r2
 80030d6:	7819      	ldrb	r1, [r3, #0]
 80030d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	4413      	add	r3, r2
 80030de:	3334      	adds	r3, #52	; 0x34
 80030e0:	460a      	mov	r2, r1
 80030e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d006      	beq.n	80030fe <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	3301      	adds	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2b0f      	cmp	r3, #15
 80030fa:	d9e9      	bls.n	80030d0 <prvInitialiseNewTask+0x5e>
 80030fc:	e000      	b.n	8003100 <prvInitialiseNewTask+0x8e>
		{
			break;
 80030fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	2b37      	cmp	r3, #55	; 0x37
 800310c:	d901      	bls.n	8003112 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800310e:	2337      	movs	r3, #55	; 0x37
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	2200      	movs	r2, #0
 8003122:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	3304      	adds	r3, #4
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f94e 	bl	80023ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	3318      	adds	r3, #24
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff f949 	bl	80023ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	2200      	movs	r2, #0
 8003152:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	68f9      	ldr	r1, [r7, #12]
 8003160:	69b8      	ldr	r0, [r7, #24]
 8003162:	f001 f99f 	bl	80044a4 <pxPortInitialiseStack>
 8003166:	4602      	mov	r2, r0
 8003168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003176:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003178:	bf00      	nop
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003188:	f001 fa80 	bl	800468c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800318c:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <prvAddNewTaskToReadyList+0xc4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3301      	adds	r3, #1
 8003192:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <prvAddNewTaskToReadyList+0xc4>)
 8003194:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <prvAddNewTaskToReadyList+0xc8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800319e:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <prvAddNewTaskToReadyList+0xc8>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031a4:	4b27      	ldr	r3, [pc, #156]	; (8003244 <prvAddNewTaskToReadyList+0xc4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d110      	bne.n	80031ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031ac:	f000 fc16 	bl	80039dc <prvInitialiseTaskLists>
 80031b0:	e00d      	b.n	80031ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <prvAddNewTaskToReadyList+0xcc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <prvAddNewTaskToReadyList+0xc8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d802      	bhi.n	80031ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031c8:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <prvAddNewTaskToReadyList+0xc8>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <prvAddNewTaskToReadyList+0xd0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <prvAddNewTaskToReadyList+0xd0>)
 80031d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <prvAddNewTaskToReadyList+0xd0>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <prvAddNewTaskToReadyList+0xd4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d903      	bls.n	80031f4 <prvAddNewTaskToReadyList+0x74>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	4a18      	ldr	r2, [pc, #96]	; (8003254 <prvAddNewTaskToReadyList+0xd4>)
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4a15      	ldr	r2, [pc, #84]	; (8003258 <prvAddNewTaskToReadyList+0xd8>)
 8003202:	441a      	add	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f7ff f8e9 	bl	80023e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003210:	f001 fa6c 	bl	80046ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <prvAddNewTaskToReadyList+0xcc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <prvAddNewTaskToReadyList+0xc8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	429a      	cmp	r2, r3
 8003228:	d207      	bcs.n	800323a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800322a:	4b0c      	ldr	r3, [pc, #48]	; (800325c <prvAddNewTaskToReadyList+0xdc>)
 800322c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	2000252c 	.word	0x2000252c
 8003248:	20002058 	.word	0x20002058
 800324c:	20002538 	.word	0x20002538
 8003250:	20002548 	.word	0x20002548
 8003254:	20002534 	.word	0x20002534
 8003258:	2000205c 	.word	0x2000205c
 800325c:	e000ed04 	.word	0xe000ed04

08003260 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d017      	beq.n	80032a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <vTaskDelay+0x60>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <vTaskDelay+0x30>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60bb      	str	r3, [r7, #8]
}
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003290:	f000 f880 	bl	8003394 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003294:	2100      	movs	r1, #0
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fcee 	bl	8003c78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800329c:	f000 f888 	bl	80033b0 <xTaskResumeAll>
 80032a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <vTaskDelay+0x64>)
 80032aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20002554 	.word	0x20002554
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032d6:	463a      	mov	r2, r7
 80032d8:	1d39      	adds	r1, r7, #4
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f822 	bl	8002328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032e4:	6839      	ldr	r1, [r7, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	9202      	str	r2, [sp, #8]
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	2300      	movs	r3, #0
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2300      	movs	r3, #0
 80032f4:	460a      	mov	r2, r1
 80032f6:	4921      	ldr	r1, [pc, #132]	; (800337c <vTaskStartScheduler+0xb4>)
 80032f8:	4821      	ldr	r0, [pc, #132]	; (8003380 <vTaskStartScheduler+0xb8>)
 80032fa:	f7ff fe19 	bl	8002f30 <xTaskCreateStatic>
 80032fe:	4603      	mov	r3, r0
 8003300:	4a20      	ldr	r2, [pc, #128]	; (8003384 <vTaskStartScheduler+0xbc>)
 8003302:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003304:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <vTaskStartScheduler+0xbc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800330c:	2301      	movs	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e001      	b.n	8003316 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d102      	bne.n	8003322 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800331c:	f000 fd00 	bl	8003d20 <xTimerCreateTimerTask>
 8003320:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d116      	bne.n	8003356 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	613b      	str	r3, [r7, #16]
}
 800333a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <vTaskStartScheduler+0xc0>)
 800333e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003342:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <vTaskStartScheduler+0xc4>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <vTaskStartScheduler+0xc8>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003350:	f001 f92a 	bl	80045a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003354:	e00e      	b.n	8003374 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335c:	d10a      	bne.n	8003374 <vTaskStartScheduler+0xac>
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	60fb      	str	r3, [r7, #12]
}
 8003370:	bf00      	nop
 8003372:	e7fe      	b.n	8003372 <vTaskStartScheduler+0xaa>
}
 8003374:	bf00      	nop
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08004db8 	.word	0x08004db8
 8003380:	080039ad 	.word	0x080039ad
 8003384:	20002550 	.word	0x20002550
 8003388:	2000254c 	.word	0x2000254c
 800338c:	20002538 	.word	0x20002538
 8003390:	20002530 	.word	0x20002530

08003394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <vTaskSuspendAll+0x18>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3301      	adds	r3, #1
 800339e:	4a03      	ldr	r2, [pc, #12]	; (80033ac <vTaskSuspendAll+0x18>)
 80033a0:	6013      	str	r3, [r2, #0]
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20002554 	.word	0x20002554

080033b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033be:	4b42      	ldr	r3, [pc, #264]	; (80034c8 <xTaskResumeAll+0x118>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <xTaskResumeAll+0x2c>
	__asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	603b      	str	r3, [r7, #0]
}
 80033d8:	bf00      	nop
 80033da:	e7fe      	b.n	80033da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033dc:	f001 f956 	bl	800468c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033e0:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <xTaskResumeAll+0x118>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	4a38      	ldr	r2, [pc, #224]	; (80034c8 <xTaskResumeAll+0x118>)
 80033e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <xTaskResumeAll+0x118>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d162      	bne.n	80034b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033f2:	4b36      	ldr	r3, [pc, #216]	; (80034cc <xTaskResumeAll+0x11c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d05e      	beq.n	80034b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033fa:	e02f      	b.n	800345c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80033fc:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <xTaskResumeAll+0x120>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3318      	adds	r3, #24
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff f845 	bl	8002498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3304      	adds	r3, #4
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff f840 	bl	8002498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <xTaskResumeAll+0x124>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d903      	bls.n	800342c <xTaskResumeAll+0x7c>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	4a2a      	ldr	r2, [pc, #168]	; (80034d4 <xTaskResumeAll+0x124>)
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4a27      	ldr	r2, [pc, #156]	; (80034d8 <xTaskResumeAll+0x128>)
 800343a:	441a      	add	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3304      	adds	r3, #4
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f7fe ffcd 	bl	80023e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	4b23      	ldr	r3, [pc, #140]	; (80034dc <xTaskResumeAll+0x12c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	429a      	cmp	r2, r3
 8003454:	d302      	bcc.n	800345c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <xTaskResumeAll+0x130>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800345c:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <xTaskResumeAll+0x120>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1cb      	bne.n	80033fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800346a:	f000 fb55 	bl	8003b18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <xTaskResumeAll+0x134>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d010      	beq.n	800349c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800347a:	f000 f845 	bl	8003508 <xTaskIncrementTick>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003484:	4b16      	ldr	r3, [pc, #88]	; (80034e0 <xTaskResumeAll+0x130>)
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3b01      	subs	r3, #1
 800348e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f1      	bne.n	800347a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003496:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <xTaskResumeAll+0x134>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800349c:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <xTaskResumeAll+0x130>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <xTaskResumeAll+0x138>)
 80034aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034b8:	f001 f918 	bl	80046ec <vPortExitCritical>

	return xAlreadyYielded;
 80034bc:	68bb      	ldr	r3, [r7, #8]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20002554 	.word	0x20002554
 80034cc:	2000252c 	.word	0x2000252c
 80034d0:	200024ec 	.word	0x200024ec
 80034d4:	20002534 	.word	0x20002534
 80034d8:	2000205c 	.word	0x2000205c
 80034dc:	20002058 	.word	0x20002058
 80034e0:	20002540 	.word	0x20002540
 80034e4:	2000253c 	.word	0x2000253c
 80034e8:	e000ed04 	.word	0xe000ed04

080034ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <xTaskGetTickCount+0x18>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034f8:	687b      	ldr	r3, [r7, #4]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	20002530 	.word	0x20002530

08003508 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003512:	4b51      	ldr	r3, [pc, #324]	; (8003658 <xTaskIncrementTick+0x150>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 808e 	bne.w	8003638 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800351c:	4b4f      	ldr	r3, [pc, #316]	; (800365c <xTaskIncrementTick+0x154>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003524:	4a4d      	ldr	r2, [pc, #308]	; (800365c <xTaskIncrementTick+0x154>)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d120      	bne.n	8003572 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003530:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <xTaskIncrementTick+0x158>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <xTaskIncrementTick+0x48>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	603b      	str	r3, [r7, #0]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <xTaskIncrementTick+0x46>
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <xTaskIncrementTick+0x158>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b43      	ldr	r3, [pc, #268]	; (8003664 <xTaskIncrementTick+0x15c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a41      	ldr	r2, [pc, #260]	; (8003660 <xTaskIncrementTick+0x158>)
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4a41      	ldr	r2, [pc, #260]	; (8003664 <xTaskIncrementTick+0x15c>)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b40      	ldr	r3, [pc, #256]	; (8003668 <xTaskIncrementTick+0x160>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	4a3f      	ldr	r2, [pc, #252]	; (8003668 <xTaskIncrementTick+0x160>)
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	f000 fad3 	bl	8003b18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003572:	4b3e      	ldr	r3, [pc, #248]	; (800366c <xTaskIncrementTick+0x164>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	429a      	cmp	r2, r3
 800357a:	d34e      	bcc.n	800361a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800357c:	4b38      	ldr	r3, [pc, #224]	; (8003660 <xTaskIncrementTick+0x158>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <xTaskIncrementTick+0x82>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <xTaskIncrementTick+0x84>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003590:	4b36      	ldr	r3, [pc, #216]	; (800366c <xTaskIncrementTick+0x164>)
 8003592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003596:	601a      	str	r2, [r3, #0]
					break;
 8003598:	e03f      	b.n	800361a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800359a:	4b31      	ldr	r3, [pc, #196]	; (8003660 <xTaskIncrementTick+0x158>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d203      	bcs.n	80035ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035b2:	4a2e      	ldr	r2, [pc, #184]	; (800366c <xTaskIncrementTick+0x164>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6013      	str	r3, [r2, #0]
						break;
 80035b8:	e02f      	b.n	800361a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	3304      	adds	r3, #4
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe ff6a 	bl	8002498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	3318      	adds	r3, #24
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe ff61 	bl	8002498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	4b25      	ldr	r3, [pc, #148]	; (8003670 <xTaskIncrementTick+0x168>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d903      	bls.n	80035ea <xTaskIncrementTick+0xe2>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	4a22      	ldr	r2, [pc, #136]	; (8003670 <xTaskIncrementTick+0x168>)
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4a1f      	ldr	r2, [pc, #124]	; (8003674 <xTaskIncrementTick+0x16c>)
 80035f8:	441a      	add	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f7fe feee 	bl	80023e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360a:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <xTaskIncrementTick+0x170>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	429a      	cmp	r2, r3
 8003612:	d3b3      	bcc.n	800357c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003614:	2301      	movs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003618:	e7b0      	b.n	800357c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800361a:	4b17      	ldr	r3, [pc, #92]	; (8003678 <xTaskIncrementTick+0x170>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	4914      	ldr	r1, [pc, #80]	; (8003674 <xTaskIncrementTick+0x16c>)
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d907      	bls.n	8003642 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003632:	2301      	movs	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e004      	b.n	8003642 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <xTaskIncrementTick+0x174>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	4a0f      	ldr	r2, [pc, #60]	; (800367c <xTaskIncrementTick+0x174>)
 8003640:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003642:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <xTaskIncrementTick+0x178>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800364a:	2301      	movs	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800364e:	697b      	ldr	r3, [r7, #20]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20002554 	.word	0x20002554
 800365c:	20002530 	.word	0x20002530
 8003660:	200024e4 	.word	0x200024e4
 8003664:	200024e8 	.word	0x200024e8
 8003668:	20002544 	.word	0x20002544
 800366c:	2000254c 	.word	0x2000254c
 8003670:	20002534 	.word	0x20002534
 8003674:	2000205c 	.word	0x2000205c
 8003678:	20002058 	.word	0x20002058
 800367c:	2000253c 	.word	0x2000253c
 8003680:	20002540 	.word	0x20002540

08003684 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800368a:	4b27      	ldr	r3, [pc, #156]	; (8003728 <vTaskSwitchContext+0xa4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003692:	4b26      	ldr	r3, [pc, #152]	; (800372c <vTaskSwitchContext+0xa8>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003698:	e041      	b.n	800371e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800369a:	4b24      	ldr	r3, [pc, #144]	; (800372c <vTaskSwitchContext+0xa8>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036a0:	4b23      	ldr	r3, [pc, #140]	; (8003730 <vTaskSwitchContext+0xac>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	e010      	b.n	80036ca <vTaskSwitchContext+0x46>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	607b      	str	r3, [r7, #4]
}
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <vTaskSwitchContext+0x3e>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	491a      	ldr	r1, [pc, #104]	; (8003734 <vTaskSwitchContext+0xb0>)
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0e4      	beq.n	80036a8 <vTaskSwitchContext+0x24>
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4a12      	ldr	r2, [pc, #72]	; (8003734 <vTaskSwitchContext+0xb0>)
 80036ea:	4413      	add	r3, r2
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	3308      	adds	r3, #8
 8003700:	429a      	cmp	r2, r3
 8003702:	d104      	bne.n	800370e <vTaskSwitchContext+0x8a>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a08      	ldr	r2, [pc, #32]	; (8003738 <vTaskSwitchContext+0xb4>)
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4a05      	ldr	r2, [pc, #20]	; (8003730 <vTaskSwitchContext+0xac>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6013      	str	r3, [r2, #0]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20002554 	.word	0x20002554
 800372c:	20002540 	.word	0x20002540
 8003730:	20002534 	.word	0x20002534
 8003734:	2000205c 	.word	0x2000205c
 8003738:	20002058 	.word	0x20002058

0800373c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60fb      	str	r3, [r7, #12]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <vTaskPlaceOnEventList+0x44>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3318      	adds	r3, #24
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fe5c 	bl	8002428 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003770:	2101      	movs	r1, #1
 8003772:	6838      	ldr	r0, [r7, #0]
 8003774:	f000 fa80 	bl	8003c78 <prvAddCurrentTaskToDelayedList>
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20002058 	.word	0x20002058

08003784 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	617b      	str	r3, [r7, #20]
}
 80037a8:	bf00      	nop
 80037aa:	e7fe      	b.n	80037aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3318      	adds	r3, #24
 80037b2:	4619      	mov	r1, r3
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7fe fe14 	bl	80023e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	68b8      	ldr	r0, [r7, #8]
 80037ca:	f000 fa55 	bl	8003c78 <prvAddCurrentTaskToDelayedList>
	}
 80037ce:	bf00      	nop
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20002058 	.word	0x20002058

080037dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	60fb      	str	r3, [r7, #12]
}
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	3318      	adds	r3, #24
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe fe43 	bl	8002498 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <xTaskRemoveFromEventList+0xb0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11d      	bne.n	8003856 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	3304      	adds	r3, #4
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe fe3a 	bl	8002498 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003828:	4b19      	ldr	r3, [pc, #100]	; (8003890 <xTaskRemoveFromEventList+0xb4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d903      	bls.n	8003838 <xTaskRemoveFromEventList+0x5c>
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	4a16      	ldr	r2, [pc, #88]	; (8003890 <xTaskRemoveFromEventList+0xb4>)
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <xTaskRemoveFromEventList+0xb8>)
 8003846:	441a      	add	r2, r3
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	3304      	adds	r3, #4
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f7fe fdc7 	bl	80023e2 <vListInsertEnd>
 8003854:	e005      	b.n	8003862 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	3318      	adds	r3, #24
 800385a:	4619      	mov	r1, r3
 800385c:	480e      	ldr	r0, [pc, #56]	; (8003898 <xTaskRemoveFromEventList+0xbc>)
 800385e:	f7fe fdc0 	bl	80023e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <xTaskRemoveFromEventList+0xc0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	429a      	cmp	r2, r3
 800386e:	d905      	bls.n	800387c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003870:	2301      	movs	r3, #1
 8003872:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <xTaskRemoveFromEventList+0xc4>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e001      	b.n	8003880 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003880:	697b      	ldr	r3, [r7, #20]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20002554 	.word	0x20002554
 8003890:	20002534 	.word	0x20002534
 8003894:	2000205c 	.word	0x2000205c
 8003898:	200024ec 	.word	0x200024ec
 800389c:	20002058 	.word	0x20002058
 80038a0:	20002540 	.word	0x20002540

080038a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <vTaskInternalSetTimeOutState+0x24>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <vTaskInternalSetTimeOutState+0x28>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	605a      	str	r2, [r3, #4]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20002544 	.word	0x20002544
 80038cc:	20002530 	.word	0x20002530

080038d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	613b      	str	r3, [r7, #16]
}
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	60fb      	str	r3, [r7, #12]
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003912:	f000 febb 	bl	800468c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <xTaskCheckForTimeOut+0xbc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800392e:	d102      	bne.n	8003936 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e023      	b.n	800397e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <xTaskCheckForTimeOut+0xc0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d007      	beq.n	8003952 <xTaskCheckForTimeOut+0x82>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e015      	b.n	800397e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d20b      	bcs.n	8003974 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff9b 	bl	80038a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	e004      	b.n	800397e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800397a:	2301      	movs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800397e:	f000 feb5 	bl	80046ec <vPortExitCritical>

	return xReturn;
 8003982:	69fb      	ldr	r3, [r7, #28]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20002530 	.word	0x20002530
 8003990:	20002544 	.word	0x20002544

08003994 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <vTaskMissedYield+0x14>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]
}
 800399e:	bf00      	nop
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20002540 	.word	0x20002540

080039ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039b4:	f000 f852 	bl	8003a5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <prvIdleTask+0x28>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d9f9      	bls.n	80039b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <prvIdleTask+0x2c>)
 80039c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039d0:	e7f0      	b.n	80039b4 <prvIdleTask+0x8>
 80039d2:	bf00      	nop
 80039d4:	2000205c 	.word	0x2000205c
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	e00c      	b.n	8003a02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <prvInitialiseTaskLists+0x60>)
 80039f4:	4413      	add	r3, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fcc8 	bl	800238c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3301      	adds	r3, #1
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b37      	cmp	r3, #55	; 0x37
 8003a06:	d9ef      	bls.n	80039e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a08:	480d      	ldr	r0, [pc, #52]	; (8003a40 <prvInitialiseTaskLists+0x64>)
 8003a0a:	f7fe fcbf 	bl	800238c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a0e:	480d      	ldr	r0, [pc, #52]	; (8003a44 <prvInitialiseTaskLists+0x68>)
 8003a10:	f7fe fcbc 	bl	800238c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a14:	480c      	ldr	r0, [pc, #48]	; (8003a48 <prvInitialiseTaskLists+0x6c>)
 8003a16:	f7fe fcb9 	bl	800238c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a1a:	480c      	ldr	r0, [pc, #48]	; (8003a4c <prvInitialiseTaskLists+0x70>)
 8003a1c:	f7fe fcb6 	bl	800238c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a20:	480b      	ldr	r0, [pc, #44]	; (8003a50 <prvInitialiseTaskLists+0x74>)
 8003a22:	f7fe fcb3 	bl	800238c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <prvInitialiseTaskLists+0x78>)
 8003a28:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <prvInitialiseTaskLists+0x64>)
 8003a2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <prvInitialiseTaskLists+0x7c>)
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <prvInitialiseTaskLists+0x68>)
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	2000205c 	.word	0x2000205c
 8003a40:	200024bc 	.word	0x200024bc
 8003a44:	200024d0 	.word	0x200024d0
 8003a48:	200024ec 	.word	0x200024ec
 8003a4c:	20002500 	.word	0x20002500
 8003a50:	20002518 	.word	0x20002518
 8003a54:	200024e4 	.word	0x200024e4
 8003a58:	200024e8 	.word	0x200024e8

08003a5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a62:	e019      	b.n	8003a98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a64:	f000 fe12 	bl	800468c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <prvCheckTasksWaitingTermination+0x50>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fd0f 	bl	8002498 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <prvCheckTasksWaitingTermination+0x54>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	4a0b      	ldr	r2, [pc, #44]	; (8003ab0 <prvCheckTasksWaitingTermination+0x54>)
 8003a82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a8e:	f000 fe2d 	bl	80046ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f810 	bl	8003ab8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <prvCheckTasksWaitingTermination+0x58>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e1      	bne.n	8003a64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20002500 	.word	0x20002500
 8003ab0:	2000252c 	.word	0x2000252c
 8003ab4:	20002514 	.word	0x20002514

08003ab8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d108      	bne.n	8003adc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 ffa0 	bl	8004a14 <vPortFree>
				vPortFree( pxTCB );
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 ff9d 	bl	8004a14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ada:	e018      	b.n	8003b0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d103      	bne.n	8003aee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 ff94 	bl	8004a14 <vPortFree>
	}
 8003aec:	e00f      	b.n	8003b0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d00a      	beq.n	8003b0e <prvDeleteTCB+0x56>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	60fb      	str	r3, [r7, #12]
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <prvDeleteTCB+0x54>
	}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <prvResetNextTaskUnblockTime+0x40>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <prvResetNextTaskUnblockTime+0x14>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <prvResetNextTaskUnblockTime+0x16>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d004      	beq.n	8003b3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <prvResetNextTaskUnblockTime+0x44>)
 8003b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b3a:	e008      	b.n	8003b4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <prvResetNextTaskUnblockTime+0x40>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <prvResetNextTaskUnblockTime+0x44>)
 8003b4c:	6013      	str	r3, [r2, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	200024e4 	.word	0x200024e4
 8003b5c:	2000254c 	.word	0x2000254c

08003b60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <xTaskGetSchedulerState+0x34>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	e008      	b.n	8003b86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <xTaskGetSchedulerState+0x38>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	e001      	b.n	8003b86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b82:	2300      	movs	r3, #0
 8003b84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b86:	687b      	ldr	r3, [r7, #4]
	}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20002538 	.word	0x20002538
 8003b98:	20002554 	.word	0x20002554

08003b9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d056      	beq.n	8003c60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <xTaskPriorityDisinherit+0xd0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d00a      	beq.n	8003bd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	60fb      	str	r3, [r7, #12]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	60bb      	str	r3, [r7, #8]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d02c      	beq.n	8003c60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d128      	bne.n	8003c60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fc40 	bl	8002498 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <xTaskPriorityDisinherit+0xd4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d903      	bls.n	8003c40 <xTaskPriorityDisinherit+0xa4>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <xTaskPriorityDisinherit+0xd4>)
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <xTaskPriorityDisinherit+0xd8>)
 8003c4e:	441a      	add	r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f7fe fbc3 	bl	80023e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c60:	697b      	ldr	r3, [r7, #20]
	}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20002058 	.word	0x20002058
 8003c70:	20002534 	.word	0x20002534
 8003c74:	2000205c 	.word	0x2000205c

08003c78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fc02 	bl	8002498 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c9a:	d10a      	bne.n	8003cb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4819      	ldr	r0, [pc, #100]	; (8003d10 <prvAddCurrentTaskToDelayedList+0x98>)
 8003cac:	f7fe fb99 	bl	80023e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cb0:	e026      	b.n	8003d00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d209      	bcs.n	8003cde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f7fe fba6 	bl	8002428 <vListInsert>
}
 8003cdc:	e010      	b.n	8003d00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f7fe fb9c 	bl	8002428 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d202      	bcs.n	8003d00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003cfa:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20002530 	.word	0x20002530
 8003d0c:	20002058 	.word	0x20002058
 8003d10:	20002518 	.word	0x20002518
 8003d14:	200024e8 	.word	0x200024e8
 8003d18:	200024e4 	.word	0x200024e4
 8003d1c:	2000254c 	.word	0x2000254c

08003d20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d2a:	f000 fb5b 	bl	80043e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <xTimerCreateTimerTask+0x80>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d021      	beq.n	8003d7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d3e:	1d3a      	adds	r2, r7, #4
 8003d40:	f107 0108 	add.w	r1, r7, #8
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fb05 	bl	8002358 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	9202      	str	r2, [sp, #8]
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	2302      	movs	r3, #2
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	460a      	mov	r2, r1
 8003d60:	4910      	ldr	r1, [pc, #64]	; (8003da4 <xTimerCreateTimerTask+0x84>)
 8003d62:	4811      	ldr	r0, [pc, #68]	; (8003da8 <xTimerCreateTimerTask+0x88>)
 8003d64:	f7ff f8e4 	bl	8002f30 <xTaskCreateStatic>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <xTimerCreateTimerTask+0x8c>)
 8003d6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <xTimerCreateTimerTask+0x8c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d76:	2301      	movs	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	613b      	str	r3, [r7, #16]
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003d96:	697b      	ldr	r3, [r7, #20]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20002588 	.word	0x20002588
 8003da4:	08004dc0 	.word	0x08004dc0
 8003da8:	08003fed 	.word	0x08003fed
 8003dac:	2000258c 	.word	0x2000258c

08003db0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003dbe:	2030      	movs	r0, #48	; 0x30
 8003dc0:	f000 fd64 	bl	800488c <pvPortMalloc>
 8003dc4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f846 	bl	8003e6c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8003de8:	697b      	ldr	r3, [r7, #20]
	}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b08a      	sub	sp, #40	; 0x28
 8003df6:	af02      	add	r7, sp, #8
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003e00:	2330      	movs	r3, #48	; 0x30
 8003e02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b30      	cmp	r3, #48	; 0x30
 8003e08:	d00a      	beq.n	8003e20 <xTimerCreateStatic+0x2e>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	61bb      	str	r3, [r7, #24]
}
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <xTimerCreateStatic+0x4a>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	617b      	str	r3, [r7, #20]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f809 	bl	8003e6c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8003e62:	69fb      	ldr	r3, [r7, #28]
	}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	617b      	str	r3, [r7, #20]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d015      	beq.n	8003ec8 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003e9c:	f000 faa2 	bl	80043e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	6a3a      	ldr	r2, [r7, #32]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fa81 	bl	80023ca <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003ec8:	bf00      	nop
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	623b      	str	r3, [r7, #32]
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003efe:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <xTimerGenericCommand+0x98>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02a      	beq.n	8003f5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b05      	cmp	r3, #5
 8003f16:	dc18      	bgt.n	8003f4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f18:	f7ff fe22 	bl	8003b60 <xTaskGetSchedulerState>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d109      	bne.n	8003f36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f22:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <xTimerGenericCommand+0x98>)
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	f107 0110 	add.w	r1, r7, #16
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2e:	f7fe fc1d 	bl	800276c <xQueueGenericSend>
 8003f32:	6278      	str	r0, [r7, #36]	; 0x24
 8003f34:	e012      	b.n	8003f5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <xTimerGenericCommand+0x98>)
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	f107 0110 	add.w	r1, r7, #16
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2200      	movs	r2, #0
 8003f42:	f7fe fc13 	bl	800276c <xQueueGenericSend>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24
 8003f48:	e008      	b.n	8003f5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <xTimerGenericCommand+0x98>)
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	f107 0110 	add.w	r1, r7, #16
 8003f52:	2300      	movs	r3, #0
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	f7fe fd07 	bl	8002968 <xQueueGenericSendFromISR>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3728      	adds	r7, #40	; 0x28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20002588 	.word	0x20002588

08003f6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f76:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <prvProcessExpiredTimer+0x7c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe fa87 	bl	8002498 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d122      	bne.n	8003fd8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	18d1      	adds	r1, r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	6978      	ldr	r0, [r7, #20]
 8003fa0:	f000 f8c8 	bl	8004134 <prvInsertTimerInActiveList>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003faa:	2300      	movs	r3, #0
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	6978      	ldr	r0, [r7, #20]
 8003fb6:	f7ff ff8b 	bl	8003ed0 <xTimerGenericCommand>
 8003fba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	60fb      	str	r3, [r7, #12]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	6978      	ldr	r0, [r7, #20]
 8003fde:	4798      	blx	r3
}
 8003fe0:	bf00      	nop
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20002580 	.word	0x20002580

08003fec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ff4:	f107 0308 	add.w	r3, r7, #8
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f857 	bl	80040ac <prvGetNextExpireTime>
 8003ffe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4619      	mov	r1, r3
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f803 	bl	8004010 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800400a:	f000 f8d5 	bl	80041b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800400e:	e7f1      	b.n	8003ff4 <prvTimerTask+0x8>

08004010 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800401a:	f7ff f9bb 	bl	8003394 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800401e:	f107 0308 	add.w	r3, r7, #8
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f866 	bl	80040f4 <prvSampleTimeNow>
 8004028:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d130      	bne.n	8004092 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10a      	bne.n	800404c <prvProcessTimerOrBlockTask+0x3c>
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	429a      	cmp	r2, r3
 800403c:	d806      	bhi.n	800404c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800403e:	f7ff f9b7 	bl	80033b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004042:	68f9      	ldr	r1, [r7, #12]
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff91 	bl	8003f6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800404a:	e024      	b.n	8004096 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004052:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <prvProcessTimerOrBlockTask+0x90>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <prvProcessTimerOrBlockTask+0x94>)
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	4619      	mov	r1, r3
 8004072:	f7fe ff29 	bl	8002ec8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004076:	f7ff f99b 	bl	80033b0 <xTaskResumeAll>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <prvProcessTimerOrBlockTask+0x98>)
 8004082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	f3bf 8f6f 	isb	sy
}
 8004090:	e001      	b.n	8004096 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004092:	f7ff f98d 	bl	80033b0 <xTaskResumeAll>
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20002584 	.word	0x20002584
 80040a4:	20002588 	.word	0x20002588
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <prvGetNextExpireTime+0x44>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf0c      	ite	eq
 80040be:	2301      	moveq	r3, #1
 80040c0:	2300      	movne	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d105      	bne.n	80040de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <prvGetNextExpireTime+0x44>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	e001      	b.n	80040e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040e2:	68fb      	ldr	r3, [r7, #12]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20002580 	.word	0x20002580

080040f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040fc:	f7ff f9f6 	bl	80034ec <xTaskGetTickCount>
 8004100:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <prvSampleTimeNow+0x3c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	429a      	cmp	r2, r3
 800410a:	d205      	bcs.n	8004118 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800410c:	f000 f908 	bl	8004320 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e002      	b.n	800411e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800411e:	4a04      	ldr	r2, [pc, #16]	; (8004130 <prvSampleTimeNow+0x3c>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004124:	68fb      	ldr	r3, [r7, #12]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20002590 	.word	0x20002590

08004134 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d812      	bhi.n	8004180 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	1ad2      	subs	r2, r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	429a      	cmp	r2, r3
 8004166:	d302      	bcc.n	800416e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004168:	2301      	movs	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e01b      	b.n	80041a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <prvInsertTimerInActiveList+0x7c>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3304      	adds	r3, #4
 8004176:	4619      	mov	r1, r3
 8004178:	4610      	mov	r0, r2
 800417a:	f7fe f955 	bl	8002428 <vListInsert>
 800417e:	e012      	b.n	80041a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d206      	bcs.n	8004196 <prvInsertTimerInActiveList+0x62>
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d302      	bcc.n	8004196 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e007      	b.n	80041a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <prvInsertTimerInActiveList+0x80>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7fe f941 	bl	8002428 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80041a6:	697b      	ldr	r3, [r7, #20]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20002584 	.word	0x20002584
 80041b4:	20002580 	.word	0x20002580

080041b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08e      	sub	sp, #56	; 0x38
 80041bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041be:	e09d      	b.n	80042fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da18      	bge.n	80041f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041c6:	1d3b      	adds	r3, r7, #4
 80041c8:	3304      	adds	r3, #4
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	61fb      	str	r3, [r7, #28]
}
 80041e4:	bf00      	nop
 80041e6:	e7fe      	b.n	80041e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ee:	6850      	ldr	r0, [r2, #4]
 80041f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f2:	6892      	ldr	r2, [r2, #8]
 80041f4:	4611      	mov	r1, r2
 80041f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db7e      	blt.n	80042fc <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d004      	beq.n	8004214 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	3304      	adds	r3, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe f942 	bl	8002498 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004214:	463b      	mov	r3, r7
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff ff6c 	bl	80040f4 <prvSampleTimeNow>
 800421c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b09      	cmp	r3, #9
 8004222:	d86a      	bhi.n	80042fa <prvProcessReceivedCommands+0x142>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <prvProcessReceivedCommands+0x74>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004255 	.word	0x08004255
 8004230:	08004255 	.word	0x08004255
 8004234:	08004255 	.word	0x08004255
 8004238:	080042fd 	.word	0x080042fd
 800423c:	080042b1 	.word	0x080042b1
 8004240:	080042e9 	.word	0x080042e9
 8004244:	08004255 	.word	0x08004255
 8004248:	08004255 	.word	0x08004255
 800424c:	080042fd 	.word	0x080042fd
 8004250:	080042b1 	.word	0x080042b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	18d1      	adds	r1, r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004262:	f7ff ff67 	bl	8004134 <prvInsertTimerInActiveList>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d047      	beq.n	80042fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004272:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d13f      	bne.n	80042fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	441a      	add	r2, r3
 8004284:	2300      	movs	r3, #0
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2300      	movs	r3, #0
 800428a:	2100      	movs	r1, #0
 800428c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800428e:	f7ff fe1f 	bl	8003ed0 <xTimerGenericCommand>
 8004292:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d130      	bne.n	80042fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	61bb      	str	r3, [r7, #24]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	617b      	str	r3, [r7, #20]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	18d1      	adds	r1, r2, r3
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e2:	f7ff ff27 	bl	8004134 <prvInsertTimerInActiveList>
					break;
 80042e6:	e009      	b.n	80042fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d104      	bne.n	80042fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80042f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f4:	f000 fb8e 	bl	8004a14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80042f8:	e000      	b.n	80042fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80042fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <prvProcessReceivedCommands+0x164>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	1d39      	adds	r1, r7, #4
 8004302:	2200      	movs	r2, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fbc7 	bl	8002a98 <xQueueReceive>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	f47f af57 	bne.w	80041c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	3730      	adds	r7, #48	; 0x30
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20002588 	.word	0x20002588

08004320 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004326:	e045      	b.n	80043b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004328:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <prvSwitchTimerLists+0xbc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004332:	4b2a      	ldr	r3, [pc, #168]	; (80043dc <prvSwitchTimerLists+0xbc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3304      	adds	r3, #4
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe f8a9 	bl	8002498 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d12e      	bne.n	80043b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	429a      	cmp	r2, r3
 8004366:	d90e      	bls.n	8004386 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <prvSwitchTimerLists+0xbc>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f7fe f852 	bl	8002428 <vListInsert>
 8004384:	e016      	b.n	80043b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004386:	2300      	movs	r3, #0
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2300      	movs	r3, #0
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	2100      	movs	r1, #0
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7ff fd9d 	bl	8003ed0 <xTimerGenericCommand>
 8004396:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	603b      	str	r3, [r7, #0]
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <prvSwitchTimerLists+0xbc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1b4      	bne.n	8004328 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80043be:	4b07      	ldr	r3, [pc, #28]	; (80043dc <prvSwitchTimerLists+0xbc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <prvSwitchTimerLists+0xc0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <prvSwitchTimerLists+0xbc>)
 80043ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80043cc:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <prvSwitchTimerLists+0xc0>)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6013      	str	r3, [r2, #0]
}
 80043d2:	bf00      	nop
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20002580 	.word	0x20002580
 80043e0:	20002584 	.word	0x20002584

080043e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80043ea:	f000 f94f 	bl	800468c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80043ee:	4b15      	ldr	r3, [pc, #84]	; (8004444 <prvCheckForValidListAndQueue+0x60>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d120      	bne.n	8004438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80043f6:	4814      	ldr	r0, [pc, #80]	; (8004448 <prvCheckForValidListAndQueue+0x64>)
 80043f8:	f7fd ffc8 	bl	800238c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80043fc:	4813      	ldr	r0, [pc, #76]	; (800444c <prvCheckForValidListAndQueue+0x68>)
 80043fe:	f7fd ffc5 	bl	800238c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <prvCheckForValidListAndQueue+0x6c>)
 8004404:	4a10      	ldr	r2, [pc, #64]	; (8004448 <prvCheckForValidListAndQueue+0x64>)
 8004406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <prvCheckForValidListAndQueue+0x70>)
 800440a:	4a10      	ldr	r2, [pc, #64]	; (800444c <prvCheckForValidListAndQueue+0x68>)
 800440c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800440e:	2300      	movs	r3, #0
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <prvCheckForValidListAndQueue+0x74>)
 8004414:	4a11      	ldr	r2, [pc, #68]	; (800445c <prvCheckForValidListAndQueue+0x78>)
 8004416:	2110      	movs	r1, #16
 8004418:	200a      	movs	r0, #10
 800441a:	f7fe f8cf 	bl	80025bc <xQueueGenericCreateStatic>
 800441e:	4603      	mov	r3, r0
 8004420:	4a08      	ldr	r2, [pc, #32]	; (8004444 <prvCheckForValidListAndQueue+0x60>)
 8004422:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004424:	4b07      	ldr	r3, [pc, #28]	; (8004444 <prvCheckForValidListAndQueue+0x60>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <prvCheckForValidListAndQueue+0x60>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	490b      	ldr	r1, [pc, #44]	; (8004460 <prvCheckForValidListAndQueue+0x7c>)
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fd20 	bl	8002e78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004438:	f000 f958 	bl	80046ec <vPortExitCritical>
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20002588 	.word	0x20002588
 8004448:	20002558 	.word	0x20002558
 800444c:	2000256c 	.word	0x2000256c
 8004450:	20002580 	.word	0x20002580
 8004454:	20002584 	.word	0x20002584
 8004458:	20002634 	.word	0x20002634
 800445c:	20002594 	.word	0x20002594
 8004460:	08004dc8 	.word	0x08004dc8

08004464 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <pvTimerGetTimerID+0x28>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60fb      	str	r3, [r7, #12]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800448c:	f000 f8fe 	bl	800468c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004496:	f000 f929 	bl	80046ec <vPortExitCritical>

	return pvReturn;
 800449a:	693b      	ldr	r3, [r7, #16]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3b04      	subs	r3, #4
 80044b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3b04      	subs	r3, #4
 80044c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f023 0201 	bic.w	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3b04      	subs	r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044d4:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <pxPortInitialiseStack+0x54>)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b14      	subs	r3, #20
 80044de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3b20      	subs	r3, #32
 80044ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044ec:	68fb      	ldr	r3, [r7, #12]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr
 80044f8:	080044fd 	.word	0x080044fd

080044fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004502:	2300      	movs	r3, #0
 8004504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004506:	4b12      	ldr	r3, [pc, #72]	; (8004550 <prvTaskExitError+0x54>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800450e:	d00a      	beq.n	8004526 <prvTaskExitError+0x2a>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	60fb      	str	r3, [r7, #12]
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <prvTaskExitError+0x28>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60bb      	str	r3, [r7, #8]
}
 8004538:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800453a:	bf00      	nop
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0fc      	beq.n	800453c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	2000000c 	.word	0x2000000c
	...

08004560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <pxCurrentTCBConst2>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800456a:	f380 8809 	msr	PSP, r0
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	f04e 0e0d 	orr.w	lr, lr, #13
 800457e:	4770      	bx	lr

08004580 <pxCurrentTCBConst2>:
 8004580:	20002058 	.word	0x20002058
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004588:	4806      	ldr	r0, [pc, #24]	; (80045a4 <prvPortStartFirstTask+0x1c>)
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f380 8808 	msr	MSP, r0
 8004592:	b662      	cpsie	i
 8004594:	b661      	cpsie	f
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	df00      	svc	0
 80045a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045a2:	bf00      	nop
 80045a4:	e000ed08 	.word	0xe000ed08

080045a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045ae:	4b32      	ldr	r3, [pc, #200]	; (8004678 <xPortStartScheduler+0xd0>)
 80045b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	22ff      	movs	r2, #255	; 0xff
 80045be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	4b2a      	ldr	r3, [pc, #168]	; (800467c <xPortStartScheduler+0xd4>)
 80045d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045d6:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <xPortStartScheduler+0xd8>)
 80045d8:	2207      	movs	r2, #7
 80045da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045dc:	e009      	b.n	80045f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80045de:	4b28      	ldr	r3, [pc, #160]	; (8004680 <xPortStartScheduler+0xd8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	4a26      	ldr	r2, [pc, #152]	; (8004680 <xPortStartScheduler+0xd8>)
 80045e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b80      	cmp	r3, #128	; 0x80
 80045fc:	d0ef      	beq.n	80045de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045fe:	4b20      	ldr	r3, [pc, #128]	; (8004680 <xPortStartScheduler+0xd8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1c3 0307 	rsb	r3, r3, #7
 8004606:	2b04      	cmp	r3, #4
 8004608:	d00a      	beq.n	8004620 <xPortStartScheduler+0x78>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60bb      	str	r3, [r7, #8]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004620:	4b17      	ldr	r3, [pc, #92]	; (8004680 <xPortStartScheduler+0xd8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	4a16      	ldr	r2, [pc, #88]	; (8004680 <xPortStartScheduler+0xd8>)
 8004628:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <xPortStartScheduler+0xd8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004632:	4a13      	ldr	r2, [pc, #76]	; (8004680 <xPortStartScheduler+0xd8>)
 8004634:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <xPortStartScheduler+0xdc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a10      	ldr	r2, [pc, #64]	; (8004684 <xPortStartScheduler+0xdc>)
 8004644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004648:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <xPortStartScheduler+0xdc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a0d      	ldr	r2, [pc, #52]	; (8004684 <xPortStartScheduler+0xdc>)
 8004650:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004654:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004656:	f000 f8b9 	bl	80047cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <xPortStartScheduler+0xe0>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004660:	f7ff ff92 	bl	8004588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004664:	f7ff f80e 	bl	8003684 <vTaskSwitchContext>
	prvTaskExitError();
 8004668:	f7ff ff48 	bl	80044fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	e000e400 	.word	0xe000e400
 800467c:	20002684 	.word	0x20002684
 8004680:	20002688 	.word	0x20002688
 8004684:	e000ed20 	.word	0xe000ed20
 8004688:	2000000c 	.word	0x2000000c

0800468c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	607b      	str	r3, [r7, #4]
}
 80046a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <vPortEnterCritical+0x58>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	4a0d      	ldr	r2, [pc, #52]	; (80046e4 <vPortEnterCritical+0x58>)
 80046ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046b0:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <vPortEnterCritical+0x58>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d10f      	bne.n	80046d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <vPortEnterCritical+0x5c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	603b      	str	r3, [r7, #0]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <vPortEnterCritical+0x4a>
	}
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	2000000c 	.word	0x2000000c
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046f2:	4b11      	ldr	r3, [pc, #68]	; (8004738 <vPortExitCritical+0x4c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <vPortExitCritical+0x24>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	607b      	str	r3, [r7, #4]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <vPortExitCritical+0x4c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3b01      	subs	r3, #1
 8004716:	4a08      	ldr	r2, [pc, #32]	; (8004738 <vPortExitCritical+0x4c>)
 8004718:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <vPortExitCritical+0x4c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d105      	bne.n	800472e <vPortExitCritical+0x42>
 8004722:	2300      	movs	r3, #0
 8004724:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f383 8811 	msr	BASEPRI, r3
}
 800472c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	2000000c 	.word	0x2000000c
 800473c:	00000000 	.word	0x00000000

08004740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004740:	f3ef 8009 	mrs	r0, PSP
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <pxCurrentTCBConst>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004750:	6010      	str	r0, [r2, #0]
 8004752:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004756:	f04f 0050 	mov.w	r0, #80	; 0x50
 800475a:	f380 8811 	msr	BASEPRI, r0
 800475e:	f7fe ff91 	bl	8003684 <vTaskSwitchContext>
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8811 	msr	BASEPRI, r0
 800476a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	6808      	ldr	r0, [r1, #0]
 8004772:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004776:	f380 8809 	msr	PSP, r0
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	4770      	bx	lr

08004780 <pxCurrentTCBConst>:
 8004780:	20002058 	.word	0x20002058
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop

08004788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	607b      	str	r3, [r7, #4]
}
 80047a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047a2:	f7fe feb1 	bl	8003508 <xTaskIncrementTick>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <SysTick_Handler+0x40>)
 80047ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f383 8811 	msr	BASEPRI, r3
}
 80047be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <vPortSetupTimerInterrupt+0x30>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <vPortSetupTimerInterrupt+0x34>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <vPortSetupTimerInterrupt+0x38>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a09      	ldr	r2, [pc, #36]	; (8004808 <vPortSetupTimerInterrupt+0x3c>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	4a08      	ldr	r2, [pc, #32]	; (800480c <vPortSetupTimerInterrupt+0x40>)
 80047ea:	3b01      	subs	r3, #1
 80047ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ee:	4b03      	ldr	r3, [pc, #12]	; (80047fc <vPortSetupTimerInterrupt+0x30>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	601a      	str	r2, [r3, #0]
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	e000e010 	.word	0xe000e010
 8004800:	e000e018 	.word	0xe000e018
 8004804:	20000000 	.word	0x20000000
 8004808:	10624dd3 	.word	0x10624dd3
 800480c:	e000e014 	.word	0xe000e014

08004810 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004816:	f3ef 8305 	mrs	r3, IPSR
 800481a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b0f      	cmp	r3, #15
 8004820:	d914      	bls.n	800484c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004822:	4a16      	ldr	r2, [pc, #88]	; (800487c <vPortValidateInterruptPriority+0x6c>)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <vPortValidateInterruptPriority+0x70>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	7afa      	ldrb	r2, [r7, #11]
 8004832:	429a      	cmp	r2, r3
 8004834:	d20a      	bcs.n	800484c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	607b      	str	r3, [r7, #4]
}
 8004848:	bf00      	nop
 800484a:	e7fe      	b.n	800484a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800484c:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <vPortValidateInterruptPriority+0x74>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <vPortValidateInterruptPriority+0x78>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d90a      	bls.n	8004872 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	603b      	str	r3, [r7, #0]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <vPortValidateInterruptPriority+0x60>
	}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr
 800487c:	e000e3f0 	.word	0xe000e3f0
 8004880:	20002684 	.word	0x20002684
 8004884:	e000ed0c 	.word	0xe000ed0c
 8004888:	20002688 	.word	0x20002688

0800488c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	; 0x28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004894:	2300      	movs	r3, #0
 8004896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004898:	f7fe fd7c 	bl	8003394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800489c:	4b58      	ldr	r3, [pc, #352]	; (8004a00 <pvPortMalloc+0x174>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048a4:	f000 f910 	bl	8004ac8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048a8:	4b56      	ldr	r3, [pc, #344]	; (8004a04 <pvPortMalloc+0x178>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 808e 	bne.w	80049d2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01d      	beq.n	80048f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048bc:	2208      	movs	r2, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4413      	add	r3, r2
 80048c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d014      	beq.n	80048f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f023 0307 	bic.w	r3, r3, #7
 80048d4:	3308      	adds	r3, #8
 80048d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <pvPortMalloc+0x6c>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	617b      	str	r3, [r7, #20]
}
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d069      	beq.n	80049d2 <pvPortMalloc+0x146>
 80048fe:	4b42      	ldr	r3, [pc, #264]	; (8004a08 <pvPortMalloc+0x17c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d864      	bhi.n	80049d2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004908:	4b40      	ldr	r3, [pc, #256]	; (8004a0c <pvPortMalloc+0x180>)
 800490a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800490c:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <pvPortMalloc+0x180>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004912:	e004      	b.n	800491e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d903      	bls.n	8004930 <pvPortMalloc+0xa4>
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f1      	bne.n	8004914 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004930:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <pvPortMalloc+0x174>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004936:	429a      	cmp	r2, r3
 8004938:	d04b      	beq.n	80049d2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2208      	movs	r2, #8
 8004940:	4413      	add	r3, r2
 8004942:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	1ad2      	subs	r2, r2, r3
 8004954:	2308      	movs	r3, #8
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	429a      	cmp	r2, r3
 800495a:	d91f      	bls.n	800499c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800495c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4413      	add	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <pvPortMalloc+0xf8>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	613b      	str	r3, [r7, #16]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004996:	69b8      	ldr	r0, [r7, #24]
 8004998:	f000 f8f8 	bl	8004b8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800499c:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <pvPortMalloc+0x17c>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	4a18      	ldr	r2, [pc, #96]	; (8004a08 <pvPortMalloc+0x17c>)
 80049a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049aa:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <pvPortMalloc+0x17c>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b18      	ldr	r3, [pc, #96]	; (8004a10 <pvPortMalloc+0x184>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d203      	bcs.n	80049be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <pvPortMalloc+0x17c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <pvPortMalloc+0x184>)
 80049bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <pvPortMalloc+0x178>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049d2:	f7fe fced 	bl	80033b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <pvPortMalloc+0x16a>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	60fb      	str	r3, [r7, #12]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <pvPortMalloc+0x168>
	return pvReturn;
 80049f6:	69fb      	ldr	r3, [r7, #28]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3728      	adds	r7, #40	; 0x28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20003294 	.word	0x20003294
 8004a04:	200032a0 	.word	0x200032a0
 8004a08:	20003298 	.word	0x20003298
 8004a0c:	2000328c 	.word	0x2000328c
 8004a10:	2000329c 	.word	0x2000329c

08004a14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d048      	beq.n	8004ab8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a26:	2308      	movs	r3, #8
 8004a28:	425b      	negs	r3, r3
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <vPortFree+0xac>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <vPortFree+0x44>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	60fb      	str	r3, [r7, #12]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <vPortFree+0x62>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60bb      	str	r3, [r7, #8]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <vPortFree+0xac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d019      	beq.n	8004ab8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d115      	bne.n	8004ab8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <vPortFree+0xac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	43db      	mvns	r3, r3
 8004a96:	401a      	ands	r2, r3
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a9c:	f7fe fc7a 	bl	8003394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <vPortFree+0xb0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	4a06      	ldr	r2, [pc, #24]	; (8004ac4 <vPortFree+0xb0>)
 8004aac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aae:	6938      	ldr	r0, [r7, #16]
 8004ab0:	f000 f86c 	bl	8004b8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ab4:	f7fe fc7c 	bl	80033b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ab8:	bf00      	nop
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200032a0 	.word	0x200032a0
 8004ac4:	20003298 	.word	0x20003298

08004ac8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ace:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ad2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <prvHeapInit+0xac>)
 8004ad6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00c      	beq.n	8004afc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3307      	adds	r3, #7
 8004ae6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0307 	bic.w	r3, r3, #7
 8004aee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <prvHeapInit+0xac>)
 8004af8:	4413      	add	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b00:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <prvHeapInit+0xb0>)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b06:	4b1c      	ldr	r3, [pc, #112]	; (8004b78 <prvHeapInit+0xb0>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4413      	add	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b14:	2208      	movs	r2, #8
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0307 	bic.w	r3, r3, #7
 8004b22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a15      	ldr	r2, [pc, #84]	; (8004b7c <prvHeapInit+0xb4>)
 8004b28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b2a:	4b14      	ldr	r3, [pc, #80]	; (8004b7c <prvHeapInit+0xb4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <prvHeapInit+0xb4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	1ad2      	subs	r2, r2, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <prvHeapInit+0xb4>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a0a      	ldr	r2, [pc, #40]	; (8004b80 <prvHeapInit+0xb8>)
 8004b56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <prvHeapInit+0xbc>)
 8004b5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <prvHeapInit+0xc0>)
 8004b62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b66:	601a      	str	r2, [r3, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000268c 	.word	0x2000268c
 8004b78:	2000328c 	.word	0x2000328c
 8004b7c:	20003294 	.word	0x20003294
 8004b80:	2000329c 	.word	0x2000329c
 8004b84:	20003298 	.word	0x20003298
 8004b88:	200032a0 	.word	0x200032a0

08004b8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <prvInsertBlockIntoFreeList+0xa8>)
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e002      	b.n	8004ba0 <prvInsertBlockIntoFreeList+0x14>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d8f7      	bhi.n	8004b9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d108      	bne.n	8004bce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	441a      	add	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	441a      	add	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d118      	bne.n	8004c14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <prvInsertBlockIntoFreeList+0xac>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d00d      	beq.n	8004c0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	441a      	add	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e008      	b.n	8004c1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <prvInsertBlockIntoFreeList+0xac>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	e003      	b.n	8004c1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d002      	beq.n	8004c2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	2000328c 	.word	0x2000328c
 8004c38:	20003294 	.word	0x20003294

08004c3c <memset>:
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4402      	add	r2, r0
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d100      	bne.n	8004c46 <memset+0xa>
 8004c44:	4770      	bx	lr
 8004c46:	f803 1b01 	strb.w	r1, [r3], #1
 8004c4a:	e7f9      	b.n	8004c40 <memset+0x4>

08004c4c <__libc_init_array>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	2600      	movs	r6, #0
 8004c50:	4d0c      	ldr	r5, [pc, #48]	; (8004c84 <__libc_init_array+0x38>)
 8004c52:	4c0d      	ldr	r4, [pc, #52]	; (8004c88 <__libc_init_array+0x3c>)
 8004c54:	1b64      	subs	r4, r4, r5
 8004c56:	10a4      	asrs	r4, r4, #2
 8004c58:	42a6      	cmp	r6, r4
 8004c5a:	d109      	bne.n	8004c70 <__libc_init_array+0x24>
 8004c5c:	f000 f828 	bl	8004cb0 <_init>
 8004c60:	2600      	movs	r6, #0
 8004c62:	4d0a      	ldr	r5, [pc, #40]	; (8004c8c <__libc_init_array+0x40>)
 8004c64:	4c0a      	ldr	r4, [pc, #40]	; (8004c90 <__libc_init_array+0x44>)
 8004c66:	1b64      	subs	r4, r4, r5
 8004c68:	10a4      	asrs	r4, r4, #2
 8004c6a:	42a6      	cmp	r6, r4
 8004c6c:	d105      	bne.n	8004c7a <__libc_init_array+0x2e>
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c74:	4798      	blx	r3
 8004c76:	3601      	adds	r6, #1
 8004c78:	e7ee      	b.n	8004c58 <__libc_init_array+0xc>
 8004c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7e:	4798      	blx	r3
 8004c80:	3601      	adds	r6, #1
 8004c82:	e7f2      	b.n	8004c6a <__libc_init_array+0x1e>
 8004c84:	08004ff8 	.word	0x08004ff8
 8004c88:	08004ff8 	.word	0x08004ff8
 8004c8c:	08004ff8 	.word	0x08004ff8
 8004c90:	08004ffc 	.word	0x08004ffc

08004c94 <memcpy>:
 8004c94:	440a      	add	r2, r1
 8004c96:	4291      	cmp	r1, r2
 8004c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004c9c:	d100      	bne.n	8004ca0 <memcpy+0xc>
 8004c9e:	4770      	bx	lr
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca6:	4291      	cmp	r1, r2
 8004ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cac:	d1f9      	bne.n	8004ca2 <memcpy+0xe>
 8004cae:	bd10      	pop	{r4, pc}

08004cb0 <_init>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr

08004cbc <_fini>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr
