
stm32_FSM_FreeRtos_Event_State.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e60  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005238  08005238  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005238  08005238  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005238  08005238  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035b4  20000068  080052a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000361c  080052a8  0002361c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001400a  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c8f  00000000  00000000  000340de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00036d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d5b  00000000  00000000  00037ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002797  00000000  00000000  00038c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011aa5  00000000  00000000  0003b3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091af2  00000000  00000000  0004ce57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b2c  00000000  00000000  000de94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e3478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f58 	.word	0x08004f58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08004f58 	.word	0x08004f58

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fd89 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f8cd 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f907 	bl	8000370 <MX_GPIO_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000162:	f001 fec1 	bl	8001ee8 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBlinkDelay */
  TimerBlinkDelayHandle = osTimerNew(CallbackTimerBlinkDelay, osTimerOnce, NULL, &TimerBlinkDelay_attributes);
 8000166:	4b3e      	ldr	r3, [pc, #248]	; (8000260 <main+0x110>)
 8000168:	2200      	movs	r2, #0
 800016a:	2100      	movs	r1, #0
 800016c:	483d      	ldr	r0, [pc, #244]	; (8000264 <main+0x114>)
 800016e:	f002 f80f 	bl	8002190 <osTimerNew>
 8000172:	4603      	mov	r3, r0
 8000174:	4a3c      	ldr	r2, [pc, #240]	; (8000268 <main+0x118>)
 8000176:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue0 */
  myQueue0Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue0_attributes);
 8000178:	4a3c      	ldr	r2, [pc, #240]	; (800026c <main+0x11c>)
 800017a:	2102      	movs	r1, #2
 800017c:	2004      	movs	r0, #4
 800017e:	f002 f8cb 	bl	8002318 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a3a      	ldr	r2, [pc, #232]	; (8000270 <main+0x120>)
 8000186:	6013      	str	r3, [r2, #0]

  /* creation of myQueue1 */
  myQueue1Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue1_attributes);
 8000188:	4a3a      	ldr	r2, [pc, #232]	; (8000274 <main+0x124>)
 800018a:	2102      	movs	r1, #2
 800018c:	2004      	movs	r0, #4
 800018e:	f002 f8c3 	bl	8002318 <osMessageQueueNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a38      	ldr	r2, [pc, #224]	; (8000278 <main+0x128>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of myQueue2 */
  myQueue2Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue2_attributes);
 8000198:	4a38      	ldr	r2, [pc, #224]	; (800027c <main+0x12c>)
 800019a:	2102      	movs	r1, #2
 800019c:	2004      	movs	r0, #4
 800019e:	f002 f8bb 	bl	8002318 <osMessageQueueNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a36      	ldr	r2, [pc, #216]	; (8000280 <main+0x130>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue3 */
  myQueue3Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue3_attributes);
 80001a8:	4a36      	ldr	r2, [pc, #216]	; (8000284 <main+0x134>)
 80001aa:	2102      	movs	r1, #2
 80001ac:	2004      	movs	r0, #4
 80001ae:	f002 f8b3 	bl	8002318 <osMessageQueueNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a34      	ldr	r2, [pc, #208]	; (8000288 <main+0x138>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue4 */
  myQueue4Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue4_attributes);
 80001b8:	4a34      	ldr	r2, [pc, #208]	; (800028c <main+0x13c>)
 80001ba:	2102      	movs	r1, #2
 80001bc:	2004      	movs	r0, #4
 80001be:	f002 f8ab 	bl	8002318 <osMessageQueueNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a32      	ldr	r2, [pc, #200]	; (8000290 <main+0x140>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue5 */
  myQueue5Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue5_attributes);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <main+0x144>)
 80001ca:	2102      	movs	r1, #2
 80001cc:	2004      	movs	r0, #4
 80001ce:	f002 f8a3 	bl	8002318 <osMessageQueueNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a30      	ldr	r2, [pc, #192]	; (8000298 <main+0x148>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue6 */
  myQueue6Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue6_attributes);
 80001d8:	4a30      	ldr	r2, [pc, #192]	; (800029c <main+0x14c>)
 80001da:	2102      	movs	r1, #2
 80001dc:	2004      	movs	r0, #4
 80001de:	f002 f89b 	bl	8002318 <osMessageQueueNew>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a2e      	ldr	r2, [pc, #184]	; (80002a0 <main+0x150>)
 80001e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskBlinkLong */
  TaskBlinkLongHandle = osThreadNew(fTaskBlinkLong, NULL, &TaskBlinkLong_attributes);
 80001e8:	4a2e      	ldr	r2, [pc, #184]	; (80002a4 <main+0x154>)
 80001ea:	2100      	movs	r1, #0
 80001ec:	482e      	ldr	r0, [pc, #184]	; (80002a8 <main+0x158>)
 80001ee:	f001 fee1 	bl	8001fb4 <osThreadNew>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a2d      	ldr	r2, [pc, #180]	; (80002ac <main+0x15c>)
 80001f6:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlinkShort */
  TaskBlinkShortHandle = osThreadNew(fTaskBlinkShort, NULL, &TaskBlinkShort_attributes);
 80001f8:	4a2d      	ldr	r2, [pc, #180]	; (80002b0 <main+0x160>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	482d      	ldr	r0, [pc, #180]	; (80002b4 <main+0x164>)
 80001fe:	f001 fed9 	bl	8001fb4 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a2c      	ldr	r2, [pc, #176]	; (80002b8 <main+0x168>)
 8000206:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlinkReal */
  TaskBlinkRealHandle = osThreadNew(fTaskBlinkReal, NULL, &TaskBlinkReal_attributes);
 8000208:	4a2c      	ldr	r2, [pc, #176]	; (80002bc <main+0x16c>)
 800020a:	2100      	movs	r1, #0
 800020c:	482c      	ldr	r0, [pc, #176]	; (80002c0 <main+0x170>)
 800020e:	f001 fed1 	bl	8001fb4 <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a2b      	ldr	r2, [pc, #172]	; (80002c4 <main+0x174>)
 8000216:	6013      	str	r3, [r2, #0]

  /* creation of TaskStart */
  TaskStartHandle = osThreadNew(fTaskStart, NULL, &TaskStart_attributes);
 8000218:	4a2b      	ldr	r2, [pc, #172]	; (80002c8 <main+0x178>)
 800021a:	2100      	movs	r1, #0
 800021c:	482b      	ldr	r0, [pc, #172]	; (80002cc <main+0x17c>)
 800021e:	f001 fec9 	bl	8001fb4 <osThreadNew>
 8000222:	4603      	mov	r3, r0
 8000224:	4a2a      	ldr	r2, [pc, #168]	; (80002d0 <main+0x180>)
 8000226:	6013      	str	r3, [r2, #0]

  /* creation of TaskTimerEvent */
  TaskTimerEventHandle = osThreadNew(fTaskTimerEvent, NULL, &TaskTimerEvent_attributes);
 8000228:	4a2a      	ldr	r2, [pc, #168]	; (80002d4 <main+0x184>)
 800022a:	2100      	movs	r1, #0
 800022c:	482a      	ldr	r0, [pc, #168]	; (80002d8 <main+0x188>)
 800022e:	f001 fec1 	bl	8001fb4 <osThreadNew>
 8000232:	4603      	mov	r3, r0
 8000234:	4a29      	ldr	r2, [pc, #164]	; (80002dc <main+0x18c>)
 8000236:	6013      	str	r3, [r2, #0]

  /* creation of TaskStartFSM1 */
  TaskStartFSM1Handle = osThreadNew(fTaskStartFSM1, NULL, &TaskStartFSM1_attributes);
 8000238:	4a29      	ldr	r2, [pc, #164]	; (80002e0 <main+0x190>)
 800023a:	2100      	movs	r1, #0
 800023c:	4829      	ldr	r0, [pc, #164]	; (80002e4 <main+0x194>)
 800023e:	f001 feb9 	bl	8001fb4 <osThreadNew>
 8000242:	4603      	mov	r3, r0
 8000244:	4a28      	ldr	r2, [pc, #160]	; (80002e8 <main+0x198>)
 8000246:	6013      	str	r3, [r2, #0]

  /* creation of TaskStartFSM2 */
  TaskStartFSM2Handle = osThreadNew(fTaskStartFSM2, NULL, &TaskStartFSM2_attributes);
 8000248:	4a28      	ldr	r2, [pc, #160]	; (80002ec <main+0x19c>)
 800024a:	2100      	movs	r1, #0
 800024c:	4828      	ldr	r0, [pc, #160]	; (80002f0 <main+0x1a0>)
 800024e:	f001 feb1 	bl	8001fb4 <osThreadNew>
 8000252:	4603      	mov	r3, r0
 8000254:	4a27      	ldr	r2, [pc, #156]	; (80002f4 <main+0x1a4>)
 8000256:	6013      	str	r3, [r2, #0]
  int8_t transitionTable[NUM_STATES][NUM_EVENTS];
  //initializeTransitionTable((int8_t **)transitionTable, NUM_STATES, NUM_EVENTS);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000258:	f001 fe78 	bl	8001f4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025c:	e7fe      	b.n	800025c <main+0x10c>
 800025e:	bf00      	nop
 8000260:	080051fc 	.word	0x080051fc
 8000264:	08000a39 	.word	0x08000a39
 8000268:	20001a1c 	.word	0x20001a1c
 800026c:	08005154 	.word	0x08005154
 8000270:	20001798 	.word	0x20001798
 8000274:	0800516c 	.word	0x0800516c
 8000278:	200017f4 	.word	0x200017f4
 800027c:	08005184 	.word	0x08005184
 8000280:	20001850 	.word	0x20001850
 8000284:	0800519c 	.word	0x0800519c
 8000288:	200018ac 	.word	0x200018ac
 800028c:	080051b4 	.word	0x080051b4
 8000290:	20001908 	.word	0x20001908
 8000294:	080051cc 	.word	0x080051cc
 8000298:	20001964 	.word	0x20001964
 800029c:	080051e4 	.word	0x080051e4
 80002a0:	200019c0 	.word	0x200019c0
 80002a4:	08005058 	.word	0x08005058
 80002a8:	08000775 	.word	0x08000775
 80002ac:	20000084 	.word	0x20000084
 80002b0:	0800507c 	.word	0x0800507c
 80002b4:	080007d9 	.word	0x080007d9
 80002b8:	200003d0 	.word	0x200003d0
 80002bc:	080050a0 	.word	0x080050a0
 80002c0:	08000841 	.word	0x08000841
 80002c4:	2000071c 	.word	0x2000071c
 80002c8:	080050c4 	.word	0x080050c4
 80002cc:	080008a1 	.word	0x080008a1
 80002d0:	20000a68 	.word	0x20000a68
 80002d4:	080050e8 	.word	0x080050e8
 80002d8:	080009a1 	.word	0x080009a1
 80002dc:	20000db4 	.word	0x20000db4
 80002e0:	0800510c 	.word	0x0800510c
 80002e4:	080009ed 	.word	0x080009ed
 80002e8:	20001100 	.word	0x20001100
 80002ec:	08005130 	.word	0x08005130
 80002f0:	08000a13 	.word	0x08000a13
 80002f4:	2000144c 	.word	0x2000144c

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b090      	sub	sp, #64	; 0x40
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2228      	movs	r2, #40	; 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f004 fd40 	bl	8004d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031a:	2302      	movs	r3, #2
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000322:	2310      	movs	r3, #16
 8000324:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000326:	2300      	movs	r3, #0
 8000328:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	4618      	mov	r0, r3
 8000330:	f000 ff64 	bl	80011fc <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800033a:	f000 fb9b 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f001 f9d2 	bl	8001700 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000362:	f000 fb87 	bl	8000a74 <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3740      	adds	r7, #64	; 0x40
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <MX_GPIO_Init+0x90>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a1d      	ldr	r2, [pc, #116]	; (8000400 <MX_GPIO_Init+0x90>)
 800038a:	f043 0310 	orr.w	r3, r3, #16
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <MX_GPIO_Init+0x90>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0310 	and.w	r3, r3, #16
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_GPIO_Init+0x90>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a17      	ldr	r2, [pc, #92]	; (8000400 <MX_GPIO_Init+0x90>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_GPIO_Init+0x90>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_GPIO_Init+0x90>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a11      	ldr	r2, [pc, #68]	; (8000400 <MX_GPIO_Init+0x90>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_GPIO_Init+0x90>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	480c      	ldr	r0, [pc, #48]	; (8000404 <MX_GPIO_Init+0x94>)
 80003d4:	f000 fee0 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	4619      	mov	r1, r3
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <MX_GPIO_Init+0x94>)
 80003f2:	f000 fd4d 	bl	8000e90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	3720      	adds	r7, #32
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40011000 	.word	0x40011000

08000408 <initializeTransitionEvent>:

/* USER CODE BEGIN 4 */
void initializeTransitionEvent(int8_t table[][NUM_EVENTS], uint8_t num_states, uint8_t num_events) {
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	70fb      	strb	r3, [r7, #3]
 8000414:	4613      	mov	r3, r2
 8000416:	70bb      	strb	r3, [r7, #2]
    // Заполнение таблицы состояний значением -1
    for (uint8_t i = 0; i < num_states; ++i) {
 8000418:	2300      	movs	r3, #0
 800041a:	73fb      	strb	r3, [r7, #15]
 800041c:	e012      	b.n	8000444 <initializeTransitionEvent+0x3c>
        for (uint8_t j = 0; j < num_events; ++j) {
 800041e:	2300      	movs	r3, #0
 8000420:	73bb      	strb	r3, [r7, #14]
 8000422:	e008      	b.n	8000436 <initializeTransitionEvent+0x2e>
            table[i][j] = -1;
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	441a      	add	r2, r3
 800042a:	7bbb      	ldrb	r3, [r7, #14]
 800042c:	21ff      	movs	r1, #255	; 0xff
 800042e:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < num_events; ++j) {
 8000430:	7bbb      	ldrb	r3, [r7, #14]
 8000432:	3301      	adds	r3, #1
 8000434:	73bb      	strb	r3, [r7, #14]
 8000436:	7bba      	ldrb	r2, [r7, #14]
 8000438:	78bb      	ldrb	r3, [r7, #2]
 800043a:	429a      	cmp	r2, r3
 800043c:	d3f2      	bcc.n	8000424 <initializeTransitionEvent+0x1c>
    for (uint8_t i = 0; i < num_states; ++i) {
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	3301      	adds	r3, #1
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	7bfa      	ldrb	r2, [r7, #15]
 8000446:	78fb      	ldrb	r3, [r7, #3]
 8000448:	429a      	cmp	r2, r3
 800044a:	d3e8      	bcc.n	800041e <initializeTransitionEvent+0x16>
        }
    }
}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <initializeTransitionFork>:

void initializeTransitionFork(int8_t table[][NUM_STATES], uint8_t num_states, uint8_t num_new_states) {
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
 8000464:	4613      	mov	r3, r2
 8000466:	70bb      	strb	r3, [r7, #2]
    // Заполнение таблицы состояний значением -1
    for (uint8_t i = 0; i < num_states; ++i) {
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	e015      	b.n	800049a <initializeTransitionFork+0x42>
        for (uint8_t j = 0; j < num_new_states; ++j) {
 800046e:	2300      	movs	r3, #0
 8000470:	73bb      	strb	r3, [r7, #14]
 8000472:	e00b      	b.n	800048c <initializeTransitionFork+0x34>
            table[i][j] = -1;
 8000474:	7bfa      	ldrb	r2, [r7, #15]
 8000476:	4613      	mov	r3, r2
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	441a      	add	r2, r3
 8000480:	7bbb      	ldrb	r3, [r7, #14]
 8000482:	21ff      	movs	r1, #255	; 0xff
 8000484:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < num_new_states; ++j) {
 8000486:	7bbb      	ldrb	r3, [r7, #14]
 8000488:	3301      	adds	r3, #1
 800048a:	73bb      	strb	r3, [r7, #14]
 800048c:	7bba      	ldrb	r2, [r7, #14]
 800048e:	78bb      	ldrb	r3, [r7, #2]
 8000490:	429a      	cmp	r2, r3
 8000492:	d3ef      	bcc.n	8000474 <initializeTransitionFork+0x1c>
    for (uint8_t i = 0; i < num_states; ++i) {
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	3301      	adds	r3, #1
 8000498:	73fb      	strb	r3, [r7, #15]
 800049a:	7bfa      	ldrb	r2, [r7, #15]
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d3e5      	bcc.n	800046e <initializeTransitionFork+0x16>
        }
    }
}
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <initializeTransitionEndState>:

void initializeTransitionEndState(int8_t table[], uint8_t num_states) {
 80004ae:	b480      	push	{r7}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
 80004b6:	460b      	mov	r3, r1
 80004b8:	70fb      	strb	r3, [r7, #3]
    // Заполнение таблицы окончаний состояний значением -1
    for (uint8_t i = 0; i < num_states; ++i) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	73fb      	strb	r3, [r7, #15]
 80004be:	e007      	b.n	80004d0 <initializeTransitionEndState+0x22>
        table[i] = -1;
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	22ff      	movs	r2, #255	; 0xff
 80004c8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_states; ++i) {
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73fb      	strb	r3, [r7, #15]
 80004d0:	7bfa      	ldrb	r2, [r7, #15]
 80004d2:	78fb      	ldrb	r3, [r7, #3]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d3f3      	bcc.n	80004c0 <initializeTransitionEndState+0x12>
    }
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <addToTransitionFork>:
void addToTransitionFork(State_t initial_state, State_t new_state) {
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	460a      	mov	r2, r1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	4613      	mov	r3, r2
 80004f2:	71bb      	strb	r3, [r7, #6]
    // Проверяем, что переданные состояния валидны
    if (initial_state >= NUM_STATES || new_state >= NUM_STATES) {
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	2b06      	cmp	r3, #6
 80004f8:	d80d      	bhi.n	8000516 <addToTransitionFork+0x32>
 80004fa:	79bb      	ldrb	r3, [r7, #6]
 80004fc:	2b06      	cmp	r3, #6
 80004fe:	d80a      	bhi.n	8000516 <addToTransitionFork+0x32>
        // Выводим сообщение об ошибке или принимаем другие меры
        return;
    }

    // Заполняем массив transitionForkState
    transitionForkState[initial_state][new_state] = 1; // Здесь 1 может быть любым другим значением в зависимости от вашей логики
 8000500:	79fa      	ldrb	r2, [r7, #7]
 8000502:	79b9      	ldrb	r1, [r7, #6]
 8000504:	4806      	ldr	r0, [pc, #24]	; (8000520 <addToTransitionFork+0x3c>)
 8000506:	4613      	mov	r3, r2
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	4403      	add	r3, r0
 800050e:	440b      	add	r3, r1
 8000510:	2201      	movs	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
 8000514:	e000      	b.n	8000518 <addToTransitionFork+0x34>
        return;
 8000516:	bf00      	nop
}
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	20001a60 	.word	0x20001a60

08000524 <addToTransitionEvent>:

void addToTransitionEvent(State_t initial_state, State_t new_state, Event_t event) {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	460b      	mov	r3, r1
 8000530:	71bb      	strb	r3, [r7, #6]
 8000532:	4613      	mov	r3, r2
 8000534:	717b      	strb	r3, [r7, #5]
    // Проверяем, что переданные состояния и событие валидны
    if (initial_state >= NUM_STATES || new_state >= NUM_STATES || event >= NUM_EVENTS) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b06      	cmp	r3, #6
 800053a:	d80f      	bhi.n	800055c <addToTransitionEvent+0x38>
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	2b06      	cmp	r3, #6
 8000540:	d80c      	bhi.n	800055c <addToTransitionEvent+0x38>
 8000542:	797b      	ldrb	r3, [r7, #5]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d109      	bne.n	800055c <addToTransitionEvent+0x38>
        // Выводим сообщение об ошибке или принимаем другие меры
        return;
    }

    // Заполняем таблицу переходов
    transitionTable[initial_state][event] = new_state;
 8000548:	79fa      	ldrb	r2, [r7, #7]
 800054a:	797b      	ldrb	r3, [r7, #5]
 800054c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8000550:	4905      	ldr	r1, [pc, #20]	; (8000568 <addToTransitionEvent+0x44>)
 8000552:	440a      	add	r2, r1
 8000554:	4413      	add	r3, r2
 8000556:	4602      	mov	r2, r0
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	e000      	b.n	800055e <addToTransitionEvent+0x3a>
        return;
 800055c:	bf00      	nop
}
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20001a50 	.word	0x20001a50

0800056c <addToTransitionEndState>:



void addToTransitionEndState(State_t initial_state, State_t new_state)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
	// Проверяем, что переданные состояния и событие валидны
	    if (initial_state >= NUM_STATES || new_state >= NUM_STATES) {
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b06      	cmp	r3, #6
 8000580:	d808      	bhi.n	8000594 <addToTransitionEndState+0x28>
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	2b06      	cmp	r3, #6
 8000586:	d805      	bhi.n	8000594 <addToTransitionEndState+0x28>
	        // Выводим сообщение об ошибке или принимаем другие меры
	        return;
	    }
	    // Заполняем таблицу переходов
	    transitionEndState[initial_state] = new_state;
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <addToTransitionEndState+0x34>)
 8000590:	54d1      	strb	r1, [r2, r3]
 8000592:	e000      	b.n	8000596 <addToTransitionEndState+0x2a>
	        return;
 8000594:	bf00      	nop
}
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20001a58 	.word	0x20001a58

080005a4 <handleTransition>:

State_t handleTransition(Event_t event, State_t currentState) {
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	71bb      	strb	r3, [r7, #6]
    // Проверяем, есть ли новое состояние для данного события
    if (transitionTable[currentState][event] != -1) {
 80005b4:	79ba      	ldrb	r2, [r7, #6]
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	490b      	ldr	r1, [pc, #44]	; (80005e8 <handleTransition+0x44>)
 80005ba:	440a      	add	r2, r1
 80005bc:	4413      	add	r3, r2
 80005be:	f993 3000 	ldrsb.w	r3, [r3]
 80005c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c6:	d009      	beq.n	80005dc <handleTransition+0x38>
        // Выполняем переход к новому состоянию
        //*currentState = transitionTable[*currentState][event];
    	State_t newState = transitionTable[currentState][event];
 80005c8:	79ba      	ldrb	r2, [r7, #6]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4906      	ldr	r1, [pc, #24]	; (80005e8 <handleTransition+0x44>)
 80005ce:	440a      	add	r2, r1
 80005d0:	4413      	add	r3, r2
 80005d2:	f993 3000 	ldrsb.w	r3, [r3]
 80005d6:	73fb      	strb	r3, [r7, #15]
    	//xQueueSend(QueueEvent, &newState, portMAX_DELAY);
    	return newState;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	e000      	b.n	80005de <handleTransition+0x3a>
        // processState(*currentState);
    } else {
        // Если не найдено нового состояния для события, то игнорируем его
        // и передаем его более низкоприоритетной задаче
        //sendEventToLowPriorityTask(event);
    	return -1;
 80005dc:	23ff      	movs	r3, #255	; 0xff
    }
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20001a50 	.word	0x20001a50

080005ec <createStateQueueMapping>:

// Функция для создания ассоциативного значения (связи) между состоянием и очередью
void createStateQueueMapping(State_t state, osMessageQueueId_t queueHandle) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
    //StateQueueMapping_t mapping = {state, queueHandle};
    stateQueueMappings[state] = queueHandle;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	4904      	ldr	r1, [pc, #16]	; (800060c <createStateQueueMapping+0x20>)
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	20001a94 	.word	0x20001a94

08000610 <getQueueForState>:

// Функция для получения очереди по состоянию
osMessageQueueId_t getQueueForState(State_t state) {
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
    return stateQueueMappings[state];
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <getQueueForState+0x1c>)
 800061e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	20001a94 	.word	0x20001a94

08000630 <MessageQueueState>:

void MessageQueueState(State_t state) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
	xQueueSend(getQueueForState(state), &state, pdMS_TO_TICKS(DELAY_QUEUE));
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffe7 	bl	8000610 <getQueueForState>
 8000642:	1df9      	adds	r1, r7, #7
 8000644:	2300      	movs	r3, #0
 8000646:	f643 2298 	movw	r2, #15000	; 0x3a98
 800064a:	f002 f90d 	bl	8002868 <xQueueGenericSend>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <MessageQueueEvent>:

void MessageQueueEvent(State_t state, Event_t event) {
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	4603      	mov	r3, r0
 800065e:	460a      	mov	r2, r1
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	4613      	mov	r3, r2
 8000664:	71bb      	strb	r3, [r7, #6]
	xQueueSend(getQueueForState(state), &event, pdMS_TO_TICKS(DELAY_QUEUE));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffd1 	bl	8000610 <getQueueForState>
 800066e:	1db9      	adds	r1, r7, #6
 8000670:	2300      	movs	r3, #0
 8000672:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000676:	f002 f8f7 	bl	8002868 <xQueueGenericSend>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <sendToTransitionFork>:

void sendToTransitionFork(State_t currentState) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
    // Проверяем, что текущее состояние валидно
    if (currentState >= NUM_STATES) {
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b06      	cmp	r3, #6
 8000692:	d819      	bhi.n	80006c8 <sendToTransitionFork+0x44>
        // Выводим сообщение об ошибке или принимаем другие меры
        return;
    }

    // Проходим по всем возможным состояниям
    for (State_t new_state = 0; new_state < NUM_STATES; ++new_state) {
 8000694:	2300      	movs	r3, #0
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	e012      	b.n	80006c0 <sendToTransitionFork+0x3c>
        // Проверяем, есть ли переход от текущего состояния к новому состоянию
        if (transitionForkState[currentState][new_state] == 1) {
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	7bf9      	ldrb	r1, [r7, #15]
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <sendToTransitionFork+0x4c>)
 80006a0:	4613      	mov	r3, r2
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	4403      	add	r3, r0
 80006a8:	440b      	add	r3, r1
 80006aa:	f993 3000 	ldrsb.w	r3, [r3]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d103      	bne.n	80006ba <sendToTransitionFork+0x36>
            // Отправляем сообщение в очередь соответствующего нового состояния
        	MessageQueueState(new_state);
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffbb 	bl	8000630 <MessageQueueState>
    for (State_t new_state = 0; new_state < NUM_STATES; ++new_state) {
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	3301      	adds	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d9e9      	bls.n	800069a <sendToTransitionFork+0x16>
 80006c6:	e000      	b.n	80006ca <sendToTransitionFork+0x46>
        return;
 80006c8:	bf00      	nop
            //xQueueSend(getQueueForState(new_state), &new_state, pdMS_TO_TICKS(DELAY_QUEUE));
        }
    }
}
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20001a60 	.word	0x20001a60

080006d4 <sendToTransitionEvent>:

void sendToTransitionEvent(State_t currentState, Event_t event)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
	MessageQueueState(handleTransition(event, currentState));
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff5a 	bl	80005a4 <handleTransition>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff9c 	bl	8000630 <MessageQueueState>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <sendToTransitionEndState>:
void sendToTransitionEndState(State_t currentState)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	MessageQueueState(transitionEndState[currentState]);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <sendToTransitionEndState+0x20>)
 800070e:	56d3      	ldrsb	r3, [r2, r3]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff8c 	bl	8000630 <MessageQueueState>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20001a58 	.word	0x20001a58

08000724 <waitForOwnState>:

void waitForOwnState(State_t* currentState) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    // Ожидаем получение текущего состояния из очереди
    xQueueReceive(getQueueForState(*currentState), &currentState, portMAX_DELAY);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff6d 	bl	8000610 <getQueueForState>
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800073c:	4619      	mov	r1, r3
 800073e:	f002 fa29 	bl	8002b94 <xQueueReceive>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <waitForOwnEvent>:


void waitForOwnEvent(State_t currentState, Event_t* event) {
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	6039      	str	r1, [r7, #0]
 8000754:	71fb      	strb	r3, [r7, #7]
    // Ожидаем получение текущего состояния из очереди
    xQueueReceive(getQueueForState(currentState), event, portMAX_DELAY);
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff59 	bl	8000610 <getQueueForState>
 800075e:	4603      	mov	r3, r0
 8000760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000764:	6839      	ldr	r1, [r7, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fa14 	bl	8002b94 <xQueueReceive>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <fTaskBlinkLong>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fTaskBlinkLong */
void fTaskBlinkLong(void *argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	State_t currentState = TaskBlinkLong;
 800077c:	2300      	movs	r3, #0
 800077e:	72fb      	strb	r3, [r7, #11]
	const uint32_t xFrequency = 1000; // 1000 миллисекунд
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	617b      	str	r3, [r7, #20]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8000786:	f241 7370 	movw	r3, #6000	; 0x1770
 800078a:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  waitForOwnState(&currentState);
 800078c:	f107 030b 	add.w	r3, r7, #11
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ffc7 	bl	8000724 <waitForOwnState>

	  TickType_t xLastWakeTime = xTaskGetTickCount();
 8000796:	f002 ff49 	bl	800362c <xTaskGetTickCount>
 800079a:	4603      	mov	r3, r0
 800079c:	60fb      	str	r3, [r7, #12]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 800079e:	e007      	b.n	80007b0 <fTaskBlinkLong+0x3c>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 80007a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <fTaskBlinkLong+0x60>)
 80007a6:	f000 fd0f 	bl	80011c8 <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 80007aa:	6978      	ldr	r0, [r7, #20]
 80007ac:	f001 fcac 	bl	8002108 <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 80007b0:	f002 ff3c 	bl	800362c <xTaskGetTickCount>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d8ee      	bhi.n	80007a0 <fTaskBlinkLong+0x2c>
	  }
		sendToTransitionEndState(currentState);
 80007c2:	7afb      	ldrb	r3, [r7, #11]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff9b 	bl	8000700 <sendToTransitionEndState>
	    osDelay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f001 fc9c 	bl	8002108 <osDelay>
  {
 80007d0:	e7dc      	b.n	800078c <fTaskBlinkLong+0x18>
 80007d2:	bf00      	nop
 80007d4:	40011000 	.word	0x40011000

080007d8 <fTaskBlinkShort>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskBlinkShort */
void fTaskBlinkShort(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskBlinkShort */
	State_t currentState = TaskBlinkShort;
 80007e0:	2301      	movs	r3, #1
 80007e2:	72fb      	strb	r3, [r7, #11]
	const uint32_t xFrequency = 500; // 500 миллисекунд
 80007e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007e8:	617b      	str	r3, [r7, #20]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 80007ea:	f241 7370 	movw	r3, #6000	; 0x1770
 80007ee:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  waitForOwnState(&currentState);
 80007f0:	f107 030b 	add.w	r3, r7, #11
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff95 	bl	8000724 <waitForOwnState>
	 //xQueueReceive(stateQueueMappings[currentState], &currentState, portMAX_DELAY);

	  TickType_t xLastWakeTime = xTaskGetTickCount();
 80007fa:	f002 ff17 	bl	800362c <xTaskGetTickCount>
 80007fe:	4603      	mov	r3, r0
 8000800:	60fb      	str	r3, [r7, #12]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8000802:	e007      	b.n	8000814 <fTaskBlinkShort+0x3c>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <fTaskBlinkShort+0x60>)
 800080a:	f000 fcdd 	bl	80011c8 <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f001 fc7a 	bl	8002108 <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8000814:	f002 ff0a 	bl	800362c <xTaskGetTickCount>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	429a      	cmp	r2, r3
 8000824:	d8ee      	bhi.n	8000804 <fTaskBlinkShort+0x2c>
	  }
		sendToTransitionEndState(arrState[TaskBlinkShort]);
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <fTaskBlinkShort+0x64>)
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff68 	bl	8000700 <sendToTransitionEndState>
	    osDelay(1);
 8000830:	2001      	movs	r0, #1
 8000832:	f001 fc69 	bl	8002108 <osDelay>
  {
 8000836:	e7db      	b.n	80007f0 <fTaskBlinkShort+0x18>
 8000838:	40011000 	.word	0x40011000
 800083c:	20000000 	.word	0x20000000

08000840 <fTaskBlinkReal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskBlinkReal */
void fTaskBlinkReal(void *argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskBlinkReal */
	State_t currentState = TaskBlinkReal;
 8000848:	2302      	movs	r3, #2
 800084a:	72fb      	strb	r3, [r7, #11]
	const uint32_t xFrequency = 100; // 100 миллисекунд
 800084c:	2364      	movs	r3, #100	; 0x64
 800084e:	617b      	str	r3, [r7, #20]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(2000); // 6 секунд
 8000850:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000854:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  waitForOwnState(&currentState);
 8000856:	f107 030b 	add.w	r3, r7, #11
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff62 	bl	8000724 <waitForOwnState>

	  TickType_t xLastWakeTime = xTaskGetTickCount();
 8000860:	f002 fee4 	bl	800362c <xTaskGetTickCount>
 8000864:	4603      	mov	r3, r0
 8000866:	60fb      	str	r3, [r7, #12]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8000868:	e007      	b.n	800087a <fTaskBlinkReal+0x3a>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	480b      	ldr	r0, [pc, #44]	; (800089c <fTaskBlinkReal+0x5c>)
 8000870:	f000 fcaa 	bl	80011c8 <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8000874:	6978      	ldr	r0, [r7, #20]
 8000876:	f001 fc47 	bl	8002108 <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 800087a:	f002 fed7 	bl	800362c <xTaskGetTickCount>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d8ee      	bhi.n	800086a <fTaskBlinkReal+0x2a>
	  }
		sendToTransitionEndState(currentState);
 800088c:	7afb      	ldrb	r3, [r7, #11]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff36 	bl	8000700 <sendToTransitionEndState>
	    osDelay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f001 fc37 	bl	8002108 <osDelay>
  {
 800089a:	e7dc      	b.n	8000856 <fTaskBlinkReal+0x16>
 800089c:	40011000 	.word	0x40011000

080008a0 <fTaskStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStart */
void fTaskStart(void *argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStart */
	initializeTransitionEvent(transitionTable, NUM_STATES, NUM_EVENTS);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2107      	movs	r1, #7
 80008ac:	4832      	ldr	r0, [pc, #200]	; (8000978 <fTaskStart+0xd8>)
 80008ae:	f7ff fdab 	bl	8000408 <initializeTransitionEvent>
	initializeTransitionEndState(transitionEndState, NUM_STATES);
 80008b2:	2107      	movs	r1, #7
 80008b4:	4831      	ldr	r0, [pc, #196]	; (800097c <fTaskStart+0xdc>)
 80008b6:	f7ff fdfa 	bl	80004ae <initializeTransitionEndState>
	initializeTransitionFork(transitionForkState, NUM_STATES, NUM_STATES);
 80008ba:	2207      	movs	r2, #7
 80008bc:	2107      	movs	r1, #7
 80008be:	4830      	ldr	r0, [pc, #192]	; (8000980 <fTaskStart+0xe0>)
 80008c0:	f7ff fdca 	bl	8000458 <initializeTransitionFork>

	addToTransitionFork(TaskStart, TaskStartFSM1);
 80008c4:	2105      	movs	r1, #5
 80008c6:	2003      	movs	r0, #3
 80008c8:	f7ff fe0c 	bl	80004e4 <addToTransitionFork>
	addToTransitionFork(TaskStart, TaskStartFSM2);
 80008cc:	2106      	movs	r1, #6
 80008ce:	2003      	movs	r0, #3
 80008d0:	f7ff fe08 	bl	80004e4 <addToTransitionFork>

	addToTransitionEndState(TaskStartFSM1, TaskBlinkShort);
 80008d4:	2101      	movs	r1, #1
 80008d6:	2005      	movs	r0, #5
 80008d8:	f7ff fe48 	bl	800056c <addToTransitionEndState>
	addToTransitionEndState(TaskBlinkShort, TaskBlinkLong);
 80008dc:	2100      	movs	r1, #0
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fe44 	bl	800056c <addToTransitionEndState>
	addToTransitionEndState(TaskBlinkLong, TaskBlinkShort);
 80008e4:	2101      	movs	r1, #1
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fe40 	bl	800056c <addToTransitionEndState>
	addToTransitionEndState(TaskStartFSM2, TaskTimerEvent);
 80008ec:	2104      	movs	r1, #4
 80008ee:	2006      	movs	r0, #6
 80008f0:	f7ff fe3c 	bl	800056c <addToTransitionEndState>
	addToTransitionEndState(TaskBlinkReal, TaskTimerEvent);
 80008f4:	2104      	movs	r1, #4
 80008f6:	2002      	movs	r0, #2
 80008f8:	f7ff fe38 	bl	800056c <addToTransitionEndState>

	addToTransitionEvent(TaskTimerEvent, TaskBlinkReal, EVENT_TIMER_UPDATE);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2102      	movs	r1, #2
 8000900:	2004      	movs	r0, #4
 8000902:	f7ff fe0f 	bl	8000524 <addToTransitionEvent>

	createStateQueueMapping(TaskStart, myQueue0Handle);
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <fTaskStart+0xe4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4619      	mov	r1, r3
 800090c:	2003      	movs	r0, #3
 800090e:	f7ff fe6d 	bl	80005ec <createStateQueueMapping>
	createStateQueueMapping(TaskStartFSM1, myQueue1Handle);
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <fTaskStart+0xe8>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	2005      	movs	r0, #5
 800091a:	f7ff fe67 	bl	80005ec <createStateQueueMapping>
	createStateQueueMapping(TaskStartFSM2, myQueue2Handle);
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <fTaskStart+0xec>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4619      	mov	r1, r3
 8000924:	2006      	movs	r0, #6
 8000926:	f7ff fe61 	bl	80005ec <createStateQueueMapping>
	createStateQueueMapping(TaskBlinkShort, myQueue3Handle);
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <fTaskStart+0xf0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4619      	mov	r1, r3
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fe5b 	bl	80005ec <createStateQueueMapping>
	createStateQueueMapping(TaskBlinkLong, myQueue4Handle);
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <fTaskStart+0xf4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4619      	mov	r1, r3
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fe55 	bl	80005ec <createStateQueueMapping>
	createStateQueueMapping(TaskBlinkReal, myQueue5Handle);
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <fTaskStart+0xf8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff fe4f 	bl	80005ec <createStateQueueMapping>
	createStateQueueMapping(TaskTimerEvent, myQueue6Handle);
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <fTaskStart+0xfc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4619      	mov	r1, r3
 8000954:	2004      	movs	r0, #4
 8000956:	f7ff fe49 	bl	80005ec <createStateQueueMapping>

	State_t currentState = TaskStart;
 800095a:	2303      	movs	r3, #3
 800095c:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	sendToTransitionFork(currentState);
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe8f 	bl	8000684 <sendToTransitionFork>
	waitForOwnState(&currentState);
 8000966:	f107 030f 	add.w	r3, r7, #15
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff feda 	bl	8000724 <waitForOwnState>
	  osDelay(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f001 fbc9 	bl	8002108 <osDelay>
	sendToTransitionFork(currentState);
 8000976:	e7f2      	b.n	800095e <fTaskStart+0xbe>
 8000978:	20001a50 	.word	0x20001a50
 800097c:	20001a58 	.word	0x20001a58
 8000980:	20001a60 	.word	0x20001a60
 8000984:	20001798 	.word	0x20001798
 8000988:	200017f4 	.word	0x200017f4
 800098c:	20001850 	.word	0x20001850
 8000990:	200018ac 	.word	0x200018ac
 8000994:	20001908 	.word	0x20001908
 8000998:	20001964 	.word	0x20001964
 800099c:	200019c0 	.word	0x200019c0

080009a0 <fTaskTimerEvent>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskTimerEvent */
void fTaskTimerEvent(void *argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskTimerEvent */
	State_t currentState = TaskTimerEvent;
 80009a8:	2304      	movs	r3, #4
 80009aa:	73fb      	strb	r3, [r7, #15]
	Event_t event = NUM_EVENTS;
 80009ac:	2301      	movs	r3, #1
 80009ae:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	waitForOwnState(&currentState);
 80009b0:	f107 030f 	add.w	r3, r7, #15
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff feb5 	bl	8000724 <waitForOwnState>
	osTimerStart(TimerBlinkDelayHandle, pdMS_TO_TICKS(10000));
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <fTaskTimerEvent+0x48>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f242 7110 	movw	r1, #10000	; 0x2710
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fc68 	bl	8002298 <osTimerStart>
	waitForOwnEvent(currentState, &event);
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	f107 020e 	add.w	r2, r7, #14
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff feba 	bl	800074a <waitForOwnEvent>
	sendToTransitionEvent(TaskTimerEvent, event);
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
 80009d8:	4619      	mov	r1, r3
 80009da:	2004      	movs	r0, #4
 80009dc:	f7ff fe7a 	bl	80006d4 <sendToTransitionEvent>

    osDelay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f001 fb91 	bl	8002108 <osDelay>
	waitForOwnState(&currentState);
 80009e6:	e7e3      	b.n	80009b0 <fTaskTimerEvent+0x10>
 80009e8:	20001a1c 	.word	0x20001a1c

080009ec <fTaskStartFSM1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStartFSM1 */
void fTaskStartFSM1(void *argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStartFSM1 */
	State_t currentState = TaskStartFSM1;
 80009f4:	2305      	movs	r3, #5
 80009f6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	waitForOwnState(&currentState);
 80009f8:	f107 030f 	add.w	r3, r7, #15
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fe91 	bl	8000724 <waitForOwnState>

	sendToTransitionEndState(currentState);
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fe7b 	bl	8000700 <sendToTransitionEndState>
    osDelay(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f001 fb7c 	bl	8002108 <osDelay>
	waitForOwnState(&currentState);
 8000a10:	e7f2      	b.n	80009f8 <fTaskStartFSM1+0xc>

08000a12 <fTaskStartFSM2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStartFSM2 */
void fTaskStartFSM2(void *argument)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b084      	sub	sp, #16
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStartFSM2 */
	State_t currentState = TaskStartFSM2;
 8000a1a:	2306      	movs	r3, #6
 8000a1c:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	waitForOwnState(&currentState);
 8000a1e:	f107 030f 	add.w	r3, r7, #15
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe7e 	bl	8000724 <waitForOwnState>

	sendToTransitionEndState(currentState);
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fe68 	bl	8000700 <sendToTransitionEndState>
    osDelay(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f001 fb69 	bl	8002108 <osDelay>
	waitForOwnState(&currentState);
 8000a36:	e7f2      	b.n	8000a1e <fTaskStartFSM2+0xc>

08000a38 <CallbackTimerBlinkDelay>:
  /* USER CODE END fTaskStartFSM2 */
}

/* CallbackTimerBlinkDelay function */
void CallbackTimerBlinkDelay(void *argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBlinkDelay */
	MessageQueueEvent(TaskTimerEvent, EVENT_TIMER_UPDATE);
 8000a40:	2100      	movs	r1, #0
 8000a42:	2004      	movs	r0, #4
 8000a44:	f7ff fe07 	bl	8000656 <MessageQueueEvent>
  /* USER CODE END CallbackTimerBlinkDelay */
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a62:	f000 f919 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40012c00 	.word	0x40012c00

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_MspInit+0x68>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_MspInit+0x68>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_MspInit+0x68>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_MspInit+0x68>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_MspInit+0x68>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x68>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	210f      	movs	r1, #15
 8000aba:	f06f 0001 	mvn.w	r0, #1
 8000abe:	f000 f9bc 	bl	8000e3a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_MspInit+0x6c>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_MspInit+0x6c>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000

08000af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b06:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <HAL_InitTick+0xd0>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	4a2d      	ldr	r2, [pc, #180]	; (8000bc0 <HAL_InitTick+0xd0>)
 8000b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <HAL_InitTick+0xd0>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1e:	f107 020c 	add.w	r2, r7, #12
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 ff45 	bl	80019b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b2e:	f000 ff2f 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 8000b32:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b36:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <HAL_InitTick+0xd4>)
 8000b38:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3c:	0c9b      	lsrs	r3, r3, #18
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <HAL_InitTick+0xd8>)
 8000b44:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <HAL_InitTick+0xdc>)
 8000b46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_InitTick+0xd8>)
 8000b4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b4e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <HAL_InitTick+0xd8>)
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_InitTick+0xd8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <HAL_InitTick+0xd8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_InitTick+0xd8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b68:	4817      	ldr	r0, [pc, #92]	; (8000bc8 <HAL_InitTick+0xd8>)
 8000b6a:	f000 ff73 	bl	8001a54 <HAL_TIM_Base_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d11b      	bne.n	8000bb4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b7c:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <HAL_InitTick+0xd8>)
 8000b7e:	f000 ffc1 	bl	8001b04 <HAL_TIM_Base_Start_IT>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d111      	bne.n	8000bb4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b90:	2019      	movs	r0, #25
 8000b92:	f000 f96e 	bl	8000e72 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d808      	bhi.n	8000bae <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2019      	movs	r0, #25
 8000ba2:	f000 f94a 	bl	8000e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_InitTick+0xe0>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	e002      	b.n	8000bb4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3730      	adds	r7, #48	; 0x30
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	431bde83 	.word	0x431bde83
 8000bc8:	20001ab0 	.word	0x20001ab0
 8000bcc:	40012c00 	.word	0x40012c00
 8000bd0:	2000000c 	.word	0x2000000c

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
	...

08000c00 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM1_UP_IRQHandler+0x10>)
 8000c06:	f000 ffcf 	bl	8001ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20001ab0 	.word	0x20001ab0

08000c14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c20:	f7ff fff8 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c26:	490c      	ldr	r1, [pc, #48]	; (8000c58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c28:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c3c:	4c09      	ldr	r4, [pc, #36]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f004 f8fd 	bl	8004e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4e:	f7ff fa7f 	bl	8000150 <main>
  bx lr
 8000c52:	4770      	bx	lr
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c5c:	08005240 	.word	0x08005240
  ldr r2, =_sbss
 8000c60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c64:	2000361c 	.word	0x2000361c

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x28>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x28>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f8d1 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff ff34 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fefa 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x20>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <HAL_IncTick+0x20>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000010 	.word	0x20000010
 8000cb8:	20001af8 	.word	0x20001af8

08000cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <HAL_GetTick+0x10>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	20001af8 	.word	0x20001af8

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4906      	ldr	r1, [pc, #24]	; (8000d68 <__NVIC_EnableIRQ+0x34>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff4f 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff64 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ffb2 	bl	8000dc0 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff81 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff57 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b08b      	sub	sp, #44	; 0x2c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e169      	b.n	8001178 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8158 	bne.w	8001172 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4a9a      	ldr	r2, [pc, #616]	; (8001130 <HAL_GPIO_Init+0x2a0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d05e      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ecc:	4a98      	ldr	r2, [pc, #608]	; (8001130 <HAL_GPIO_Init+0x2a0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d875      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ed2:	4a98      	ldr	r2, [pc, #608]	; (8001134 <HAL_GPIO_Init+0x2a4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d058      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ed8:	4a96      	ldr	r2, [pc, #600]	; (8001134 <HAL_GPIO_Init+0x2a4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d86f      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ede:	4a96      	ldr	r2, [pc, #600]	; (8001138 <HAL_GPIO_Init+0x2a8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d052      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ee4:	4a94      	ldr	r2, [pc, #592]	; (8001138 <HAL_GPIO_Init+0x2a8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d869      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000eea:	4a94      	ldr	r2, [pc, #592]	; (800113c <HAL_GPIO_Init+0x2ac>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d04c      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ef0:	4a92      	ldr	r2, [pc, #584]	; (800113c <HAL_GPIO_Init+0x2ac>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d863      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ef6:	4a92      	ldr	r2, [pc, #584]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d046      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000efc:	4a90      	ldr	r2, [pc, #576]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d85d      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d82a      	bhi.n	8000f5c <HAL_GPIO_Init+0xcc>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d859      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <HAL_GPIO_Init+0x80>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f8b 	.word	0x08000f8b
 8000f14:	08000f65 	.word	0x08000f65
 8000f18:	08000f77 	.word	0x08000f77
 8000f1c:	08000fb9 	.word	0x08000fb9
 8000f20:	08000fbf 	.word	0x08000fbf
 8000f24:	08000fbf 	.word	0x08000fbf
 8000f28:	08000fbf 	.word	0x08000fbf
 8000f2c:	08000fbf 	.word	0x08000fbf
 8000f30:	08000fbf 	.word	0x08000fbf
 8000f34:	08000fbf 	.word	0x08000fbf
 8000f38:	08000fbf 	.word	0x08000fbf
 8000f3c:	08000fbf 	.word	0x08000fbf
 8000f40:	08000fbf 	.word	0x08000fbf
 8000f44:	08000fbf 	.word	0x08000fbf
 8000f48:	08000fbf 	.word	0x08000fbf
 8000f4c:	08000fbf 	.word	0x08000fbf
 8000f50:	08000fbf 	.word	0x08000fbf
 8000f54:	08000f6d 	.word	0x08000f6d
 8000f58:	08000f81 	.word	0x08000f81
 8000f5c:	4a79      	ldr	r2, [pc, #484]	; (8001144 <HAL_GPIO_Init+0x2b4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f62:	e02c      	b.n	8000fbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	623b      	str	r3, [r7, #32]
          break;
 8000f6a:	e029      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	3304      	adds	r3, #4
 8000f72:	623b      	str	r3, [r7, #32]
          break;
 8000f74:	e024      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e01f      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	330c      	adds	r3, #12
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e01a      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f92:	2304      	movs	r3, #4
 8000f94:	623b      	str	r3, [r7, #32]
          break;
 8000f96:	e013      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d105      	bne.n	8000fac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	611a      	str	r2, [r3, #16]
          break;
 8000faa:	e009      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fac:	2308      	movs	r3, #8
 8000fae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	615a      	str	r2, [r3, #20]
          break;
 8000fb6:	e003      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          break;
 8000fbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2bff      	cmp	r3, #255	; 0xff
 8000fc4:	d801      	bhi.n	8000fca <HAL_GPIO_Init+0x13a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	e001      	b.n	8000fce <HAL_GPIO_Init+0x13e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2bff      	cmp	r3, #255	; 0xff
 8000fd4:	d802      	bhi.n	8000fdc <HAL_GPIO_Init+0x14c>
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x152>
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	3b08      	subs	r3, #8
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	210f      	movs	r1, #15
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	6a39      	ldr	r1, [r7, #32]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80b1 	beq.w	8001172 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <HAL_GPIO_Init+0x2b8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x2b8>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <HAL_GPIO_Init+0x2b8>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001028:	4a48      	ldr	r2, [pc, #288]	; (800114c <HAL_GPIO_Init+0x2bc>)
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a40      	ldr	r2, [pc, #256]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d013      	beq.n	800107c <HAL_GPIO_Init+0x1ec>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a3f      	ldr	r2, [pc, #252]	; (8001154 <HAL_GPIO_Init+0x2c4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d00d      	beq.n	8001078 <HAL_GPIO_Init+0x1e8>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <HAL_GPIO_Init+0x2c8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d007      	beq.n	8001074 <HAL_GPIO_Init+0x1e4>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a3d      	ldr	r2, [pc, #244]	; (800115c <HAL_GPIO_Init+0x2cc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d101      	bne.n	8001070 <HAL_GPIO_Init+0x1e0>
 800106c:	2303      	movs	r3, #3
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001070:	2304      	movs	r3, #4
 8001072:	e004      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001074:	2302      	movs	r3, #2
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 800107c:	2300      	movs	r3, #0
 800107e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800108e:	492f      	ldr	r1, [pc, #188]	; (800114c <HAL_GPIO_Init+0x2bc>)
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	492c      	ldr	r1, [pc, #176]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	43db      	mvns	r3, r3
 80010be:	4928      	ldr	r1, [pc, #160]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	4922      	ldr	r1, [pc, #136]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	60cb      	str	r3, [r1, #12]
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	491e      	ldr	r1, [pc, #120]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	4918      	ldr	r1, [pc, #96]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	43db      	mvns	r3, r3
 800110e:	4914      	ldr	r1, [pc, #80]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001110:	4013      	ands	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d021      	beq.n	8001164 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e021      	b.n	8001172 <HAL_GPIO_Init+0x2e2>
 800112e:	bf00      	nop
 8001130:	10320000 	.word	0x10320000
 8001134:	10310000 	.word	0x10310000
 8001138:	10220000 	.word	0x10220000
 800113c:	10210000 	.word	0x10210000
 8001140:	10120000 	.word	0x10120000
 8001144:	10110000 	.word	0x10110000
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	40010800 	.word	0x40010800
 8001154:	40010c00 	.word	0x40010c00
 8001158:	40011000 	.word	0x40011000
 800115c:	40011400 	.word	0x40011400
 8001160:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	43db      	mvns	r3, r3
 800116c:	4909      	ldr	r1, [pc, #36]	; (8001194 <HAL_GPIO_Init+0x304>)
 800116e:	4013      	ands	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	fa22 f303 	lsr.w	r3, r2, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	f47f ae8e 	bne.w	8000ea4 <HAL_GPIO_Init+0x14>
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	372c      	adds	r7, #44	; 0x2c
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4013      	ands	r3, r2
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43d9      	mvns	r1, r3
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	400b      	ands	r3, r1
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	611a      	str	r2, [r3, #16]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e272      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8087 	beq.w	800132a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800121c:	4b92      	ldr	r3, [pc, #584]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b04      	cmp	r3, #4
 8001226:	d00c      	beq.n	8001242 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001228:	4b8f      	ldr	r3, [pc, #572]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	d112      	bne.n	800125a <HAL_RCC_OscConfig+0x5e>
 8001234:	4b8c      	ldr	r3, [pc, #560]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001240:	d10b      	bne.n	800125a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d06c      	beq.n	8001328 <HAL_RCC_OscConfig+0x12c>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d168      	bne.n	8001328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e24c      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x76>
 8001264:	4b80      	ldr	r3, [pc, #512]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a7f      	ldr	r2, [pc, #508]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800126a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e02e      	b.n	80012d0 <HAL_RCC_OscConfig+0xd4>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x98>
 800127a:	4b7b      	ldr	r3, [pc, #492]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a7a      	ldr	r2, [pc, #488]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b78      	ldr	r3, [pc, #480]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a77      	ldr	r2, [pc, #476]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800128c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e01d      	b.n	80012d0 <HAL_RCC_OscConfig+0xd4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0xbc>
 800129e:	4b72      	ldr	r3, [pc, #456]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a71      	ldr	r2, [pc, #452]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b6f      	ldr	r3, [pc, #444]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a6e      	ldr	r2, [pc, #440]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0xd4>
 80012b8:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a6a      	ldr	r2, [pc, #424]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b68      	ldr	r3, [pc, #416]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a67      	ldr	r2, [pc, #412]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcf0 	bl	8000cbc <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fcec 	bl	8000cbc <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e200      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b5d      	ldr	r3, [pc, #372]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe4>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fcdc 	bl	8000cbc <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fcd8 	bl	8000cbc <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e1ec      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	4b53      	ldr	r3, [pc, #332]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x10c>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d063      	beq.n	80013fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001336:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001342:	4b49      	ldr	r3, [pc, #292]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b08      	cmp	r3, #8
 800134c:	d11c      	bne.n	8001388 <HAL_RCC_OscConfig+0x18c>
 800134e:	4b46      	ldr	r3, [pc, #280]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d116      	bne.n	8001388 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	4b43      	ldr	r3, [pc, #268]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x176>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e1c0      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4939      	ldr	r1, [pc, #228]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	e03a      	b.n	80013fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001390:	4b36      	ldr	r3, [pc, #216]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fc91 	bl	8000cbc <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fc8d 	bl	8000cbc <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1a1      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4927      	ldr	r1, [pc, #156]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e015      	b.n	80013fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc70 	bl	8000cbc <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff fc6c 	bl	8000cbc <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e180      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d03a      	beq.n	8001480 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d019      	beq.n	8001446 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_RCC_OscConfig+0x274>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff fc50 	bl	8000cbc <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fc4c 	bl	8000cbc <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e160      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f000 faea 	bl	8001a18 <RCC_Delay>
 8001444:	e01c      	b.n	8001480 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_RCC_OscConfig+0x274>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144c:	f7ff fc36 	bl	8000cbc <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001452:	e00f      	b.n	8001474 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fc32 	bl	8000cbc <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d908      	bls.n	8001474 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e146      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	42420000 	.word	0x42420000
 8001470:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	4b92      	ldr	r3, [pc, #584]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1e9      	bne.n	8001454 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a6 	beq.w	80015da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10d      	bne.n	80014ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a87      	ldr	r2, [pc, #540]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b85      	ldr	r3, [pc, #532]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	4b82      	ldr	r3, [pc, #520]	; (80016c4 <HAL_RCC_OscConfig+0x4c8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c6:	4b7f      	ldr	r3, [pc, #508]	; (80016c4 <HAL_RCC_OscConfig+0x4c8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a7e      	ldr	r2, [pc, #504]	; (80016c4 <HAL_RCC_OscConfig+0x4c8>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fbf3 	bl	8000cbc <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014da:	f7ff fbef 	bl	8000cbc <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b64      	cmp	r3, #100	; 0x64
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e103      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	4b75      	ldr	r3, [pc, #468]	; (80016c4 <HAL_RCC_OscConfig+0x4c8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x312>
 8001500:	4b6f      	ldr	r3, [pc, #444]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4a6e      	ldr	r2, [pc, #440]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6213      	str	r3, [r2, #32]
 800150c:	e02d      	b.n	800156a <HAL_RCC_OscConfig+0x36e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x334>
 8001516:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4a69      	ldr	r2, [pc, #420]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6213      	str	r3, [r2, #32]
 8001522:	4b67      	ldr	r3, [pc, #412]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a66      	ldr	r2, [pc, #408]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	e01c      	b.n	800156a <HAL_RCC_OscConfig+0x36e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d10c      	bne.n	8001552 <HAL_RCC_OscConfig+0x356>
 8001538:	4b61      	ldr	r3, [pc, #388]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a60      	ldr	r2, [pc, #384]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6213      	str	r3, [r2, #32]
 8001544:	4b5e      	ldr	r3, [pc, #376]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a5d      	ldr	r2, [pc, #372]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	e00b      	b.n	800156a <HAL_RCC_OscConfig+0x36e>
 8001552:	4b5b      	ldr	r3, [pc, #364]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a5a      	ldr	r2, [pc, #360]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6213      	str	r3, [r2, #32]
 800155e:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a57      	ldr	r2, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d015      	beq.n	800159e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fba3 	bl	8000cbc <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff fb9f 	bl	8000cbc <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0b1      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ee      	beq.n	800157a <HAL_RCC_OscConfig+0x37e>
 800159c:	e014      	b.n	80015c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fb8d 	bl	8000cbc <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fb89 	bl	8000cbc <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e09b      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1ee      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d105      	bne.n	80015da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ce:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a3b      	ldr	r2, [pc, #236]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8087 	beq.w	80016f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d061      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d146      	bne.n	8001686 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f8:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <HAL_RCC_OscConfig+0x4cc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb5d 	bl	8000cbc <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fb59 	bl	8000cbc <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e06d      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001618:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f0      	bne.n	8001606 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162c:	d108      	bne.n	8001640 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	4921      	ldr	r1, [pc, #132]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a19      	ldr	r1, [r3, #32]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	430b      	orrs	r3, r1
 8001652:	491b      	ldr	r1, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x4cc>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fb2d 	bl	8000cbc <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fb29 	bl	8000cbc <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e03d      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x46a>
 8001684:	e035      	b.n	80016f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_RCC_OscConfig+0x4cc>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fb16 	bl	8000cbc <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff fb12 	bl	8000cbc <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e026      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x498>
 80016b2:	e01e      	b.n	80016f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e019      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40007000 	.word	0x40007000
 80016c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_RCC_OscConfig+0x500>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0d0      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001714:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d910      	bls.n	8001744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 0207 	bic.w	r2, r3, #7
 800172a:	4965      	ldr	r1, [pc, #404]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0b8      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001766:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800177e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	494d      	ldr	r1, [pc, #308]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d040      	beq.n	8001820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d115      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e07f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e073      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ce:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06b      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017de:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f023 0203 	bic.w	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4936      	ldr	r1, [pc, #216]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f0:	f7ff fa64 	bl	8000cbc <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	e00a      	b.n	800180e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7ff fa60 	bl	8000cbc <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e053      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 020c 	and.w	r2, r3, #12
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	429a      	cmp	r2, r3
 800181e:	d1eb      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d210      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 0207 	bic.w	r2, r3, #7
 8001836:	4922      	ldr	r1, [pc, #136]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e032      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4916      	ldr	r1, [pc, #88]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	490e      	ldr	r1, [pc, #56]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800188e:	f000 f821 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 8001892:	4602      	mov	r2, r0
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	490a      	ldr	r1, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x1cc>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1d0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f91e 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000
 80018c4:	40021000 	.word	0x40021000
 80018c8:	0800520c 	.word	0x0800520c
 80018cc:	20000008 	.word	0x20000008
 80018d0:	2000000c 	.word	0x2000000c

080018d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_GetSysClockFreq+0x94>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d002      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x30>
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d003      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x36>
 8001902:	e027      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_RCC_GetSysClockFreq+0x98>)
 8001906:	613b      	str	r3, [r7, #16]
      break;
 8001908:	e027      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	0c9b      	lsrs	r3, r3, #18
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	4a17      	ldr	r2, [pc, #92]	; (8001970 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d010      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_RCC_GetSysClockFreq+0x94>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	0c5b      	lsrs	r3, r3, #17
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_RCC_GetSysClockFreq+0xa0>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_RCC_GetSysClockFreq+0x98>)
 8001936:	fb03 f202 	mul.w	r2, r3, r2
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e004      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	613b      	str	r3, [r7, #16]
      break;
 8001952:	e002      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetSysClockFreq+0x98>)
 8001956:	613b      	str	r3, [r7, #16]
      break;
 8001958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195a:	693b      	ldr	r3, [r7, #16]
}
 800195c:	4618      	mov	r0, r3
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	007a1200 	.word	0x007a1200
 8001970:	08005224 	.word	0x08005224
 8001974:	08005234 	.word	0x08005234
 8001978:	003d0900 	.word	0x003d0900

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_RCC_GetHCLKFreq+0x10>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000008 	.word	0x20000008

08001990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001994:	f7ff fff2 	bl	800197c <HAL_RCC_GetHCLKFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0adb      	lsrs	r3, r3, #11
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4903      	ldr	r1, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	0800521c 	.word	0x0800521c

080019b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	220f      	movs	r2, #15
 80019c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_RCC_GetClockConfig+0x58>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_RCC_GetClockConfig+0x58>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_RCC_GetClockConfig+0x58>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_RCC_GetClockConfig+0x58>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_GetClockConfig+0x5c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0207 	and.w	r2, r3, #7
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40022000 	.word	0x40022000

08001a18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <RCC_Delay+0x34>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <RCC_Delay+0x38>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	0a5b      	lsrs	r3, r3, #9
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a34:	bf00      	nop
  }
  while (Delay --);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1e5a      	subs	r2, r3, #1
 8001a3a:	60fa      	str	r2, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f9      	bne.n	8001a34 <RCC_Delay+0x1c>
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	10624dd3 	.word	0x10624dd3

08001a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e041      	b.n	8001aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f839 	bl	8001af2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f000 f9b4 	bl	8001e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d001      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e03a      	b.n	8001b92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <HAL_TIM_Base_Start_IT+0x98>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x58>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b46:	d009      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x58>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0x58>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d111      	bne.n	8001b80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d010      	beq.n	8001b90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7e:	e007      	b.n	8001b90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	40000800 	.word	0x40000800

08001ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d122      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d11b      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0202 	mvn.w	r2, #2
 8001bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8ed 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001bf0:	e005      	b.n	8001bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f8e0 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f8ef 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d122      	bne.n	8001c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d11b      	bne.n	8001c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0204 	mvn.w	r2, #4
 8001c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8c3 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001c44:	e005      	b.n	8001c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8b6 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8c5 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d122      	bne.n	8001cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d11b      	bne.n	8001cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0208 	mvn.w	r2, #8
 8001c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2204      	movs	r2, #4
 8001c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f899 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001c98:	e005      	b.n	8001ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f88c 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f89b 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d122      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b10      	cmp	r3, #16
 8001cc6:	d11b      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0210 	mvn.w	r2, #16
 8001cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f86f 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f862 	bl	8001db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f871 	bl	8001ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10e      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d107      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0201 	mvn.w	r2, #1
 8001d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fe92 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b80      	cmp	r3, #128	; 0x80
 8001d38:	d10e      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d107      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8bf 	bl	8001ed6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d62:	2b40      	cmp	r3, #64	; 0x40
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d70:	2b40      	cmp	r3, #64	; 0x40
 8001d72:	d107      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f835 	bl	8001dee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0220 	mvn.w	r2, #32
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f88a 	bl	8001ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a29      	ldr	r2, [pc, #164]	; (8001eb8 <TIM_Base_SetConfig+0xb8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00b      	beq.n	8001e30 <TIM_Base_SetConfig+0x30>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1e:	d007      	beq.n	8001e30 <TIM_Base_SetConfig+0x30>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a26      	ldr	r2, [pc, #152]	; (8001ebc <TIM_Base_SetConfig+0xbc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0x30>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <TIM_Base_SetConfig+0xc0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d108      	bne.n	8001e42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <TIM_Base_SetConfig+0xb8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00b      	beq.n	8001e62 <TIM_Base_SetConfig+0x62>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d007      	beq.n	8001e62 <TIM_Base_SetConfig+0x62>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <TIM_Base_SetConfig+0xbc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d003      	beq.n	8001e62 <TIM_Base_SetConfig+0x62>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <TIM_Base_SetConfig+0xc0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d108      	bne.n	8001e74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <TIM_Base_SetConfig+0xb8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d103      	bne.n	8001ea8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	615a      	str	r2, [r3, #20]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40012c00 	.word	0x40012c00
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800

08001ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eee:	f3ef 8305 	mrs	r3, IPSR
 8001ef2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001efa:	f3ef 8310 	mrs	r3, PRIMASK
 8001efe:	607b      	str	r3, [r7, #4]
  return(result);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <osKernelInitialize+0x32>
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <osKernelInitialize+0x60>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d109      	bne.n	8001f22 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8001f12:	603b      	str	r3, [r7, #0]
  return(result);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001f1a:	f06f 0305 	mvn.w	r3, #5
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e00c      	b.n	8001f3c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <osKernelInitialize+0x60>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <osKernelInitialize+0x60>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	e002      	b.n	8001f3c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	20001afc 	.word	0x20001afc

08001f4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f52:	f3ef 8305 	mrs	r3, IPSR
 8001f56:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f62:	607b      	str	r3, [r7, #4]
  return(result);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <osKernelStart+0x32>
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <osKernelStart+0x64>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d109      	bne.n	8001f86 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f72:	f3ef 8311 	mrs	r3, BASEPRI
 8001f76:	603b      	str	r3, [r7, #0]
  return(result);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001f7e:	f06f 0305 	mvn.w	r3, #5
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	e00e      	b.n	8001fa4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <osKernelStart+0x64>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <osKernelStart+0x64>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001f94:	f001 fa2e 	bl	80033f4 <vTaskStartScheduler>
      stat = osOK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e002      	b.n	8001fa4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fa2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20001afc 	.word	0x20001afc

08001fb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b092      	sub	sp, #72	; 0x48
 8001fb8:	af04      	add	r7, sp, #16
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fc4:	f3ef 8305 	mrs	r3, IPSR
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 8094 	bne.w	80020fa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fd6:	623b      	str	r3, [r7, #32]
  return(result);
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 808d 	bne.w	80020fa <osThreadNew+0x146>
 8001fe0:	4b48      	ldr	r3, [pc, #288]	; (8002104 <osThreadNew+0x150>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d106      	bne.n	8001ff6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fe8:	f3ef 8311 	mrs	r3, BASEPRI
 8001fec:	61fb      	str	r3, [r7, #28]
  return(result);
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 8082 	bne.w	80020fa <osThreadNew+0x146>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d07e      	beq.n	80020fa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002000:	2318      	movs	r3, #24
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002004:	2300      	movs	r3, #0
 8002006:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002008:	f107 031b 	add.w	r3, r7, #27
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d045      	beq.n	80020a6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <osThreadNew+0x74>
        name = attr->name;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <osThreadNew+0x9a>
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	2b38      	cmp	r3, #56	; 0x38
 8002040:	d805      	bhi.n	800204e <osThreadNew+0x9a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <osThreadNew+0x9e>
        return (NULL);
 800204e:	2300      	movs	r3, #0
 8002050:	e054      	b.n	80020fc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00e      	beq.n	8002088 <osThreadNew+0xd4>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2ba7      	cmp	r3, #167	; 0xa7
 8002070:	d90a      	bls.n	8002088 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <osThreadNew+0xd4>
        mem = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
 8002086:	e010      	b.n	80020aa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10c      	bne.n	80020aa <osThreadNew+0xf6>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d108      	bne.n	80020aa <osThreadNew+0xf6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d104      	bne.n	80020aa <osThreadNew+0xf6>
          mem = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a4:	e001      	b.n	80020aa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d110      	bne.n	80020d2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020b8:	9202      	str	r2, [sp, #8]
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 ffb0 	bl	800302c <xTaskCreateStatic>
 80020cc:	4603      	mov	r3, r0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e013      	b.n	80020fa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d110      	bne.n	80020fa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020da:	b29a      	uxth	r2, r3
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fffa 	bl	80030e4 <xTaskCreate>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d001      	beq.n	80020fa <osThreadNew+0x146>
          hTask = NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80020fa:	697b      	ldr	r3, [r7, #20]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3738      	adds	r7, #56	; 0x38
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20001afc 	.word	0x20001afc

08002108 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002110:	f3ef 8305 	mrs	r3, IPSR
 8002114:	613b      	str	r3, [r7, #16]
  return(result);
 8002116:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10f      	bne.n	800213c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800211c:	f3ef 8310 	mrs	r3, PRIMASK
 8002120:	60fb      	str	r3, [r7, #12]
  return(result);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <osDelay+0x34>
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <osDelay+0x58>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d109      	bne.n	8002144 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002130:	f3ef 8311 	mrs	r3, BASEPRI
 8002134:	60bb      	str	r3, [r7, #8]
  return(result);
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <osDelay+0x3c>
    stat = osErrorISR;
 800213c:	f06f 0305 	mvn.w	r3, #5
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	e007      	b.n	8002154 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <osDelay+0x4c>
      vTaskDelay(ticks);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f001 f91c 	bl	800338c <vTaskDelay>
    }
  }

  return (stat);
 8002154:	697b      	ldr	r3, [r7, #20]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20001afc 	.word	0x20001afc

08002164 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f002 fa25 	bl	80045bc <pvTimerGetTimerID>
 8002172:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <TimerCallback+0x22>
    callb->func (callb->arg);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	6852      	ldr	r2, [r2, #4]
 8002182:	4610      	mov	r0, r2
 8002184:	4798      	blx	r3
  }
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	; 0x38
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	460b      	mov	r3, r1
 800219e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021a4:	f3ef 8305 	mrs	r3, IPSR
 80021a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80021aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d16a      	bne.n	8002286 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b0:	f3ef 8310 	mrs	r3, PRIMASK
 80021b4:	617b      	str	r3, [r7, #20]
  return(result);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d164      	bne.n	8002286 <osTimerNew+0xf6>
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <osTimerNew+0x100>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d105      	bne.n	80021d0 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021c4:	f3ef 8311 	mrs	r3, BASEPRI
 80021c8:	613b      	str	r3, [r7, #16]
  return(result);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d15a      	bne.n	8002286 <osTimerNew+0xf6>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d057      	beq.n	8002286 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80021d6:	2008      	movs	r0, #8
 80021d8:	f002 fc00 	bl	80049dc <pvPortMalloc>
 80021dc:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d050      	beq.n	8002286 <osTimerNew+0xf6>
      callb->func = func;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <osTimerNew+0x6c>
        reload = pdFALSE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e001      	b.n	8002200 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002204:	623b      	str	r3, [r7, #32]
      name = NULL;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01c      	beq.n	800224a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <osTimerNew+0x8e>
          name = attr->name;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <osTimerNew+0xa4>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b2f      	cmp	r3, #47	; 0x2f
 800222c:	d902      	bls.n	8002234 <osTimerNew+0xa4>
          mem = 1;
 800222e:	2301      	movs	r3, #1
 8002230:	623b      	str	r3, [r7, #32]
 8002232:	e00c      	b.n	800224e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d108      	bne.n	800224e <osTimerNew+0xbe>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <osTimerNew+0xbe>
            mem = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	e001      	b.n	800224e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10c      	bne.n	800226e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <osTimerNew+0x104>)
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002262:	2101      	movs	r1, #1
 8002264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002266:	f001 fe70 	bl	8003f4a <xTimerCreateStatic>
 800226a:	62b8      	str	r0, [r7, #40]	; 0x28
 800226c:	e00b      	b.n	8002286 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d108      	bne.n	8002286 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <osTimerNew+0x104>)
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	2101      	movs	r1, #1
 800227e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002280:	f001 fe42 	bl	8003f08 <xTimerCreate>
 8002284:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002288:	4618      	mov	r0, r3
 800228a:	3730      	adds	r7, #48	; 0x30
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20001afc 	.word	0x20001afc
 8002294:	08002165 	.word	0x08002165

08002298 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af02      	add	r7, sp, #8
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022a6:	f3ef 8305 	mrs	r3, IPSR
 80022aa:	617b      	str	r3, [r7, #20]
  return(result);
 80022ac:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b2:	f3ef 8310 	mrs	r3, PRIMASK
 80022b6:	613b      	str	r3, [r7, #16]
  return(result);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <osTimerStart+0x3a>
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <osTimerStart+0x7c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d109      	bne.n	80022da <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022c6:	f3ef 8311 	mrs	r3, BASEPRI
 80022ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <osTimerStart+0x42>
    stat = osErrorISR;
 80022d2:	f06f 0305 	mvn.w	r3, #5
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	e017      	b.n	800230a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <osTimerStart+0x50>
    stat = osErrorParameter;
 80022e0:	f06f 0303 	mvn.w	r3, #3
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	e010      	b.n	800230a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2300      	movs	r3, #0
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	2104      	movs	r1, #4
 80022f2:	69b8      	ldr	r0, [r7, #24]
 80022f4:	f001 fe98 	bl	8004028 <xTimerGenericCommand>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d102      	bne.n	8002304 <osTimerStart+0x6c>
      stat = osOK;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e002      	b.n	800230a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8002304:	f06f 0302 	mvn.w	r3, #2
 8002308:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800230a:	69fb      	ldr	r3, [r7, #28]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20001afc 	.word	0x20001afc

08002318 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b08c      	sub	sp, #48	; 0x30
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002328:	f3ef 8305 	mrs	r3, IPSR
 800232c:	61bb      	str	r3, [r7, #24]
  return(result);
 800232e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002330:	2b00      	cmp	r3, #0
 8002332:	d16f      	bne.n	8002414 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002334:	f3ef 8310 	mrs	r3, PRIMASK
 8002338:	617b      	str	r3, [r7, #20]
  return(result);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d169      	bne.n	8002414 <osMessageQueueNew+0xfc>
 8002340:	4b37      	ldr	r3, [pc, #220]	; (8002420 <osMessageQueueNew+0x108>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d105      	bne.n	8002354 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002348:	f3ef 8311 	mrs	r3, BASEPRI
 800234c:	613b      	str	r3, [r7, #16]
  return(result);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d15f      	bne.n	8002414 <osMessageQueueNew+0xfc>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d05c      	beq.n	8002414 <osMessageQueueNew+0xfc>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d059      	beq.n	8002414 <osMessageQueueNew+0xfc>
    mem = -1;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002364:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d029      	beq.n	80023c0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d012      	beq.n	800239a <osMessageQueueNew+0x82>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b4f      	cmp	r3, #79	; 0x4f
 800237a:	d90e      	bls.n	800239a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	429a      	cmp	r2, r3
 8002392:	d302      	bcc.n	800239a <osMessageQueueNew+0x82>
        mem = 1;
 8002394:	2301      	movs	r3, #1
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	e014      	b.n	80023c4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d110      	bne.n	80023c4 <osMessageQueueNew+0xac>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d108      	bne.n	80023c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d104      	bne.n	80023c4 <osMessageQueueNew+0xac>
          mem = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	623b      	str	r3, [r7, #32]
 80023be:	e001      	b.n	80023c4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d10b      	bne.n	80023e2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2100      	movs	r1, #0
 80023d4:	9100      	str	r1, [sp, #0]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f96d 	bl	80026b8 <xQueueGenericCreateStatic>
 80023de:	6278      	str	r0, [r7, #36]	; 0x24
 80023e0:	e008      	b.n	80023f4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80023e8:	2200      	movs	r2, #0
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f9da 	bl	80027a6 <xQueueGenericCreate>
 80023f2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00c      	beq.n	8002414 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <osMessageQueueNew+0xf0>
        name = attr->name;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e001      	b.n	800240c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800240c:	69f9      	ldr	r1, [r7, #28]
 800240e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002410:	f000 fdb0 	bl	8002f74 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002416:	4618      	mov	r0, r3
 8002418:	3728      	adds	r7, #40	; 0x28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20001afc 	.word	0x20001afc

08002424 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a06      	ldr	r2, [pc, #24]	; (800244c <vApplicationGetIdleTaskMemory+0x28>)
 8002434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4a05      	ldr	r2, [pc, #20]	; (8002450 <vApplicationGetIdleTaskMemory+0x2c>)
 800243a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	601a      	str	r2, [r3, #0]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	20001b00 	.word	0x20001b00
 8002450:	20001ba8 	.word	0x20001ba8

08002454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a07      	ldr	r2, [pc, #28]	; (8002480 <vApplicationGetTimerTaskMemory+0x2c>)
 8002464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4a06      	ldr	r2, [pc, #24]	; (8002484 <vApplicationGetTimerTaskMemory+0x30>)
 800246a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002472:	601a      	str	r2, [r3, #0]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20001da8 	.word	0x20001da8
 8002484:	20001e50 	.word	0x20001e50

08002488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f103 0208 	add.w	r2, r3, #8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f103 0208 	add.w	r2, r3, #8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f103 0208 	add.w	r2, r3, #8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	601a      	str	r2, [r3, #0]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800253a:	d103      	bne.n	8002544 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e00c      	b.n	800255e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3308      	adds	r3, #8
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e002      	b.n	8002552 <vListInsert+0x2e>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d2f6      	bcs.n	800254c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	601a      	str	r2, [r3, #0]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6852      	ldr	r2, [r2, #4]
 80025b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d103      	bne.n	80025c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1e5a      	subs	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
	...

080025e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002612:	f002 f8e3 	bl	80047dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	68f9      	ldr	r1, [r7, #12]
 8002620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	441a      	add	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	3b01      	subs	r3, #1
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	441a      	add	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	22ff      	movs	r2, #255	; 0xff
 800265e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d114      	bne.n	8002692 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01a      	beq.n	80026a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3310      	adds	r3, #16
 8002674:	4618      	mov	r0, r3
 8002676:	f001 f959 	bl	800392c <xTaskRemoveFromEventList>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d012      	beq.n	80026a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <xQueueGenericReset+0xcc>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	e009      	b.n	80026a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3310      	adds	r3, #16
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fef6 	bl	8002488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3324      	adds	r3, #36	; 0x24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fef1 	bl	8002488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026a6:	f002 f8c9 	bl	800483c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	e000ed04 	.word	0xe000ed04

080026b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08e      	sub	sp, #56	; 0x38
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026de:	bf00      	nop
 80026e0:	e7fe      	b.n	80026e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <xQueueGenericCreateStatic+0x52>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <xQueueGenericCreateStatic+0x56>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <xQueueGenericCreateStatic+0x58>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	623b      	str	r3, [r7, #32]
}
 8002726:	bf00      	nop
 8002728:	e7fe      	b.n	8002728 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <xQueueGenericCreateStatic+0x7e>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <xQueueGenericCreateStatic+0x82>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <xQueueGenericCreateStatic+0x84>
 800273a:	2300      	movs	r3, #0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10a      	bne.n	8002756 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	61fb      	str	r3, [r7, #28]
}
 8002752:	bf00      	nop
 8002754:	e7fe      	b.n	8002754 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002756:	2350      	movs	r3, #80	; 0x50
 8002758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b50      	cmp	r3, #80	; 0x50
 800275e:	d00a      	beq.n	8002776 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	61bb      	str	r3, [r7, #24]
}
 8002772:	bf00      	nop
 8002774:	e7fe      	b.n	8002774 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002788:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f843 	bl	8002822 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800279e:	4618      	mov	r0, r3
 80027a0:	3730      	adds	r7, #48	; 0x30
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b08a      	sub	sp, #40	; 0x28
 80027aa:	af02      	add	r7, sp, #8
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	613b      	str	r3, [r7, #16]
}
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e004      	b.n	80027e6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3350      	adds	r3, #80	; 0x50
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 f8f6 	bl	80049dc <pvPortMalloc>
 80027f0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00f      	beq.n	8002818 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	3350      	adds	r3, #80	; 0x50
 80027fc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002806:	79fa      	ldrb	r2, [r7, #7]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f805 	bl	8002822 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002818:	69bb      	ldr	r3, [r7, #24]
	}
 800281a:	4618      	mov	r0, r3
 800281c:	3720      	adds	r7, #32
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e002      	b.n	8002844 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002850:	2101      	movs	r1, #1
 8002852:	69b8      	ldr	r0, [r7, #24]
 8002854:	f7ff fec8 	bl	80025e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08e      	sub	sp, #56	; 0x38
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002876:	2300      	movs	r3, #0
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <xQueueGenericSend+0x32>
	__asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <xQueueGenericSend+0x40>
 80028a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <xQueueGenericSend+0x44>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <xQueueGenericSend+0x46>
 80028ac:	2300      	movs	r3, #0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <xQueueGenericSend+0x60>
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d103      	bne.n	80028d6 <xQueueGenericSend+0x6e>
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <xQueueGenericSend+0x72>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <xQueueGenericSend+0x74>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	623b      	str	r3, [r7, #32]
}
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028f6:	f001 f9df 	bl	8003cb8 <xTaskGetSchedulerState>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <xQueueGenericSend+0x9e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <xQueueGenericSend+0xa2>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <xQueueGenericSend+0xa4>
 800290a:	2300      	movs	r3, #0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xQueueGenericSend+0xbe>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	61fb      	str	r3, [r7, #28]
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002926:	f001 ff59 	bl	80047dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <xQueueGenericSend+0xd4>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d129      	bne.n	8002990 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002942:	f000 fa07 	bl	8002d54 <prvCopyDataToQueue>
 8002946:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d010      	beq.n	8002972 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	3324      	adds	r3, #36	; 0x24
 8002954:	4618      	mov	r0, r3
 8002956:	f000 ffe9 	bl	800392c <xTaskRemoveFromEventList>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002960:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <xQueueGenericSend+0x1f8>)
 8002962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	e00a      	b.n	8002988 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002978:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <xQueueGenericSend+0x1f8>)
 800297a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002988:	f001 ff58 	bl	800483c <vPortExitCritical>
				return pdPASS;
 800298c:	2301      	movs	r3, #1
 800298e:	e063      	b.n	8002a58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002996:	f001 ff51 	bl	800483c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800299a:	2300      	movs	r3, #0
 800299c:	e05c      	b.n	8002a58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800299e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 f823 	bl	80039f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029ae:	2301      	movs	r3, #1
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029b2:	f001 ff43 	bl	800483c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029b6:	f000 fd8d 	bl	80034d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029ba:	f001 ff0f 	bl	80047dc <vPortEnterCritical>
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ca:	d103      	bne.n	80029d4 <xQueueGenericSend+0x16c>
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029da:	b25b      	sxtb	r3, r3
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e0:	d103      	bne.n	80029ea <xQueueGenericSend+0x182>
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029ea:	f001 ff27 	bl	800483c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029ee:	1d3a      	adds	r2, r7, #4
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 f812 	bl	8003a20 <xTaskCheckForTimeOut>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d124      	bne.n	8002a4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a04:	f000 fa9e 	bl	8002f44 <prvIsQueueFull>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d018      	beq.n	8002a40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	3310      	adds	r3, #16
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 ff38 	bl	800388c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a1e:	f000 fa29 	bl	8002e74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a22:	f000 fd65 	bl	80034f0 <xTaskResumeAll>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f47f af7c 	bne.w	8002926 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <xQueueGenericSend+0x1f8>)
 8002a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	e772      	b.n	8002926 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a42:	f000 fa17 	bl	8002e74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a46:	f000 fd53 	bl	80034f0 <xTaskResumeAll>
 8002a4a:	e76c      	b.n	8002926 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a4e:	f000 fa11 	bl	8002e74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a52:	f000 fd4d 	bl	80034f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a56:	2300      	movs	r3, #0
		}
	}
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3738      	adds	r7, #56	; 0x38
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	e000ed04 	.word	0xe000ed04

08002a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08e      	sub	sp, #56	; 0x38
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d103      	bne.n	8002aa0 <xQueueGenericSendFromISR+0x3c>
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <xQueueGenericSendFromISR+0x40>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <xQueueGenericSendFromISR+0x42>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	623b      	str	r3, [r7, #32]
}
 8002abc:	bf00      	nop
 8002abe:	e7fe      	b.n	8002abe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d103      	bne.n	8002ace <xQueueGenericSendFromISR+0x6a>
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <xQueueGenericSendFromISR+0x6e>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <xQueueGenericSendFromISR+0x70>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	61fb      	str	r3, [r7, #28]
}
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002aee:	f001 ff37 	bl	8004960 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002af2:	f3ef 8211 	mrs	r2, BASEPRI
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	61ba      	str	r2, [r7, #24]
 8002b08:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <xQueueGenericSendFromISR+0xbc>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d12c      	bne.n	8002b7a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b30:	f000 f910 	bl	8002d54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b3c:	d112      	bne.n	8002b64 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d016      	beq.n	8002b74 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	3324      	adds	r3, #36	; 0x24
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 feee 	bl	800392c <xTaskRemoveFromEventList>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00e      	beq.n	8002b74 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00b      	beq.n	8002b74 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e007      	b.n	8002b74 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b68:	3301      	adds	r3, #1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	b25a      	sxtb	r2, r3
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002b74:	2301      	movs	r3, #1
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002b78:	e001      	b.n	8002b7e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3738      	adds	r7, #56	; 0x38
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <xQueueReceive+0x30>
	__asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	623b      	str	r3, [r7, #32]
}
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <xQueueReceive+0x3e>
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <xQueueReceive+0x42>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <xQueueReceive+0x44>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xQueueReceive+0x5e>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	61fb      	str	r3, [r7, #28]
}
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bf2:	f001 f861 	bl	8003cb8 <xTaskGetSchedulerState>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <xQueueReceive+0x6e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <xQueueReceive+0x72>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <xQueueReceive+0x74>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <xQueueReceive+0x8e>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	61bb      	str	r3, [r7, #24]
}
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c22:	f001 fddb 	bl	80047dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01f      	beq.n	8002c72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c36:	f000 f8f7 	bl	8002e28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00f      	beq.n	8002c6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	3310      	adds	r3, #16
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fe6c 	bl	800392c <xTaskRemoveFromEventList>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	; (8002d50 <xQueueReceive+0x1bc>)
 8002c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c6a:	f001 fde7 	bl	800483c <vPortExitCritical>
				return pdPASS;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e069      	b.n	8002d46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c78:	f001 fde0 	bl	800483c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e062      	b.n	8002d46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c86:	f107 0310 	add.w	r3, r7, #16
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 feb2 	bl	80039f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c94:	f001 fdd2 	bl	800483c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c98:	f000 fc1c 	bl	80034d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c9c:	f001 fd9e 	bl	80047dc <vPortEnterCritical>
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ca6:	b25b      	sxtb	r3, r3
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cac:	d103      	bne.n	8002cb6 <xQueueReceive+0x122>
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc2:	d103      	bne.n	8002ccc <xQueueReceive+0x138>
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ccc:	f001 fdb6 	bl	800483c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cd0:	1d3a      	adds	r2, r7, #4
 8002cd2:	f107 0310 	add.w	r3, r7, #16
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fea1 	bl	8003a20 <xTaskCheckForTimeOut>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d123      	bne.n	8002d2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce6:	f000 f917 	bl	8002f18 <prvIsQueueEmpty>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d017      	beq.n	8002d20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	3324      	adds	r3, #36	; 0x24
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fdc7 	bl	800388c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d00:	f000 f8b8 	bl	8002e74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d04:	f000 fbf4 	bl	80034f0 <xTaskResumeAll>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d189      	bne.n	8002c22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <xQueueReceive+0x1bc>)
 8002d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	e780      	b.n	8002c22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d22:	f000 f8a7 	bl	8002e74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d26:	f000 fbe3 	bl	80034f0 <xTaskResumeAll>
 8002d2a:	e77a      	b.n	8002c22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d2e:	f000 f8a1 	bl	8002e74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d32:	f000 fbdd 	bl	80034f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d38:	f000 f8ee 	bl	8002f18 <prvIsQueueEmpty>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f43f af6f 	beq.w	8002c22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3730      	adds	r7, #48	; 0x30
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	e000ed04 	.word	0xe000ed04

08002d54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d14d      	bne.n	8002e16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 ffb8 	bl	8003cf4 <xTaskPriorityDisinherit>
 8002d84:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	e043      	b.n	8002e16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d119      	bne.n	8002dc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6898      	ldr	r0, [r3, #8]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	f002 f878 	bl	8004e94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	441a      	add	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d32b      	bcc.n	8002e16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	e026      	b.n	8002e16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68d8      	ldr	r0, [r3, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	f002 f85e 	bl	8004e94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	425b      	negs	r3, r3
 8002de2:	441a      	add	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d207      	bcs.n	8002e04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	425b      	negs	r3, r3
 8002dfe:	441a      	add	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d105      	bne.n	8002e16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e1e:	697b      	ldr	r3, [r7, #20]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d018      	beq.n	8002e6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	441a      	add	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d303      	bcc.n	8002e5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68d9      	ldr	r1, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	461a      	mov	r2, r3
 8002e66:	6838      	ldr	r0, [r7, #0]
 8002e68:	f002 f814 	bl	8004e94 <memcpy>
	}
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e7c:	f001 fcae 	bl	80047dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e88:	e011      	b.n	8002eae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d012      	beq.n	8002eb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3324      	adds	r3, #36	; 0x24
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fd48 	bl	800392c <xTaskRemoveFromEventList>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ea2:	f000 fe1f 	bl	8003ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	dce9      	bgt.n	8002e8a <prvUnlockQueue+0x16>
 8002eb6:	e000      	b.n	8002eba <prvUnlockQueue+0x46>
					break;
 8002eb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	22ff      	movs	r2, #255	; 0xff
 8002ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ec2:	f001 fcbb 	bl	800483c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ec6:	f001 fc89 	bl	80047dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ed0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ed2:	e011      	b.n	8002ef8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d012      	beq.n	8002f02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3310      	adds	r3, #16
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fd23 	bl	800392c <xTaskRemoveFromEventList>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002eec:	f000 fdfa 	bl	8003ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ef0:	7bbb      	ldrb	r3, [r7, #14]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	dce9      	bgt.n	8002ed4 <prvUnlockQueue+0x60>
 8002f00:	e000      	b.n	8002f04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	22ff      	movs	r2, #255	; 0xff
 8002f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f0c:	f001 fc96 	bl	800483c <vPortExitCritical>
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f20:	f001 fc5c 	bl	80047dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e001      	b.n	8002f36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f36:	f001 fc81 	bl	800483c <vPortExitCritical>

	return xReturn;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f4c:	f001 fc46 	bl	80047dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d102      	bne.n	8002f62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e001      	b.n	8002f66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f66:	f001 fc69 	bl	800483c <vPortExitCritical>

	return xReturn;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e014      	b.n	8002fae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f84:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <vQueueAddToRegistry+0x4c>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f90:	490b      	ldr	r1, [pc, #44]	; (8002fc0 <vQueueAddToRegistry+0x4c>)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <vQueueAddToRegistry+0x4c>)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002fa6:	e006      	b.n	8002fb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d9e7      	bls.n	8002f84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	20002250 	.word	0x20002250

08002fc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002fd4:	f001 fc02 	bl	80047dc <vPortEnterCritical>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fde:	b25b      	sxtb	r3, r3
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe4:	d103      	bne.n	8002fee <vQueueWaitForMessageRestricted+0x2a>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ff4:	b25b      	sxtb	r3, r3
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ffa:	d103      	bne.n	8003004 <vQueueWaitForMessageRestricted+0x40>
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003004:	f001 fc1a 	bl	800483c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	2b00      	cmp	r3, #0
 800300e:	d106      	bne.n	800301e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	3324      	adds	r3, #36	; 0x24
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fc5b 	bl	80038d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff28 	bl	8002e74 <prvUnlockQueue>
	}
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08e      	sub	sp, #56	; 0x38
 8003030:	af04      	add	r7, sp, #16
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	623b      	str	r3, [r7, #32]
}
 8003052:	bf00      	nop
 8003054:	e7fe      	b.n	8003054 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <xTaskCreateStatic+0x46>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	61fb      	str	r3, [r7, #28]
}
 800306e:	bf00      	nop
 8003070:	e7fe      	b.n	8003070 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003072:	23a8      	movs	r3, #168	; 0xa8
 8003074:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2ba8      	cmp	r3, #168	; 0xa8
 800307a:	d00a      	beq.n	8003092 <xTaskCreateStatic+0x66>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	61bb      	str	r3, [r7, #24]
}
 800308e:	bf00      	nop
 8003090:	e7fe      	b.n	8003090 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01e      	beq.n	80030d6 <xTaskCreateStatic+0xaa>
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01b      	beq.n	80030d6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030b0:	2300      	movs	r3, #0
 80030b2:	9303      	str	r3, [sp, #12]
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	9302      	str	r3, [sp, #8]
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f851 	bl	8003170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030d0:	f000 f8ec 	bl	80032ac <prvAddNewTaskToReadyList>
 80030d4:	e001      	b.n	80030da <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030da:	697b      	ldr	r3, [r7, #20]
	}
 80030dc:	4618      	mov	r0, r3
 80030de:	3728      	adds	r7, #40	; 0x28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08c      	sub	sp, #48	; 0x30
 80030e8:	af04      	add	r7, sp, #16
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f001 fc6f 	bl	80049dc <pvPortMalloc>
 80030fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00e      	beq.n	8003124 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003106:	20a8      	movs	r0, #168	; 0xa8
 8003108:	f001 fc68 	bl	80049dc <pvPortMalloc>
 800310c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
 800311a:	e005      	b.n	8003128 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800311c:	6978      	ldr	r0, [r7, #20]
 800311e:	f001 fd21 	bl	8004b64 <vPortFree>
 8003122:	e001      	b.n	8003128 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d017      	beq.n	800315e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	2300      	movs	r3, #0
 800313a:	9303      	str	r3, [sp, #12]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	9302      	str	r3, [sp, #8]
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f80f 	bl	8003170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003152:	69f8      	ldr	r0, [r7, #28]
 8003154:	f000 f8aa 	bl	80032ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003158:	2301      	movs	r3, #1
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	e002      	b.n	8003164 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003162:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003164:	69bb      	ldr	r3, [r7, #24]
	}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	461a      	mov	r2, r3
 8003188:	21a5      	movs	r1, #165	; 0xa5
 800318a:	f001 fdff 	bl	8004d8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003198:	3b01      	subs	r3, #1
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f023 0307 	bic.w	r3, r3, #7
 80031a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	617b      	str	r3, [r7, #20]
}
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	e012      	b.n	80031f4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	7819      	ldrb	r1, [r3, #0]
 80031d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	3334      	adds	r3, #52	; 0x34
 80031de:	460a      	mov	r2, r1
 80031e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	d9e9      	bls.n	80031ce <prvInitialiseNewTask+0x5e>
 80031fa:	e000      	b.n	80031fe <prvInitialiseNewTask+0x8e>
		{
			break;
 80031fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	2b37      	cmp	r3, #55	; 0x37
 800320a:	d901      	bls.n	8003210 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800320c:	2337      	movs	r3, #55	; 0x37
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003214:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800321a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	2200      	movs	r2, #0
 8003220:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	3304      	adds	r3, #4
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff f94d 	bl	80024c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	3318      	adds	r3, #24
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff f948 	bl	80024c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800323a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	2200      	movs	r2, #0
 8003250:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	2200      	movs	r2, #0
 8003258:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	3354      	adds	r3, #84	; 0x54
 8003260:	224c      	movs	r2, #76	; 0x4c
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f001 fd91 	bl	8004d8c <memset>
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <prvInitialiseNewTask+0x130>)
 800326e:	659a      	str	r2, [r3, #88]	; 0x58
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <prvInitialiseNewTask+0x134>)
 8003274:	65da      	str	r2, [r3, #92]	; 0x5c
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	4a0b      	ldr	r2, [pc, #44]	; (80032a8 <prvInitialiseNewTask+0x138>)
 800327a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	68f9      	ldr	r1, [r7, #12]
 8003280:	69b8      	ldr	r0, [r7, #24]
 8003282:	f001 f9bb 	bl	80045fc <pxPortInitialiseStack>
 8003286:	4602      	mov	r2, r0
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003296:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003298:	bf00      	nop
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	200034dc 	.word	0x200034dc
 80032a4:	20003544 	.word	0x20003544
 80032a8:	200035ac 	.word	0x200035ac

080032ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032b4:	f001 fa92 	bl	80047dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <prvAddNewTaskToReadyList+0xc4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <prvAddNewTaskToReadyList+0xc4>)
 80032c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <prvAddNewTaskToReadyList+0xc8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <prvAddNewTaskToReadyList+0xc8>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <prvAddNewTaskToReadyList+0xc4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d110      	bne.n	80032fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032d8:	f000 fc28 	bl	8003b2c <prvInitialiseTaskLists>
 80032dc:	e00d      	b.n	80032fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032de:	4b26      	ldr	r3, [pc, #152]	; (8003378 <prvAddNewTaskToReadyList+0xcc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032e6:	4b23      	ldr	r3, [pc, #140]	; (8003374 <prvAddNewTaskToReadyList+0xc8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d802      	bhi.n	80032fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032f4:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <prvAddNewTaskToReadyList+0xc8>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032fa:	4b20      	ldr	r3, [pc, #128]	; (800337c <prvAddNewTaskToReadyList+0xd0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	4a1e      	ldr	r2, [pc, #120]	; (800337c <prvAddNewTaskToReadyList+0xd0>)
 8003302:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <prvAddNewTaskToReadyList+0xd0>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <prvAddNewTaskToReadyList+0xd4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d903      	bls.n	8003320 <prvAddNewTaskToReadyList+0x74>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	4a18      	ldr	r2, [pc, #96]	; (8003380 <prvAddNewTaskToReadyList+0xd4>)
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4a15      	ldr	r2, [pc, #84]	; (8003384 <prvAddNewTaskToReadyList+0xd8>)
 800332e:	441a      	add	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f7ff f8d1 	bl	80024de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800333c:	f001 fa7e 	bl	800483c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003340:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <prvAddNewTaskToReadyList+0xcc>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00e      	beq.n	8003366 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <prvAddNewTaskToReadyList+0xc8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	429a      	cmp	r2, r3
 8003354:	d207      	bcs.n	8003366 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <prvAddNewTaskToReadyList+0xdc>)
 8003358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20002764 	.word	0x20002764
 8003374:	20002290 	.word	0x20002290
 8003378:	20002770 	.word	0x20002770
 800337c:	20002780 	.word	0x20002780
 8003380:	2000276c 	.word	0x2000276c
 8003384:	20002294 	.word	0x20002294
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d017      	beq.n	80033ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <vTaskDelay+0x60>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <vTaskDelay+0x30>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	60bb      	str	r3, [r7, #8]
}
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80033bc:	f000 f88a 	bl	80034d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033c0:	2100      	movs	r1, #0
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fd04 	bl	8003dd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033c8:	f000 f892 	bl	80034f0 <xTaskResumeAll>
 80033cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d107      	bne.n	80033e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <vTaskDelay+0x64>)
 80033d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	2000278c 	.word	0x2000278c
 80033f0:	e000ed04 	.word	0xe000ed04

080033f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003402:	463a      	mov	r2, r7
 8003404:	1d39      	adds	r1, r7, #4
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f80a 	bl	8002424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003410:	6839      	ldr	r1, [r7, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	9202      	str	r2, [sp, #8]
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	2300      	movs	r3, #0
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2300      	movs	r3, #0
 8003420:	460a      	mov	r2, r1
 8003422:	4924      	ldr	r1, [pc, #144]	; (80034b4 <vTaskStartScheduler+0xc0>)
 8003424:	4824      	ldr	r0, [pc, #144]	; (80034b8 <vTaskStartScheduler+0xc4>)
 8003426:	f7ff fe01 	bl	800302c <xTaskCreateStatic>
 800342a:	4603      	mov	r3, r0
 800342c:	4a23      	ldr	r2, [pc, #140]	; (80034bc <vTaskStartScheduler+0xc8>)
 800342e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003430:	4b22      	ldr	r3, [pc, #136]	; (80034bc <vTaskStartScheduler+0xc8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003438:	2301      	movs	r3, #1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e001      	b.n	8003442 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d102      	bne.n	800344e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003448:	f000 fd16 	bl	8003e78 <xTimerCreateTimerTask>
 800344c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d11b      	bne.n	800348c <vTaskStartScheduler+0x98>
	__asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	613b      	str	r3, [r7, #16]
}
 8003466:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <vTaskStartScheduler+0xcc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3354      	adds	r3, #84	; 0x54
 800346e:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <vTaskStartScheduler+0xd0>)
 8003470:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <vTaskStartScheduler+0xd4>)
 8003474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003478:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <vTaskStartScheduler+0xd8>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003480:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <vTaskStartScheduler+0xdc>)
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003486:	f001 f937 	bl	80046f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800348a:	e00e      	b.n	80034aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003492:	d10a      	bne.n	80034aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	60fb      	str	r3, [r7, #12]
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <vTaskStartScheduler+0xb4>
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	08005040 	.word	0x08005040
 80034b8:	08003afd 	.word	0x08003afd
 80034bc:	20002788 	.word	0x20002788
 80034c0:	20002290 	.word	0x20002290
 80034c4:	20000064 	.word	0x20000064
 80034c8:	20002784 	.word	0x20002784
 80034cc:	20002770 	.word	0x20002770
 80034d0:	20002768 	.word	0x20002768

080034d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <vTaskSuspendAll+0x18>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	4a03      	ldr	r2, [pc, #12]	; (80034ec <vTaskSuspendAll+0x18>)
 80034e0:	6013      	str	r3, [r2, #0]
}
 80034e2:	bf00      	nop
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	2000278c 	.word	0x2000278c

080034f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034fe:	4b42      	ldr	r3, [pc, #264]	; (8003608 <xTaskResumeAll+0x118>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <xTaskResumeAll+0x2c>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	603b      	str	r3, [r7, #0]
}
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800351c:	f001 f95e 	bl	80047dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003520:	4b39      	ldr	r3, [pc, #228]	; (8003608 <xTaskResumeAll+0x118>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3b01      	subs	r3, #1
 8003526:	4a38      	ldr	r2, [pc, #224]	; (8003608 <xTaskResumeAll+0x118>)
 8003528:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800352a:	4b37      	ldr	r3, [pc, #220]	; (8003608 <xTaskResumeAll+0x118>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d162      	bne.n	80035f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <xTaskResumeAll+0x11c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d05e      	beq.n	80035f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800353a:	e02f      	b.n	800359c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800353c:	4b34      	ldr	r3, [pc, #208]	; (8003610 <xTaskResumeAll+0x120>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3318      	adds	r3, #24
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff f823 	bl	8002594 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3304      	adds	r3, #4
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff f81e 	bl	8002594 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <xTaskResumeAll+0x124>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d903      	bls.n	800356c <xTaskResumeAll+0x7c>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <xTaskResumeAll+0x124>)
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4a27      	ldr	r2, [pc, #156]	; (8003618 <xTaskResumeAll+0x128>)
 800357a:	441a      	add	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3304      	adds	r3, #4
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f7fe ffab 	bl	80024de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	4b23      	ldr	r3, [pc, #140]	; (800361c <xTaskResumeAll+0x12c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <xTaskResumeAll+0x130>)
 8003598:	2201      	movs	r2, #1
 800359a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800359c:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <xTaskResumeAll+0x120>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1cb      	bne.n	800353c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035aa:	f000 fb61 	bl	8003c70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <xTaskResumeAll+0x134>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d010      	beq.n	80035dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035ba:	f000 f845 	bl	8003648 <xTaskIncrementTick>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <xTaskResumeAll+0x130>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f1      	bne.n	80035ba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <xTaskResumeAll+0x134>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035dc:	4b10      	ldr	r3, [pc, #64]	; (8003620 <xTaskResumeAll+0x130>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035e8:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <xTaskResumeAll+0x138>)
 80035ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035f8:	f001 f920 	bl	800483c <vPortExitCritical>

	return xAlreadyYielded;
 80035fc:	68bb      	ldr	r3, [r7, #8]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	2000278c 	.word	0x2000278c
 800360c:	20002764 	.word	0x20002764
 8003610:	20002724 	.word	0x20002724
 8003614:	2000276c 	.word	0x2000276c
 8003618:	20002294 	.word	0x20002294
 800361c:	20002290 	.word	0x20002290
 8003620:	20002778 	.word	0x20002778
 8003624:	20002774 	.word	0x20002774
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <xTaskGetTickCount+0x18>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003638:	687b      	ldr	r3, [r7, #4]
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	20002768 	.word	0x20002768

08003648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003652:	4b51      	ldr	r3, [pc, #324]	; (8003798 <xTaskIncrementTick+0x150>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 808e 	bne.w	8003778 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800365c:	4b4f      	ldr	r3, [pc, #316]	; (800379c <xTaskIncrementTick+0x154>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003664:	4a4d      	ldr	r2, [pc, #308]	; (800379c <xTaskIncrementTick+0x154>)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d120      	bne.n	80036b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <xTaskIncrementTick+0x158>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <xTaskIncrementTick+0x48>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	603b      	str	r3, [r7, #0]
}
 800368c:	bf00      	nop
 800368e:	e7fe      	b.n	800368e <xTaskIncrementTick+0x46>
 8003690:	4b43      	ldr	r3, [pc, #268]	; (80037a0 <xTaskIncrementTick+0x158>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <xTaskIncrementTick+0x15c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a41      	ldr	r2, [pc, #260]	; (80037a0 <xTaskIncrementTick+0x158>)
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4a41      	ldr	r2, [pc, #260]	; (80037a4 <xTaskIncrementTick+0x15c>)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <xTaskIncrementTick+0x160>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	4a3f      	ldr	r2, [pc, #252]	; (80037a8 <xTaskIncrementTick+0x160>)
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	f000 fadf 	bl	8003c70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036b2:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <xTaskIncrementTick+0x164>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d34e      	bcc.n	800375a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036bc:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <xTaskIncrementTick+0x158>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <xTaskIncrementTick+0x82>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <xTaskIncrementTick+0x84>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d004      	beq.n	80036da <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d0:	4b36      	ldr	r3, [pc, #216]	; (80037ac <xTaskIncrementTick+0x164>)
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036d6:	601a      	str	r2, [r3, #0]
					break;
 80036d8:	e03f      	b.n	800375a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <xTaskIncrementTick+0x158>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d203      	bcs.n	80036fa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036f2:	4a2e      	ldr	r2, [pc, #184]	; (80037ac <xTaskIncrementTick+0x164>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6013      	str	r3, [r2, #0]
						break;
 80036f8:	e02f      	b.n	800375a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe ff48 	bl	8002594 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	3318      	adds	r3, #24
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe ff3f 	bl	8002594 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371a:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <xTaskIncrementTick+0x168>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d903      	bls.n	800372a <xTaskIncrementTick+0xe2>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <xTaskIncrementTick+0x168>)
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <xTaskIncrementTick+0x16c>)
 8003738:	441a      	add	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3304      	adds	r3, #4
 800373e:	4619      	mov	r1, r3
 8003740:	4610      	mov	r0, r2
 8003742:	f7fe fecc 	bl	80024de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374a:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <xTaskIncrementTick+0x170>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	429a      	cmp	r2, r3
 8003752:	d3b3      	bcc.n	80036bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003754:	2301      	movs	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003758:	e7b0      	b.n	80036bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800375a:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <xTaskIncrementTick+0x170>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4914      	ldr	r1, [pc, #80]	; (80037b4 <xTaskIncrementTick+0x16c>)
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d907      	bls.n	8003782 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003772:	2301      	movs	r3, #1
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e004      	b.n	8003782 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <xTaskIncrementTick+0x174>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <xTaskIncrementTick+0x174>)
 8003780:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003782:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <xTaskIncrementTick+0x178>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800378a:	2301      	movs	r3, #1
 800378c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800378e:	697b      	ldr	r3, [r7, #20]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	2000278c 	.word	0x2000278c
 800379c:	20002768 	.word	0x20002768
 80037a0:	2000271c 	.word	0x2000271c
 80037a4:	20002720 	.word	0x20002720
 80037a8:	2000277c 	.word	0x2000277c
 80037ac:	20002784 	.word	0x20002784
 80037b0:	2000276c 	.word	0x2000276c
 80037b4:	20002294 	.word	0x20002294
 80037b8:	20002290 	.word	0x20002290
 80037bc:	20002774 	.word	0x20002774
 80037c0:	20002778 	.word	0x20002778

080037c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037ca:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <vTaskSwitchContext+0xb0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037d2:	4b29      	ldr	r3, [pc, #164]	; (8003878 <vTaskSwitchContext+0xb4>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037d8:	e046      	b.n	8003868 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80037da:	4b27      	ldr	r3, [pc, #156]	; (8003878 <vTaskSwitchContext+0xb4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80037e0:	4b26      	ldr	r3, [pc, #152]	; (800387c <vTaskSwitchContext+0xb8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e010      	b.n	800380a <vTaskSwitchContext+0x46>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <vTaskSwitchContext+0x40>
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	607b      	str	r3, [r7, #4]
}
 8003800:	bf00      	nop
 8003802:	e7fe      	b.n	8003802 <vTaskSwitchContext+0x3e>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3b01      	subs	r3, #1
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	491d      	ldr	r1, [pc, #116]	; (8003880 <vTaskSwitchContext+0xbc>)
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0e4      	beq.n	80037e8 <vTaskSwitchContext+0x24>
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4a15      	ldr	r2, [pc, #84]	; (8003880 <vTaskSwitchContext+0xbc>)
 800382a:	4413      	add	r3, r2
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	3308      	adds	r3, #8
 8003840:	429a      	cmp	r2, r3
 8003842:	d104      	bne.n	800384e <vTaskSwitchContext+0x8a>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <vTaskSwitchContext+0xc0>)
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4a08      	ldr	r2, [pc, #32]	; (800387c <vTaskSwitchContext+0xb8>)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <vTaskSwitchContext+0xc0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3354      	adds	r3, #84	; 0x54
 8003864:	4a08      	ldr	r2, [pc, #32]	; (8003888 <vTaskSwitchContext+0xc4>)
 8003866:	6013      	str	r3, [r2, #0]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	2000278c 	.word	0x2000278c
 8003878:	20002778 	.word	0x20002778
 800387c:	2000276c 	.word	0x2000276c
 8003880:	20002294 	.word	0x20002294
 8003884:	20002290 	.word	0x20002290
 8003888:	20000064 	.word	0x20000064

0800388c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	60fb      	str	r3, [r7, #12]
}
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <vTaskPlaceOnEventList+0x44>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3318      	adds	r3, #24
 80038b8:	4619      	mov	r1, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fe fe32 	bl	8002524 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038c0:	2101      	movs	r1, #1
 80038c2:	6838      	ldr	r0, [r7, #0]
 80038c4:	f000 fa84 	bl	8003dd0 <prvAddCurrentTaskToDelayedList>
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20002290 	.word	0x20002290

080038d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	617b      	str	r3, [r7, #20]
}
 80038f8:	bf00      	nop
 80038fa:	e7fe      	b.n	80038fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <vTaskPlaceOnEventListRestricted+0x54>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3318      	adds	r3, #24
 8003902:	4619      	mov	r1, r3
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7fe fdea 	bl	80024de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003914:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	68b8      	ldr	r0, [r7, #8]
 800391a:	f000 fa59 	bl	8003dd0 <prvAddCurrentTaskToDelayedList>
	}
 800391e:	bf00      	nop
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20002290 	.word	0x20002290

0800392c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	60fb      	str	r3, [r7, #12]
}
 8003954:	bf00      	nop
 8003956:	e7fe      	b.n	8003956 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3318      	adds	r3, #24
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fe19 	bl	8002594 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003962:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <xTaskRemoveFromEventList+0xb0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d11d      	bne.n	80039a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	3304      	adds	r3, #4
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fe10 	bl	8002594 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <xTaskRemoveFromEventList+0xb4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d903      	bls.n	8003988 <xTaskRemoveFromEventList+0x5c>
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <xTaskRemoveFromEventList+0xb4>)
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <xTaskRemoveFromEventList+0xb8>)
 8003996:	441a      	add	r2, r3
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f7fe fd9d 	bl	80024de <vListInsertEnd>
 80039a4:	e005      	b.n	80039b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	3318      	adds	r3, #24
 80039aa:	4619      	mov	r1, r3
 80039ac:	480e      	ldr	r0, [pc, #56]	; (80039e8 <xTaskRemoveFromEventList+0xbc>)
 80039ae:	f7fe fd96 	bl	80024de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b6:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <xTaskRemoveFromEventList+0xc0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	429a      	cmp	r2, r3
 80039be:	d905      	bls.n	80039cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <xTaskRemoveFromEventList+0xc4>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e001      	b.n	80039d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80039d0:	697b      	ldr	r3, [r7, #20]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	2000278c 	.word	0x2000278c
 80039e0:	2000276c 	.word	0x2000276c
 80039e4:	20002294 	.word	0x20002294
 80039e8:	20002724 	.word	0x20002724
 80039ec:	20002290 	.word	0x20002290
 80039f0:	20002778 	.word	0x20002778

080039f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <vTaskInternalSetTimeOutState+0x24>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <vTaskInternalSetTimeOutState+0x28>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	2000277c 	.word	0x2000277c
 8003a1c:	20002768 	.word	0x20002768

08003a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	613b      	str	r3, [r7, #16]
}
 8003a42:	bf00      	nop
 8003a44:	e7fe      	b.n	8003a44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	60fb      	str	r3, [r7, #12]
}
 8003a5e:	bf00      	nop
 8003a60:	e7fe      	b.n	8003a60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a62:	f000 febb 	bl	80047dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a66:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <xTaskCheckForTimeOut+0xbc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a7e:	d102      	bne.n	8003a86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	e023      	b.n	8003ace <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <xTaskCheckForTimeOut+0xc0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d007      	beq.n	8003aa2 <xTaskCheckForTimeOut+0x82>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	e015      	b.n	8003ace <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d20b      	bcs.n	8003ac4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	1ad2      	subs	r2, r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff9b 	bl	80039f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	e004      	b.n	8003ace <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ace:	f000 feb5 	bl	800483c <vPortExitCritical>

	return xReturn;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3720      	adds	r7, #32
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20002768 	.word	0x20002768
 8003ae0:	2000277c 	.word	0x2000277c

08003ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <vTaskMissedYield+0x14>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
}
 8003aee:	bf00      	nop
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20002778 	.word	0x20002778

08003afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b04:	f000 f852 	bl	8003bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <prvIdleTask+0x28>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d9f9      	bls.n	8003b04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <prvIdleTask+0x2c>)
 8003b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b20:	e7f0      	b.n	8003b04 <prvIdleTask+0x8>
 8003b22:	bf00      	nop
 8003b24:	20002294 	.word	0x20002294
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	e00c      	b.n	8003b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <prvInitialiseTaskLists+0x60>)
 8003b44:	4413      	add	r3, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fe fc9e 	bl	8002488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b37      	cmp	r3, #55	; 0x37
 8003b56:	d9ef      	bls.n	8003b38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b58:	480d      	ldr	r0, [pc, #52]	; (8003b90 <prvInitialiseTaskLists+0x64>)
 8003b5a:	f7fe fc95 	bl	8002488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b5e:	480d      	ldr	r0, [pc, #52]	; (8003b94 <prvInitialiseTaskLists+0x68>)
 8003b60:	f7fe fc92 	bl	8002488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b64:	480c      	ldr	r0, [pc, #48]	; (8003b98 <prvInitialiseTaskLists+0x6c>)
 8003b66:	f7fe fc8f 	bl	8002488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b6a:	480c      	ldr	r0, [pc, #48]	; (8003b9c <prvInitialiseTaskLists+0x70>)
 8003b6c:	f7fe fc8c 	bl	8002488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b70:	480b      	ldr	r0, [pc, #44]	; (8003ba0 <prvInitialiseTaskLists+0x74>)
 8003b72:	f7fe fc89 	bl	8002488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <prvInitialiseTaskLists+0x78>)
 8003b78:	4a05      	ldr	r2, [pc, #20]	; (8003b90 <prvInitialiseTaskLists+0x64>)
 8003b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <prvInitialiseTaskLists+0x7c>)
 8003b7e:	4a05      	ldr	r2, [pc, #20]	; (8003b94 <prvInitialiseTaskLists+0x68>)
 8003b80:	601a      	str	r2, [r3, #0]
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20002294 	.word	0x20002294
 8003b90:	200026f4 	.word	0x200026f4
 8003b94:	20002708 	.word	0x20002708
 8003b98:	20002724 	.word	0x20002724
 8003b9c:	20002738 	.word	0x20002738
 8003ba0:	20002750 	.word	0x20002750
 8003ba4:	2000271c 	.word	0x2000271c
 8003ba8:	20002720 	.word	0x20002720

08003bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bb2:	e019      	b.n	8003be8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bb4:	f000 fe12 	bl	80047dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <prvCheckTasksWaitingTermination+0x50>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe fce5 	bl	8002594 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <prvCheckTasksWaitingTermination+0x54>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	4a0b      	ldr	r2, [pc, #44]	; (8003c00 <prvCheckTasksWaitingTermination+0x54>)
 8003bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <prvCheckTasksWaitingTermination+0x58>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <prvCheckTasksWaitingTermination+0x58>)
 8003bdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bde:	f000 fe2d 	bl	800483c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f810 	bl	8003c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <prvCheckTasksWaitingTermination+0x58>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e1      	bne.n	8003bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20002738 	.word	0x20002738
 8003c00:	20002764 	.word	0x20002764
 8003c04:	2000274c 	.word	0x2000274c

08003c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3354      	adds	r3, #84	; 0x54
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 f8c1 	bl	8004d9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d108      	bne.n	8003c36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 ff9b 	bl	8004b64 <vPortFree>
				vPortFree( pxTCB );
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 ff98 	bl	8004b64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c34:	e018      	b.n	8003c68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d103      	bne.n	8003c48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 ff8f 	bl	8004b64 <vPortFree>
	}
 8003c46:	e00f      	b.n	8003c68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d00a      	beq.n	8003c68 <prvDeleteTCB+0x60>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	60fb      	str	r3, [r7, #12]
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <prvDeleteTCB+0x5e>
	}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <prvResetNextTaskUnblockTime+0x40>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <prvResetNextTaskUnblockTime+0x14>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <prvResetNextTaskUnblockTime+0x16>
 8003c84:	2300      	movs	r3, #0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <prvResetNextTaskUnblockTime+0x44>)
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c90:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c92:	e008      	b.n	8003ca6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <prvResetNextTaskUnblockTime+0x40>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <prvResetNextTaskUnblockTime+0x44>)
 8003ca4:	6013      	str	r3, [r2, #0]
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr
 8003cb0:	2000271c 	.word	0x2000271c
 8003cb4:	20002784 	.word	0x20002784

08003cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <xTaskGetSchedulerState+0x34>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d102      	bne.n	8003ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	e008      	b.n	8003cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <xTaskGetSchedulerState+0x38>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	e001      	b.n	8003cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003cde:	687b      	ldr	r3, [r7, #4]
	}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20002770 	.word	0x20002770
 8003cf0:	2000278c 	.word	0x2000278c

08003cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d056      	beq.n	8003db8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d0a:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <xTaskPriorityDisinherit+0xd0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d00a      	beq.n	8003d2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	60fb      	str	r3, [r7, #12]
}
 8003d26:	bf00      	nop
 8003d28:	e7fe      	b.n	8003d28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	60bb      	str	r3, [r7, #8]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4c:	1e5a      	subs	r2, r3, #1
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d02c      	beq.n	8003db8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d128      	bne.n	8003db8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fc12 	bl	8002594 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <xTaskPriorityDisinherit+0xd4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d903      	bls.n	8003d98 <xTaskPriorityDisinherit+0xa4>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <xTaskPriorityDisinherit+0xd4>)
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <xTaskPriorityDisinherit+0xd8>)
 8003da6:	441a      	add	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f7fe fb95 	bl	80024de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003db8:	697b      	ldr	r3, [r7, #20]
	}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20002290 	.word	0x20002290
 8003dc8:	2000276c 	.word	0x2000276c
 8003dcc:	20002294 	.word	0x20002294

08003dd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dda:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003de0:	4b20      	ldr	r3, [pc, #128]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fbd4 	bl	8002594 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003df2:	d10a      	bne.n	8003e0a <prvAddCurrentTaskToDelayedList+0x3a>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4619      	mov	r1, r3
 8003e02:	4819      	ldr	r0, [pc, #100]	; (8003e68 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e04:	f7fe fb6b 	bl	80024de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e08:	e026      	b.n	8003e58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d209      	bcs.n	8003e36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f7fe fb78 	bl	8002524 <vListInsert>
}
 8003e34:	e010      	b.n	8003e58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f7fe fb6e 	bl	8002524 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d202      	bcs.n	8003e58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e52:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6013      	str	r3, [r2, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20002768 	.word	0x20002768
 8003e64:	20002290 	.word	0x20002290
 8003e68:	20002750 	.word	0x20002750
 8003e6c:	20002720 	.word	0x20002720
 8003e70:	2000271c 	.word	0x2000271c
 8003e74:	20002784 	.word	0x20002784

08003e78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e82:	f000 fb5b 	bl	800453c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <xTimerCreateTimerTask+0x80>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d021      	beq.n	8003ed2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e96:	1d3a      	adds	r2, r7, #4
 8003e98:	f107 0108 	add.w	r1, r7, #8
 8003e9c:	f107 030c 	add.w	r3, r7, #12
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe fad7 	bl	8002454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	9202      	str	r2, [sp, #8]
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	460a      	mov	r2, r1
 8003eb8:	4910      	ldr	r1, [pc, #64]	; (8003efc <xTimerCreateTimerTask+0x84>)
 8003eba:	4811      	ldr	r0, [pc, #68]	; (8003f00 <xTimerCreateTimerTask+0x88>)
 8003ebc:	f7ff f8b6 	bl	800302c <xTaskCreateStatic>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <xTimerCreateTimerTask+0x8c>)
 8003ec4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <xTimerCreateTimerTask+0x8c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	613b      	str	r3, [r7, #16]
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003eee:	697b      	ldr	r3, [r7, #20]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	200027c0 	.word	0x200027c0
 8003efc:	08005048 	.word	0x08005048
 8003f00:	08004145 	.word	0x08004145
 8003f04:	200027c4 	.word	0x200027c4

08003f08 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003f16:	2030      	movs	r0, #48	; 0x30
 8003f18:	f000 fd60 	bl	80049dc <pvPortMalloc>
 8003f1c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00d      	beq.n	8003f40 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f846 	bl	8003fc4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8003f40:	697b      	ldr	r3, [r7, #20]
	}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b08a      	sub	sp, #40	; 0x28
 8003f4e:	af02      	add	r7, sp, #8
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003f58:	2330      	movs	r3, #48	; 0x30
 8003f5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b30      	cmp	r3, #48	; 0x30
 8003f60:	d00a      	beq.n	8003f78 <xTimerCreateStatic+0x2e>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	61bb      	str	r3, [r7, #24]
}
 8003f74:	bf00      	nop
 8003f76:	e7fe      	b.n	8003f76 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <xTimerCreateStatic+0x4a>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	617b      	str	r3, [r7, #20]
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f96:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f809 	bl	8003fc4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8003fba:	69fb      	ldr	r3, [r7, #28]
	}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3720      	adds	r7, #32
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	617b      	str	r3, [r7, #20]
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d015      	beq.n	8004020 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003ff4:	f000 faa2 	bl	800453c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	6a3a      	ldr	r2, [r7, #32]
 8004014:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	3304      	adds	r3, #4
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe fa53 	bl	80024c6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	623b      	str	r3, [r7, #32]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <xTimerGenericCommand+0x98>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d02a      	beq.n	80040b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b05      	cmp	r3, #5
 800406e:	dc18      	bgt.n	80040a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004070:	f7ff fe22 	bl	8003cb8 <xTaskGetSchedulerState>
 8004074:	4603      	mov	r3, r0
 8004076:	2b02      	cmp	r3, #2
 8004078:	d109      	bne.n	800408e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <xTimerGenericCommand+0x98>)
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	f107 0110 	add.w	r1, r7, #16
 8004082:	2300      	movs	r3, #0
 8004084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004086:	f7fe fbef 	bl	8002868 <xQueueGenericSend>
 800408a:	6278      	str	r0, [r7, #36]	; 0x24
 800408c:	e012      	b.n	80040b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <xTimerGenericCommand+0x98>)
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	f107 0110 	add.w	r1, r7, #16
 8004096:	2300      	movs	r3, #0
 8004098:	2200      	movs	r2, #0
 800409a:	f7fe fbe5 	bl	8002868 <xQueueGenericSend>
 800409e:	6278      	str	r0, [r7, #36]	; 0x24
 80040a0:	e008      	b.n	80040b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040a2:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <xTimerGenericCommand+0x98>)
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	f107 0110 	add.w	r1, r7, #16
 80040aa:	2300      	movs	r3, #0
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	f7fe fcd9 	bl	8002a64 <xQueueGenericSendFromISR>
 80040b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3728      	adds	r7, #40	; 0x28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200027c0 	.word	0x200027c0

080040c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040ce:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <prvProcessExpiredTimer+0x7c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3304      	adds	r3, #4
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe fa59 	bl	8002594 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d122      	bne.n	8004130 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	18d1      	adds	r1, r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f000 f8c8 	bl	800428c <prvInsertTimerInActiveList>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d016      	beq.n	8004130 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004102:	2300      	movs	r3, #0
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	2300      	movs	r3, #0
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	2100      	movs	r1, #0
 800410c:	6978      	ldr	r0, [r7, #20]
 800410e:	f7ff ff8b 	bl	8004028 <xTimerGenericCommand>
 8004112:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	60fb      	str	r3, [r7, #12]
}
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	6978      	ldr	r0, [r7, #20]
 8004136:	4798      	blx	r3
}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200027b8 	.word	0x200027b8

08004144 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800414c:	f107 0308 	add.w	r3, r7, #8
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f857 	bl	8004204 <prvGetNextExpireTime>
 8004156:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4619      	mov	r1, r3
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f803 	bl	8004168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004162:	f000 f8d5 	bl	8004310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004166:	e7f1      	b.n	800414c <prvTimerTask+0x8>

08004168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004172:	f7ff f9af 	bl	80034d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004176:	f107 0308 	add.w	r3, r7, #8
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f866 	bl	800424c <prvSampleTimeNow>
 8004180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d130      	bne.n	80041ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <prvProcessTimerOrBlockTask+0x3c>
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	429a      	cmp	r2, r3
 8004194:	d806      	bhi.n	80041a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004196:	f7ff f9ab 	bl	80034f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ff91 	bl	80040c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041a2:	e024      	b.n	80041ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041aa:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <prvProcessTimerOrBlockTask+0x90>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <prvProcessTimerOrBlockTask+0x94>)
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	4619      	mov	r1, r3
 80041ca:	f7fe fefb 	bl	8002fc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041ce:	f7ff f98f 	bl	80034f0 <xTaskResumeAll>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <prvProcessTimerOrBlockTask+0x98>)
 80041da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	f3bf 8f6f 	isb	sy
}
 80041e8:	e001      	b.n	80041ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041ea:	f7ff f981 	bl	80034f0 <xTaskResumeAll>
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200027bc 	.word	0x200027bc
 80041fc:	200027c0 	.word	0x200027c0
 8004200:	e000ed04 	.word	0xe000ed04

08004204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <prvGetNextExpireTime+0x44>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d105      	bne.n	8004236 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <prvGetNextExpireTime+0x44>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e001      	b.n	800423a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800423a:	68fb      	ldr	r3, [r7, #12]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	200027b8 	.word	0x200027b8

0800424c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004254:	f7ff f9ea 	bl	800362c <xTaskGetTickCount>
 8004258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <prvSampleTimeNow+0x3c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	429a      	cmp	r2, r3
 8004262:	d205      	bcs.n	8004270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004264:	f000 f908 	bl	8004478 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e002      	b.n	8004276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004276:	4a04      	ldr	r2, [pc, #16]	; (8004288 <prvSampleTimeNow+0x3c>)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800427c:	68fb      	ldr	r3, [r7, #12]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	200027c8 	.word	0x200027c8

0800428c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d812      	bhi.n	80042d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	1ad2      	subs	r2, r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d302      	bcc.n	80042c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e01b      	b.n	80042fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <prvInsertTimerInActiveList+0x7c>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f7fe f927 	bl	8002524 <vListInsert>
 80042d6:	e012      	b.n	80042fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d206      	bcs.n	80042ee <prvInsertTimerInActiveList+0x62>
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d302      	bcc.n	80042ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042e8:	2301      	movs	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e007      	b.n	80042fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <prvInsertTimerInActiveList+0x80>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f7fe f913 	bl	8002524 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042fe:	697b      	ldr	r3, [r7, #20]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200027bc 	.word	0x200027bc
 800430c:	200027b8 	.word	0x200027b8

08004310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	; 0x38
 8004314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004316:	e09d      	b.n	8004454 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	da18      	bge.n	8004350 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	3304      	adds	r3, #4
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	61fb      	str	r3, [r7, #28]
}
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004346:	6850      	ldr	r0, [r2, #4]
 8004348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434a:	6892      	ldr	r2, [r2, #8]
 800434c:	4611      	mov	r1, r2
 800434e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	db7e      	blt.n	8004454 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d004      	beq.n	800436c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	3304      	adds	r3, #4
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe f914 	bl	8002594 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800436c:	463b      	mov	r3, r7
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff6c 	bl	800424c <prvSampleTimeNow>
 8004374:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b09      	cmp	r3, #9
 800437a:	d86a      	bhi.n	8004452 <prvProcessReceivedCommands+0x142>
 800437c:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <prvProcessReceivedCommands+0x74>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	080043ad 	.word	0x080043ad
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043ad 	.word	0x080043ad
 8004390:	08004455 	.word	0x08004455
 8004394:	08004409 	.word	0x08004409
 8004398:	08004441 	.word	0x08004441
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043ad 	.word	0x080043ad
 80043a4:	08004455 	.word	0x08004455
 80043a8:	08004409 	.word	0x08004409
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	18d1      	adds	r1, r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ba:	f7ff ff67 	bl	800428c <prvInsertTimerInActiveList>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d047      	beq.n	8004454 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d13f      	bne.n	8004454 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	441a      	add	r2, r3
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2300      	movs	r3, #0
 80043e2:	2100      	movs	r1, #0
 80043e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e6:	f7ff fe1f 	bl	8004028 <xTimerGenericCommand>
 80043ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d130      	bne.n	8004454 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	61bb      	str	r3, [r7, #24]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	617b      	str	r3, [r7, #20]
}
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	18d1      	adds	r1, r2, r3
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800443a:	f7ff ff27 	bl	800428c <prvInsertTimerInActiveList>
					break;
 800443e:	e009      	b.n	8004454 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800444a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800444c:	f000 fb8a 	bl	8004b64 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004450:	e000      	b.n	8004454 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004452:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <prvProcessReceivedCommands+0x164>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	1d39      	adds	r1, r7, #4
 800445a:	2200      	movs	r2, #0
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe fb99 	bl	8002b94 <xQueueReceive>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	f47f af57 	bne.w	8004318 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	3730      	adds	r7, #48	; 0x30
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	200027c0 	.word	0x200027c0

08004478 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800447e:	e045      	b.n	800450c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004480:	4b2c      	ldr	r3, [pc, #176]	; (8004534 <prvSwitchTimerLists+0xbc>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800448a:	4b2a      	ldr	r3, [pc, #168]	; (8004534 <prvSwitchTimerLists+0xbc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3304      	adds	r3, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe f87b 	bl	8002594 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d12e      	bne.n	800450c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d90e      	bls.n	80044de <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044cc:	4b19      	ldr	r3, [pc, #100]	; (8004534 <prvSwitchTimerLists+0xbc>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7fe f824 	bl	8002524 <vListInsert>
 80044dc:	e016      	b.n	800450c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044de:	2300      	movs	r3, #0
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2300      	movs	r3, #0
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	2100      	movs	r1, #0
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7ff fd9d 	bl	8004028 <xTimerGenericCommand>
 80044ee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <prvSwitchTimerLists+0x94>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	603b      	str	r3, [r7, #0]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <prvSwitchTimerLists+0xbc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1b4      	bne.n	8004480 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <prvSwitchTimerLists+0xbc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <prvSwitchTimerLists+0xc0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a04      	ldr	r2, [pc, #16]	; (8004534 <prvSwitchTimerLists+0xbc>)
 8004522:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004524:	4a04      	ldr	r2, [pc, #16]	; (8004538 <prvSwitchTimerLists+0xc0>)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	6013      	str	r3, [r2, #0]
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	200027b8 	.word	0x200027b8
 8004538:	200027bc 	.word	0x200027bc

0800453c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004542:	f000 f94b 	bl	80047dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <prvCheckForValidListAndQueue+0x60>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d120      	bne.n	8004590 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800454e:	4814      	ldr	r0, [pc, #80]	; (80045a0 <prvCheckForValidListAndQueue+0x64>)
 8004550:	f7fd ff9a 	bl	8002488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004554:	4813      	ldr	r0, [pc, #76]	; (80045a4 <prvCheckForValidListAndQueue+0x68>)
 8004556:	f7fd ff97 	bl	8002488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800455a:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <prvCheckForValidListAndQueue+0x6c>)
 800455c:	4a10      	ldr	r2, [pc, #64]	; (80045a0 <prvCheckForValidListAndQueue+0x64>)
 800455e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004560:	4b12      	ldr	r3, [pc, #72]	; (80045ac <prvCheckForValidListAndQueue+0x70>)
 8004562:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <prvCheckForValidListAndQueue+0x68>)
 8004564:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004566:	2300      	movs	r3, #0
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <prvCheckForValidListAndQueue+0x74>)
 800456c:	4a11      	ldr	r2, [pc, #68]	; (80045b4 <prvCheckForValidListAndQueue+0x78>)
 800456e:	2110      	movs	r1, #16
 8004570:	200a      	movs	r0, #10
 8004572:	f7fe f8a1 	bl	80026b8 <xQueueGenericCreateStatic>
 8004576:	4603      	mov	r3, r0
 8004578:	4a08      	ldr	r2, [pc, #32]	; (800459c <prvCheckForValidListAndQueue+0x60>)
 800457a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <prvCheckForValidListAndQueue+0x60>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <prvCheckForValidListAndQueue+0x60>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	490b      	ldr	r1, [pc, #44]	; (80045b8 <prvCheckForValidListAndQueue+0x7c>)
 800458a:	4618      	mov	r0, r3
 800458c:	f7fe fcf2 	bl	8002f74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004590:	f000 f954 	bl	800483c <vPortExitCritical>
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200027c0 	.word	0x200027c0
 80045a0:	20002790 	.word	0x20002790
 80045a4:	200027a4 	.word	0x200027a4
 80045a8:	200027b8 	.word	0x200027b8
 80045ac:	200027bc 	.word	0x200027bc
 80045b0:	2000286c 	.word	0x2000286c
 80045b4:	200027cc 	.word	0x200027cc
 80045b8:	08005050 	.word	0x08005050

080045bc <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <pvTimerGetTimerID+0x28>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	60fb      	str	r3, [r7, #12]
}
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80045e4:	f000 f8fa 	bl	80047dc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80045ee:	f000 f925 	bl	800483c <vPortExitCritical>

	return pvReturn;
 80045f2:	693b      	ldr	r3, [r7, #16]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3b04      	subs	r3, #4
 800460c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3b04      	subs	r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f023 0201 	bic.w	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3b04      	subs	r3, #4
 800462a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800462c:	4a08      	ldr	r2, [pc, #32]	; (8004650 <pxPortInitialiseStack+0x54>)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3b14      	subs	r3, #20
 8004636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3b20      	subs	r3, #32
 8004642:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004644:	68fb      	ldr	r3, [r7, #12]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	08004655 	.word	0x08004655

08004654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800465a:	2300      	movs	r3, #0
 800465c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <prvTaskExitError+0x54>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004666:	d00a      	beq.n	800467e <prvTaskExitError+0x2a>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	60fb      	str	r3, [r7, #12]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <prvTaskExitError+0x28>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	60bb      	str	r3, [r7, #8]
}
 8004690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004692:	bf00      	nop
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0fc      	beq.n	8004694 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20000014 	.word	0x20000014
 80046ac:	00000000 	.word	0x00000000

080046b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <pxCurrentTCBConst2>)
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	6808      	ldr	r0, [r1, #0]
 80046b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046ba:	f380 8809 	msr	PSP, r0
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8811 	msr	BASEPRI, r0
 80046ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80046ce:	4770      	bx	lr

080046d0 <pxCurrentTCBConst2>:
 80046d0:	20002290 	.word	0x20002290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop

080046d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80046d8:	4806      	ldr	r0, [pc, #24]	; (80046f4 <prvPortStartFirstTask+0x1c>)
 80046da:	6800      	ldr	r0, [r0, #0]
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f380 8808 	msr	MSP, r0
 80046e2:	b662      	cpsie	i
 80046e4:	b661      	cpsie	f
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	df00      	svc	0
 80046f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046f2:	bf00      	nop
 80046f4:	e000ed08 	.word	0xe000ed08

080046f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046fe:	4b32      	ldr	r3, [pc, #200]	; (80047c8 <xPortStartScheduler+0xd0>)
 8004700:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	22ff      	movs	r2, #255	; 0xff
 800470e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004720:	b2da      	uxtb	r2, r3
 8004722:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <xPortStartScheduler+0xd4>)
 8004724:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004728:	2207      	movs	r2, #7
 800472a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800472c:	e009      	b.n	8004742 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800472e:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3b01      	subs	r3, #1
 8004734:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004736:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	b2db      	uxtb	r3, r3
 8004740:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474a:	2b80      	cmp	r3, #128	; 0x80
 800474c:	d0ef      	beq.n	800472e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f1c3 0307 	rsb	r3, r3, #7
 8004756:	2b04      	cmp	r3, #4
 8004758:	d00a      	beq.n	8004770 <xPortStartScheduler+0x78>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	60bb      	str	r3, [r7, #8]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004770:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004778:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <xPortStartScheduler+0xd8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <xPortStartScheduler+0xd8>)
 8004784:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800478e:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <xPortStartScheduler+0xdc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <xPortStartScheduler+0xdc>)
 8004794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004798:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800479a:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <xPortStartScheduler+0xdc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <xPortStartScheduler+0xdc>)
 80047a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047a6:	f000 f8b9 	bl	800491c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <xPortStartScheduler+0xe0>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047b0:	f7ff ff92 	bl	80046d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047b4:	f7ff f806 	bl	80037c4 <vTaskSwitchContext>
	prvTaskExitError();
 80047b8:	f7ff ff4c 	bl	8004654 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	e000e400 	.word	0xe000e400
 80047cc:	200028bc 	.word	0x200028bc
 80047d0:	200028c0 	.word	0x200028c0
 80047d4:	e000ed20 	.word	0xe000ed20
 80047d8:	20000014 	.word	0x20000014

080047dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	607b      	str	r3, [r7, #4]
}
 80047f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <vPortEnterCritical+0x58>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3301      	adds	r3, #1
 80047fc:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <vPortEnterCritical+0x58>)
 80047fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <vPortEnterCritical+0x58>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d10f      	bne.n	8004828 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <vPortEnterCritical+0x5c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <vPortEnterCritical+0x4c>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	603b      	str	r3, [r7, #0]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <vPortEnterCritical+0x4a>
	}
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000014 	.word	0x20000014
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004842:	4b11      	ldr	r3, [pc, #68]	; (8004888 <vPortExitCritical+0x4c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <vPortExitCritical+0x24>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	607b      	str	r3, [r7, #4]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <vPortExitCritical+0x4c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3b01      	subs	r3, #1
 8004866:	4a08      	ldr	r2, [pc, #32]	; (8004888 <vPortExitCritical+0x4c>)
 8004868:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <vPortExitCritical+0x4c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <vPortExitCritical+0x42>
 8004872:	2300      	movs	r3, #0
 8004874:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	f383 8811 	msr	BASEPRI, r3
}
 800487c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	20000014 	.word	0x20000014
 800488c:	00000000 	.word	0x00000000

08004890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004890:	f3ef 8009 	mrs	r0, PSP
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <pxCurrentTCBConst>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048a0:	6010      	str	r0, [r2, #0]
 80048a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80048a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048aa:	f380 8811 	msr	BASEPRI, r0
 80048ae:	f7fe ff89 	bl	80037c4 <vTaskSwitchContext>
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f380 8811 	msr	BASEPRI, r0
 80048ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6808      	ldr	r0, [r1, #0]
 80048c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048c6:	f380 8809 	msr	PSP, r0
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	4770      	bx	lr

080048d0 <pxCurrentTCBConst>:
 80048d0:	20002290 	.word	0x20002290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop

080048d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	607b      	str	r3, [r7, #4]
}
 80048f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048f2:	f7fe fea9 	bl	8003648 <xTaskIncrementTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <SysTick_Handler+0x40>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f383 8811 	msr	BASEPRI, r3
}
 800490e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <vPortSetupTimerInterrupt+0x30>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <vPortSetupTimerInterrupt+0x38>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a09      	ldr	r2, [pc, #36]	; (8004958 <vPortSetupTimerInterrupt+0x3c>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	4a08      	ldr	r2, [pc, #32]	; (800495c <vPortSetupTimerInterrupt+0x40>)
 800493a:	3b01      	subs	r3, #1
 800493c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800493e:	4b03      	ldr	r3, [pc, #12]	; (800494c <vPortSetupTimerInterrupt+0x30>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	e000e010 	.word	0xe000e010
 8004950:	e000e018 	.word	0xe000e018
 8004954:	20000008 	.word	0x20000008
 8004958:	10624dd3 	.word	0x10624dd3
 800495c:	e000e014 	.word	0xe000e014

08004960 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004966:	f3ef 8305 	mrs	r3, IPSR
 800496a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d914      	bls.n	800499c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004972:	4a16      	ldr	r2, [pc, #88]	; (80049cc <vPortValidateInterruptPriority+0x6c>)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800497c:	4b14      	ldr	r3, [pc, #80]	; (80049d0 <vPortValidateInterruptPriority+0x70>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	7afa      	ldrb	r2, [r7, #11]
 8004982:	429a      	cmp	r2, r3
 8004984:	d20a      	bcs.n	800499c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	607b      	str	r3, [r7, #4]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800499c:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <vPortValidateInterruptPriority+0x74>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049a4:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <vPortValidateInterruptPriority+0x78>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d90a      	bls.n	80049c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	603b      	str	r3, [r7, #0]
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <vPortValidateInterruptPriority+0x60>
	}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	e000e3f0 	.word	0xe000e3f0
 80049d0:	200028bc 	.word	0x200028bc
 80049d4:	e000ed0c 	.word	0xe000ed0c
 80049d8:	200028c0 	.word	0x200028c0

080049dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049e8:	f7fe fd74 	bl	80034d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049ec:	4b58      	ldr	r3, [pc, #352]	; (8004b50 <pvPortMalloc+0x174>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049f4:	f000 f910 	bl	8004c18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049f8:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <pvPortMalloc+0x178>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 808e 	bne.w	8004b22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01d      	beq.n	8004a48 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4413      	add	r3, r2
 8004a12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d014      	beq.n	8004a48 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	3308      	adds	r3, #8
 8004a26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <pvPortMalloc+0x6c>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	617b      	str	r3, [r7, #20]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d069      	beq.n	8004b22 <pvPortMalloc+0x146>
 8004a4e:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <pvPortMalloc+0x17c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d864      	bhi.n	8004b22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a58:	4b40      	ldr	r3, [pc, #256]	; (8004b5c <pvPortMalloc+0x180>)
 8004a5a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a5c:	4b3f      	ldr	r3, [pc, #252]	; (8004b5c <pvPortMalloc+0x180>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a62:	e004      	b.n	8004a6e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d903      	bls.n	8004a80 <pvPortMalloc+0xa4>
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f1      	bne.n	8004a64 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a80:	4b33      	ldr	r3, [pc, #204]	; (8004b50 <pvPortMalloc+0x174>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d04b      	beq.n	8004b22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2208      	movs	r2, #8
 8004a90:	4413      	add	r3, r2
 8004a92:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1ad2      	subs	r2, r2, r3
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d91f      	bls.n	8004aec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <pvPortMalloc+0xf8>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	613b      	str	r3, [r7, #16]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	1ad2      	subs	r2, r2, r3
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ae6:	69b8      	ldr	r0, [r7, #24]
 8004ae8:	f000 f8f8 	bl	8004cdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004aec:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <pvPortMalloc+0x17c>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <pvPortMalloc+0x17c>)
 8004af8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004afa:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <pvPortMalloc+0x17c>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <pvPortMalloc+0x184>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d203      	bcs.n	8004b0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <pvPortMalloc+0x17c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a15      	ldr	r2, [pc, #84]	; (8004b60 <pvPortMalloc+0x184>)
 8004b0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <pvPortMalloc+0x178>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b22:	f7fe fce5 	bl	80034f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <pvPortMalloc+0x16a>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <pvPortMalloc+0x168>
	return pvReturn;
 8004b46:	69fb      	ldr	r3, [r7, #28]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3728      	adds	r7, #40	; 0x28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	200034cc 	.word	0x200034cc
 8004b54:	200034d8 	.word	0x200034d8
 8004b58:	200034d0 	.word	0x200034d0
 8004b5c:	200034c4 	.word	0x200034c4
 8004b60:	200034d4 	.word	0x200034d4

08004b64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d048      	beq.n	8004c08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b76:	2308      	movs	r3, #8
 8004b78:	425b      	negs	r3, r3
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <vPortFree+0xac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <vPortFree+0x44>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	60fb      	str	r3, [r7, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	e7fe      	b.n	8004ba6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <vPortFree+0x62>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60bb      	str	r3, [r7, #8]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <vPortFree+0xac>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d019      	beq.n	8004c08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d115      	bne.n	8004c08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <vPortFree+0xac>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	401a      	ands	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bec:	f7fe fc72 	bl	80034d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <vPortFree+0xb0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	4a06      	ldr	r2, [pc, #24]	; (8004c14 <vPortFree+0xb0>)
 8004bfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bfe:	6938      	ldr	r0, [r7, #16]
 8004c00:	f000 f86c 	bl	8004cdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c04:	f7fe fc74 	bl	80034f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c08:	bf00      	nop
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	200034d8 	.word	0x200034d8
 8004c14:	200034d0 	.word	0x200034d0

08004c18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c24:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <prvHeapInit+0xac>)
 8004c26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3307      	adds	r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0307 	bic.w	r3, r3, #7
 8004c3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <prvHeapInit+0xac>)
 8004c48:	4413      	add	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c50:	4a1d      	ldr	r2, [pc, #116]	; (8004cc8 <prvHeapInit+0xb0>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c56:	4b1c      	ldr	r3, [pc, #112]	; (8004cc8 <prvHeapInit+0xb0>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4413      	add	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c64:	2208      	movs	r2, #8
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0307 	bic.w	r3, r3, #7
 8004c72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <prvHeapInit+0xb4>)
 8004c78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c7a:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <prvHeapInit+0xb4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c82:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <prvHeapInit+0xb4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	1ad2      	subs	r2, r2, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <prvHeapInit+0xb4>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <prvHeapInit+0xb8>)
 8004ca6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <prvHeapInit+0xbc>)
 8004cae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <prvHeapInit+0xc0>)
 8004cb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cb6:	601a      	str	r2, [r3, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	200028c4 	.word	0x200028c4
 8004cc8:	200034c4 	.word	0x200034c4
 8004ccc:	200034cc 	.word	0x200034cc
 8004cd0:	200034d4 	.word	0x200034d4
 8004cd4:	200034d0 	.word	0x200034d0
 8004cd8:	200034d8 	.word	0x200034d8

08004cdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <prvInsertBlockIntoFreeList+0xa8>)
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e002      	b.n	8004cf0 <prvInsertBlockIntoFreeList+0x14>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d8f7      	bhi.n	8004cea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4413      	add	r3, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d108      	bne.n	8004d1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	441a      	add	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	441a      	add	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d118      	bne.n	8004d64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <prvInsertBlockIntoFreeList+0xac>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d00d      	beq.n	8004d5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	441a      	add	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e008      	b.n	8004d6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <prvInsertBlockIntoFreeList+0xac>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e003      	b.n	8004d6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d002      	beq.n	8004d7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	200034c4 	.word	0x200034c4
 8004d88:	200034cc 	.word	0x200034cc

08004d8c <memset>:
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4402      	add	r2, r0
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d100      	bne.n	8004d96 <memset+0xa>
 8004d94:	4770      	bx	lr
 8004d96:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9a:	e7f9      	b.n	8004d90 <memset+0x4>

08004d9c <_reclaim_reent>:
 8004d9c:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <_reclaim_reent+0xa8>)
 8004d9e:	b570      	push	{r4, r5, r6, lr}
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4604      	mov	r4, r0
 8004da4:	4283      	cmp	r3, r0
 8004da6:	d04b      	beq.n	8004e40 <_reclaim_reent+0xa4>
 8004da8:	69c3      	ldr	r3, [r0, #28]
 8004daa:	b143      	cbz	r3, 8004dbe <_reclaim_reent+0x22>
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d144      	bne.n	8004e3c <_reclaim_reent+0xa0>
 8004db2:	69e3      	ldr	r3, [r4, #28]
 8004db4:	6819      	ldr	r1, [r3, #0]
 8004db6:	b111      	cbz	r1, 8004dbe <_reclaim_reent+0x22>
 8004db8:	4620      	mov	r0, r4
 8004dba:	f000 f879 	bl	8004eb0 <_free_r>
 8004dbe:	6961      	ldr	r1, [r4, #20]
 8004dc0:	b111      	cbz	r1, 8004dc8 <_reclaim_reent+0x2c>
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f000 f874 	bl	8004eb0 <_free_r>
 8004dc8:	69e1      	ldr	r1, [r4, #28]
 8004dca:	b111      	cbz	r1, 8004dd2 <_reclaim_reent+0x36>
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f000 f86f 	bl	8004eb0 <_free_r>
 8004dd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004dd4:	b111      	cbz	r1, 8004ddc <_reclaim_reent+0x40>
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 f86a 	bl	8004eb0 <_free_r>
 8004ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dde:	b111      	cbz	r1, 8004de6 <_reclaim_reent+0x4a>
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 f865 	bl	8004eb0 <_free_r>
 8004de6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004de8:	b111      	cbz	r1, 8004df0 <_reclaim_reent+0x54>
 8004dea:	4620      	mov	r0, r4
 8004dec:	f000 f860 	bl	8004eb0 <_free_r>
 8004df0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004df2:	b111      	cbz	r1, 8004dfa <_reclaim_reent+0x5e>
 8004df4:	4620      	mov	r0, r4
 8004df6:	f000 f85b 	bl	8004eb0 <_free_r>
 8004dfa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004dfc:	b111      	cbz	r1, 8004e04 <_reclaim_reent+0x68>
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f000 f856 	bl	8004eb0 <_free_r>
 8004e04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e06:	b111      	cbz	r1, 8004e0e <_reclaim_reent+0x72>
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f000 f851 	bl	8004eb0 <_free_r>
 8004e0e:	6a23      	ldr	r3, [r4, #32]
 8004e10:	b1b3      	cbz	r3, 8004e40 <_reclaim_reent+0xa4>
 8004e12:	4620      	mov	r0, r4
 8004e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e18:	4718      	bx	r3
 8004e1a:	5949      	ldr	r1, [r1, r5]
 8004e1c:	b941      	cbnz	r1, 8004e30 <_reclaim_reent+0x94>
 8004e1e:	3504      	adds	r5, #4
 8004e20:	69e3      	ldr	r3, [r4, #28]
 8004e22:	2d80      	cmp	r5, #128	; 0x80
 8004e24:	68d9      	ldr	r1, [r3, #12]
 8004e26:	d1f8      	bne.n	8004e1a <_reclaim_reent+0x7e>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f000 f841 	bl	8004eb0 <_free_r>
 8004e2e:	e7c0      	b.n	8004db2 <_reclaim_reent+0x16>
 8004e30:	680e      	ldr	r6, [r1, #0]
 8004e32:	4620      	mov	r0, r4
 8004e34:	f000 f83c 	bl	8004eb0 <_free_r>
 8004e38:	4631      	mov	r1, r6
 8004e3a:	e7ef      	b.n	8004e1c <_reclaim_reent+0x80>
 8004e3c:	2500      	movs	r5, #0
 8004e3e:	e7ef      	b.n	8004e20 <_reclaim_reent+0x84>
 8004e40:	bd70      	pop	{r4, r5, r6, pc}
 8004e42:	bf00      	nop
 8004e44:	20000064 	.word	0x20000064

08004e48 <__libc_init_array>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	2600      	movs	r6, #0
 8004e4c:	4d0c      	ldr	r5, [pc, #48]	; (8004e80 <__libc_init_array+0x38>)
 8004e4e:	4c0d      	ldr	r4, [pc, #52]	; (8004e84 <__libc_init_array+0x3c>)
 8004e50:	1b64      	subs	r4, r4, r5
 8004e52:	10a4      	asrs	r4, r4, #2
 8004e54:	42a6      	cmp	r6, r4
 8004e56:	d109      	bne.n	8004e6c <__libc_init_array+0x24>
 8004e58:	f000 f87e 	bl	8004f58 <_init>
 8004e5c:	2600      	movs	r6, #0
 8004e5e:	4d0a      	ldr	r5, [pc, #40]	; (8004e88 <__libc_init_array+0x40>)
 8004e60:	4c0a      	ldr	r4, [pc, #40]	; (8004e8c <__libc_init_array+0x44>)
 8004e62:	1b64      	subs	r4, r4, r5
 8004e64:	10a4      	asrs	r4, r4, #2
 8004e66:	42a6      	cmp	r6, r4
 8004e68:	d105      	bne.n	8004e76 <__libc_init_array+0x2e>
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}
 8004e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e70:	4798      	blx	r3
 8004e72:	3601      	adds	r6, #1
 8004e74:	e7ee      	b.n	8004e54 <__libc_init_array+0xc>
 8004e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7a:	4798      	blx	r3
 8004e7c:	3601      	adds	r6, #1
 8004e7e:	e7f2      	b.n	8004e66 <__libc_init_array+0x1e>
 8004e80:	08005238 	.word	0x08005238
 8004e84:	08005238 	.word	0x08005238
 8004e88:	08005238 	.word	0x08005238
 8004e8c:	0800523c 	.word	0x0800523c

08004e90 <__retarget_lock_acquire_recursive>:
 8004e90:	4770      	bx	lr

08004e92 <__retarget_lock_release_recursive>:
 8004e92:	4770      	bx	lr

08004e94 <memcpy>:
 8004e94:	440a      	add	r2, r1
 8004e96:	4291      	cmp	r1, r2
 8004e98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e9c:	d100      	bne.n	8004ea0 <memcpy+0xc>
 8004e9e:	4770      	bx	lr
 8004ea0:	b510      	push	{r4, lr}
 8004ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ea6:	4291      	cmp	r1, r2
 8004ea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eac:	d1f9      	bne.n	8004ea2 <memcpy+0xe>
 8004eae:	bd10      	pop	{r4, pc}

08004eb0 <_free_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	d040      	beq.n	8004f3a <_free_r+0x8a>
 8004eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ebc:	1f0c      	subs	r4, r1, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bfb8      	it	lt
 8004ec2:	18e4      	addlt	r4, r4, r3
 8004ec4:	f000 f83c 	bl	8004f40 <__malloc_lock>
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <_free_r+0x8c>)
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	b933      	cbnz	r3, 8004edc <_free_r+0x2c>
 8004ece:	6063      	str	r3, [r4, #4]
 8004ed0:	6014      	str	r4, [r2, #0]
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ed8:	f000 b838 	b.w	8004f4c <__malloc_unlock>
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	d908      	bls.n	8004ef2 <_free_r+0x42>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	1821      	adds	r1, r4, r0
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf01      	itttt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	1809      	addeq	r1, r1, r0
 8004eee:	6021      	streq	r1, [r4, #0]
 8004ef0:	e7ed      	b.n	8004ece <_free_r+0x1e>
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	b10b      	cbz	r3, 8004efc <_free_r+0x4c>
 8004ef8:	42a3      	cmp	r3, r4
 8004efa:	d9fa      	bls.n	8004ef2 <_free_r+0x42>
 8004efc:	6811      	ldr	r1, [r2, #0]
 8004efe:	1850      	adds	r0, r2, r1
 8004f00:	42a0      	cmp	r0, r4
 8004f02:	d10b      	bne.n	8004f1c <_free_r+0x6c>
 8004f04:	6820      	ldr	r0, [r4, #0]
 8004f06:	4401      	add	r1, r0
 8004f08:	1850      	adds	r0, r2, r1
 8004f0a:	4283      	cmp	r3, r0
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	d1e0      	bne.n	8004ed2 <_free_r+0x22>
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4408      	add	r0, r1
 8004f16:	6010      	str	r0, [r2, #0]
 8004f18:	6053      	str	r3, [r2, #4]
 8004f1a:	e7da      	b.n	8004ed2 <_free_r+0x22>
 8004f1c:	d902      	bls.n	8004f24 <_free_r+0x74>
 8004f1e:	230c      	movs	r3, #12
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	e7d6      	b.n	8004ed2 <_free_r+0x22>
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	1821      	adds	r1, r4, r0
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	bf01      	itttt	eq
 8004f2c:	6819      	ldreq	r1, [r3, #0]
 8004f2e:	685b      	ldreq	r3, [r3, #4]
 8004f30:	1809      	addeq	r1, r1, r0
 8004f32:	6021      	streq	r1, [r4, #0]
 8004f34:	6063      	str	r3, [r4, #4]
 8004f36:	6054      	str	r4, [r2, #4]
 8004f38:	e7cb      	b.n	8004ed2 <_free_r+0x22>
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	20003618 	.word	0x20003618

08004f40 <__malloc_lock>:
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <__malloc_lock+0x8>)
 8004f42:	f7ff bfa5 	b.w	8004e90 <__retarget_lock_acquire_recursive>
 8004f46:	bf00      	nop
 8004f48:	20003614 	.word	0x20003614

08004f4c <__malloc_unlock>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <__malloc_unlock+0x8>)
 8004f4e:	f7ff bfa0 	b.w	8004e92 <__retarget_lock_release_recursive>
 8004f52:	bf00      	nop
 8004f54:	20003614 	.word	0x20003614

08004f58 <_init>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	bf00      	nop
 8004f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5e:	bc08      	pop	{r3}
 8004f60:	469e      	mov	lr, r3
 8004f62:	4770      	bx	lr

08004f64 <_fini>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr
