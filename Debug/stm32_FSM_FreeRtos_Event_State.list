
stm32_FSM_FreeRtos_Event_State.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c4  080052c4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080052c4  080052c4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052c4  080052c4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080052cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003650  20000060  0800532c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200036b0  0800532c  000236b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000141f8  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002de4  00000000  00000000  000342c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  000370a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d68  00000000  00000000  00038210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ee6  00000000  00000000  00038f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012149  00000000  00000000  0003be5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092198  00000000  00000000  0004dfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b38  00000000  00000000  000e0140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e4c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fe4 	.word	0x08004fe4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004fe4 	.word	0x08004fe4

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fbd8 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f8cc 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f906 	bl	800036c <MX_GPIO_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 fd10 	bl	8001b84 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBlinkDelay */
  TimerBlinkDelayHandle = osTimerNew(CallbackTimerBlinkDelay, osTimerOnce, NULL, &TimerBlinkDelay_attributes);
 8000164:	4b3d      	ldr	r3, [pc, #244]	; (800025c <main+0x10c>)
 8000166:	2200      	movs	r2, #0
 8000168:	2100      	movs	r1, #0
 800016a:	483d      	ldr	r0, [pc, #244]	; (8000260 <main+0x110>)
 800016c:	f001 fe5e 	bl	8001e2c <osTimerNew>
 8000170:	4603      	mov	r3, r0
 8000172:	4a3c      	ldr	r2, [pc, #240]	; (8000264 <main+0x114>)
 8000174:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue0 */
  myQueue0Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue0_attributes);
 8000176:	4a3c      	ldr	r2, [pc, #240]	; (8000268 <main+0x118>)
 8000178:	2102      	movs	r1, #2
 800017a:	2004      	movs	r0, #4
 800017c:	f001 ff1a 	bl	8001fb4 <osMessageQueueNew>
 8000180:	4603      	mov	r3, r0
 8000182:	4a3a      	ldr	r2, [pc, #232]	; (800026c <main+0x11c>)
 8000184:	6013      	str	r3, [r2, #0]

  /* creation of myQueue1 */
  myQueue1Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue1_attributes);
 8000186:	4a3a      	ldr	r2, [pc, #232]	; (8000270 <main+0x120>)
 8000188:	2102      	movs	r1, #2
 800018a:	2004      	movs	r0, #4
 800018c:	f001 ff12 	bl	8001fb4 <osMessageQueueNew>
 8000190:	4603      	mov	r3, r0
 8000192:	4a38      	ldr	r2, [pc, #224]	; (8000274 <main+0x124>)
 8000194:	6013      	str	r3, [r2, #0]

  /* creation of myQueue2 */
  myQueue2Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue2_attributes);
 8000196:	4a38      	ldr	r2, [pc, #224]	; (8000278 <main+0x128>)
 8000198:	2102      	movs	r1, #2
 800019a:	2004      	movs	r0, #4
 800019c:	f001 ff0a 	bl	8001fb4 <osMessageQueueNew>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4a36      	ldr	r2, [pc, #216]	; (800027c <main+0x12c>)
 80001a4:	6013      	str	r3, [r2, #0]

  /* creation of myQueue3 */
  myQueue3Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue3_attributes);
 80001a6:	4a36      	ldr	r2, [pc, #216]	; (8000280 <main+0x130>)
 80001a8:	2102      	movs	r1, #2
 80001aa:	2004      	movs	r0, #4
 80001ac:	f001 ff02 	bl	8001fb4 <osMessageQueueNew>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4a34      	ldr	r2, [pc, #208]	; (8000284 <main+0x134>)
 80001b4:	6013      	str	r3, [r2, #0]

  /* creation of myQueue4 */
  myQueue4Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue4_attributes);
 80001b6:	4a34      	ldr	r2, [pc, #208]	; (8000288 <main+0x138>)
 80001b8:	2102      	movs	r1, #2
 80001ba:	2004      	movs	r0, #4
 80001bc:	f001 fefa 	bl	8001fb4 <osMessageQueueNew>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4a32      	ldr	r2, [pc, #200]	; (800028c <main+0x13c>)
 80001c4:	6013      	str	r3, [r2, #0]

  /* creation of myQueue5 */
  myQueue5Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue5_attributes);
 80001c6:	4a32      	ldr	r2, [pc, #200]	; (8000290 <main+0x140>)
 80001c8:	2102      	movs	r1, #2
 80001ca:	2004      	movs	r0, #4
 80001cc:	f001 fef2 	bl	8001fb4 <osMessageQueueNew>
 80001d0:	4603      	mov	r3, r0
 80001d2:	4a30      	ldr	r2, [pc, #192]	; (8000294 <main+0x144>)
 80001d4:	6013      	str	r3, [r2, #0]

  /* creation of myQueue6 */
  myQueue6Handle = osMessageQueueNew (4, sizeof(uint16_t), &myQueue6_attributes);
 80001d6:	4a30      	ldr	r2, [pc, #192]	; (8000298 <main+0x148>)
 80001d8:	2102      	movs	r1, #2
 80001da:	2004      	movs	r0, #4
 80001dc:	f001 feea 	bl	8001fb4 <osMessageQueueNew>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a2e      	ldr	r2, [pc, #184]	; (800029c <main+0x14c>)
 80001e4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskBlinkLong */
  TaskBlinkLongHandle = osThreadNew(fTaskBlinkLong, NULL, &TaskBlinkLong_attributes);
 80001e6:	4a2e      	ldr	r2, [pc, #184]	; (80002a0 <main+0x150>)
 80001e8:	2100      	movs	r1, #0
 80001ea:	482e      	ldr	r0, [pc, #184]	; (80002a4 <main+0x154>)
 80001ec:	f001 fd30 	bl	8001c50 <osThreadNew>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4a2d      	ldr	r2, [pc, #180]	; (80002a8 <main+0x158>)
 80001f4:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlinkShort */
  TaskBlinkShortHandle = osThreadNew(fTaskBlinkShort, NULL, &TaskBlinkShort_attributes);
 80001f6:	4a2d      	ldr	r2, [pc, #180]	; (80002ac <main+0x15c>)
 80001f8:	2100      	movs	r1, #0
 80001fa:	482d      	ldr	r0, [pc, #180]	; (80002b0 <main+0x160>)
 80001fc:	f001 fd28 	bl	8001c50 <osThreadNew>
 8000200:	4603      	mov	r3, r0
 8000202:	4a2c      	ldr	r2, [pc, #176]	; (80002b4 <main+0x164>)
 8000204:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlinkReal */
  TaskBlinkRealHandle = osThreadNew(fTaskBlinkReal, NULL, &TaskBlinkReal_attributes);
 8000206:	4a2c      	ldr	r2, [pc, #176]	; (80002b8 <main+0x168>)
 8000208:	2100      	movs	r1, #0
 800020a:	482c      	ldr	r0, [pc, #176]	; (80002bc <main+0x16c>)
 800020c:	f001 fd20 	bl	8001c50 <osThreadNew>
 8000210:	4603      	mov	r3, r0
 8000212:	4a2b      	ldr	r2, [pc, #172]	; (80002c0 <main+0x170>)
 8000214:	6013      	str	r3, [r2, #0]

  /* creation of TaskStart */
  TaskStartHandle = osThreadNew(fTaskStart, NULL, &TaskStart_attributes);
 8000216:	4a2b      	ldr	r2, [pc, #172]	; (80002c4 <main+0x174>)
 8000218:	2100      	movs	r1, #0
 800021a:	482b      	ldr	r0, [pc, #172]	; (80002c8 <main+0x178>)
 800021c:	f001 fd18 	bl	8001c50 <osThreadNew>
 8000220:	4603      	mov	r3, r0
 8000222:	4a2a      	ldr	r2, [pc, #168]	; (80002cc <main+0x17c>)
 8000224:	6013      	str	r3, [r2, #0]

  /* creation of TaskTimerEvent */
  TaskTimerEventHandle = osThreadNew(fTaskTimerEvent, NULL, &TaskTimerEvent_attributes);
 8000226:	4a2a      	ldr	r2, [pc, #168]	; (80002d0 <main+0x180>)
 8000228:	2100      	movs	r1, #0
 800022a:	482a      	ldr	r0, [pc, #168]	; (80002d4 <main+0x184>)
 800022c:	f001 fd10 	bl	8001c50 <osThreadNew>
 8000230:	4603      	mov	r3, r0
 8000232:	4a29      	ldr	r2, [pc, #164]	; (80002d8 <main+0x188>)
 8000234:	6013      	str	r3, [r2, #0]

  /* creation of TaskStartFSM1 */
  TaskStartFSM1Handle = osThreadNew(fTaskStartFSM1, NULL, &TaskStartFSM1_attributes);
 8000236:	4a29      	ldr	r2, [pc, #164]	; (80002dc <main+0x18c>)
 8000238:	2100      	movs	r1, #0
 800023a:	4829      	ldr	r0, [pc, #164]	; (80002e0 <main+0x190>)
 800023c:	f001 fd08 	bl	8001c50 <osThreadNew>
 8000240:	4603      	mov	r3, r0
 8000242:	4a28      	ldr	r2, [pc, #160]	; (80002e4 <main+0x194>)
 8000244:	6013      	str	r3, [r2, #0]

  /* creation of TaskStartFSM2 */
  TaskStartFSM2Handle = osThreadNew(fTaskStartFSM2, NULL, &TaskStartFSM2_attributes);
 8000246:	4a28      	ldr	r2, [pc, #160]	; (80002e8 <main+0x198>)
 8000248:	2100      	movs	r1, #0
 800024a:	4828      	ldr	r0, [pc, #160]	; (80002ec <main+0x19c>)
 800024c:	f001 fd00 	bl	8001c50 <osThreadNew>
 8000250:	4603      	mov	r3, r0
 8000252:	4a27      	ldr	r2, [pc, #156]	; (80002f0 <main+0x1a0>)
 8000254:	6013      	str	r3, [r2, #0]
  /* add events, ... */
  //initializeTransitionTable((int8_t **)transitionTable, NUM_STATES, NUM_EVENTS);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000256:	f001 fcc7 	bl	8001be8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025a:	e7fe      	b.n	800025a <main+0x10a>
 800025c:	08005288 	.word	0x08005288
 8000260:	080006d5 	.word	0x080006d5
 8000264:	20001a14 	.word	0x20001a14
 8000268:	080051e0 	.word	0x080051e0
 800026c:	20001790 	.word	0x20001790
 8000270:	080051f8 	.word	0x080051f8
 8000274:	200017ec 	.word	0x200017ec
 8000278:	08005210 	.word	0x08005210
 800027c:	20001848 	.word	0x20001848
 8000280:	08005228 	.word	0x08005228
 8000284:	200018a4 	.word	0x200018a4
 8000288:	08005240 	.word	0x08005240
 800028c:	20001900 	.word	0x20001900
 8000290:	08005258 	.word	0x08005258
 8000294:	2000195c 	.word	0x2000195c
 8000298:	08005270 	.word	0x08005270
 800029c:	200019b8 	.word	0x200019b8
 80002a0:	080050e4 	.word	0x080050e4
 80002a4:	08000405 	.word	0x08000405
 80002a8:	2000007c 	.word	0x2000007c
 80002ac:	08005108 	.word	0x08005108
 80002b0:	08000469 	.word	0x08000469
 80002b4:	200003c8 	.word	0x200003c8
 80002b8:	0800512c 	.word	0x0800512c
 80002bc:	080004cd 	.word	0x080004cd
 80002c0:	20000714 	.word	0x20000714
 80002c4:	08005150 	.word	0x08005150
 80002c8:	08000531 	.word	0x08000531
 80002cc:	20000a60 	.word	0x20000a60
 80002d0:	08005174 	.word	0x08005174
 80002d4:	08000635 	.word	0x08000635
 80002d8:	20000dac 	.word	0x20000dac
 80002dc:	08005198 	.word	0x08005198
 80002e0:	08000685 	.word	0x08000685
 80002e4:	200010f8 	.word	0x200010f8
 80002e8:	080051bc 	.word	0x080051bc
 80002ec:	080006ad 	.word	0x080006ad
 80002f0:	20001444 	.word	0x20001444

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b090      	sub	sp, #64	; 0x40
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f004 fd87 	bl	8004e16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000316:	2302      	movs	r3, #2
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	2310      	movs	r3, #16
 8000320:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000322:	2300      	movs	r3, #0
 8000324:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0318 	add.w	r3, r7, #24
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fdb4 	bl	8000e98 <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000336:	f000 f9eb 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033e:	2300      	movs	r3, #0
 8000340:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f001 f822 	bl	800139c <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800035e:	f000 f9d7 	bl	8000710 <Error_Handler>
  }
}
 8000362:	bf00      	nop
 8000364:	3740      	adds	r7, #64	; 0x40
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000380:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a1d      	ldr	r2, [pc, #116]	; (80003fc <MX_GPIO_Init+0x90>)
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0310 	and.w	r3, r3, #16
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a17      	ldr	r2, [pc, #92]	; (80003fc <MX_GPIO_Init+0x90>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0304 	and.w	r3, r3, #4
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a11      	ldr	r2, [pc, #68]	; (80003fc <MX_GPIO_Init+0x90>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0308 	and.w	r3, r3, #8
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	480c      	ldr	r0, [pc, #48]	; (8000400 <MX_GPIO_Init+0x94>)
 80003d0:	f000 fd30 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <MX_GPIO_Init+0x94>)
 80003ee:	f000 fb9d 	bl	8000b2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f2:	bf00      	nop
 80003f4:	3720      	adds	r7, #32
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	40011000 	.word	0x40011000

08000404 <fTaskBlinkLong>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fTaskBlinkLong */
void fTaskBlinkLong(void *argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	State_t currentState = TaskBlinkLong;
 800040c:	2300      	movs	r3, #0
 800040e:	72fb      	strb	r3, [r7, #11]
	const uint32_t xFrequency = 1000; // 1000 миллисекунд
 8000410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000414:	617b      	str	r3, [r7, #20]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8000416:	f241 7370 	movw	r3, #6000	; 0x1770
 800041a:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  waitForOwnState(&currentState);
 800041c:	f107 030b 	add.w	r3, r7, #11
 8000420:	4618      	mov	r0, r3
 8000422:	f004 fccd 	bl	8004dc0 <waitForOwnState>

	  TickType_t xLastWakeTime = xTaskGetTickCount();
 8000426:	f002 ff4f 	bl	80032c8 <xTaskGetTickCount>
 800042a:	4603      	mov	r3, r0
 800042c:	60fb      	str	r3, [r7, #12]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 800042e:	e007      	b.n	8000440 <fTaskBlinkLong+0x3c>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8000430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <fTaskBlinkLong+0x60>)
 8000436:	f000 fd15 	bl	8000e64 <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 800043a:	6978      	ldr	r0, [r7, #20]
 800043c:	f001 fcb2 	bl	8001da4 <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8000440:	f002 ff42 	bl	80032c8 <xTaskGetTickCount>
 8000444:	4603      	mov	r3, r0
 8000446:	461a      	mov	r2, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	1ad3      	subs	r3, r2, r3
 800044c:	693a      	ldr	r2, [r7, #16]
 800044e:	429a      	cmp	r2, r3
 8000450:	d8ee      	bhi.n	8000430 <fTaskBlinkLong+0x2c>
	  }
		sendToTransitionEndState(currentState);
 8000452:	7afb      	ldrb	r3, [r7, #11]
 8000454:	b25b      	sxtb	r3, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f004 fc9c 	bl	8004d94 <sendToTransitionEndState>
	    osDelay(1);
 800045c:	2001      	movs	r0, #1
 800045e:	f001 fca1 	bl	8001da4 <osDelay>
  {
 8000462:	e7db      	b.n	800041c <fTaskBlinkLong+0x18>
 8000464:	40011000 	.word	0x40011000

08000468 <fTaskBlinkShort>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskBlinkShort */
void fTaskBlinkShort(void *argument)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskBlinkShort */
	State_t currentState = TaskBlinkShort;
 8000470:	2301      	movs	r3, #1
 8000472:	72fb      	strb	r3, [r7, #11]
	const uint32_t xFrequency = 500; // 500 миллисекунд
 8000474:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000478:	617b      	str	r3, [r7, #20]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 800047a:	f241 7370 	movw	r3, #6000	; 0x1770
 800047e:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  waitForOwnState(&currentState);
 8000480:	f107 030b 	add.w	r3, r7, #11
 8000484:	4618      	mov	r0, r3
 8000486:	f004 fc9b 	bl	8004dc0 <waitForOwnState>
	 //xQueueReceive(stateQueueMappings[currentState], &currentState, portMAX_DELAY);

	  TickType_t xLastWakeTime = xTaskGetTickCount();
 800048a:	f002 ff1d 	bl	80032c8 <xTaskGetTickCount>
 800048e:	4603      	mov	r3, r0
 8000490:	60fb      	str	r3, [r7, #12]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8000492:	e007      	b.n	80004a4 <fTaskBlinkShort+0x3c>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8000494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000498:	480b      	ldr	r0, [pc, #44]	; (80004c8 <fTaskBlinkShort+0x60>)
 800049a:	f000 fce3 	bl	8000e64 <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 800049e:	6978      	ldr	r0, [r7, #20]
 80004a0:	f001 fc80 	bl	8001da4 <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 80004a4:	f002 ff10 	bl	80032c8 <xTaskGetTickCount>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	693a      	ldr	r2, [r7, #16]
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d8ee      	bhi.n	8000494 <fTaskBlinkShort+0x2c>
	  }
		sendToTransitionEndState(currentState);
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	b25b      	sxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f004 fc6a 	bl	8004d94 <sendToTransitionEndState>
	    osDelay(1);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f001 fc6f 	bl	8001da4 <osDelay>
  {
 80004c6:	e7db      	b.n	8000480 <fTaskBlinkShort+0x18>
 80004c8:	40011000 	.word	0x40011000

080004cc <fTaskBlinkReal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskBlinkReal */
void fTaskBlinkReal(void *argument)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskBlinkReal */
	State_t currentState = TaskBlinkReal;
 80004d4:	2302      	movs	r3, #2
 80004d6:	72fb      	strb	r3, [r7, #11]
	const uint32_t xFrequency = 100; // 100 миллисекунд
 80004d8:	2364      	movs	r3, #100	; 0x64
 80004da:	617b      	str	r3, [r7, #20]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(2000); // 6 секунд
 80004dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004e0:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	  waitForOwnState(&currentState);
 80004e2:	f107 030b 	add.w	r3, r7, #11
 80004e6:	4618      	mov	r0, r3
 80004e8:	f004 fc6a 	bl	8004dc0 <waitForOwnState>

	  TickType_t xLastWakeTime = xTaskGetTickCount();
 80004ec:	f002 feec 	bl	80032c8 <xTaskGetTickCount>
 80004f0:	4603      	mov	r3, r0
 80004f2:	60fb      	str	r3, [r7, #12]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 80004f4:	e007      	b.n	8000506 <fTaskBlinkReal+0x3a>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	480c      	ldr	r0, [pc, #48]	; (800052c <fTaskBlinkReal+0x60>)
 80004fc:	f000 fcb2 	bl	8000e64 <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8000500:	6978      	ldr	r0, [r7, #20]
 8000502:	f001 fc4f 	bl	8001da4 <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8000506:	f002 fedf 	bl	80032c8 <xTaskGetTickCount>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	693a      	ldr	r2, [r7, #16]
 8000514:	429a      	cmp	r2, r3
 8000516:	d8ee      	bhi.n	80004f6 <fTaskBlinkReal+0x2a>
	  }
		sendToTransitionEndState(currentState);
 8000518:	7afb      	ldrb	r3, [r7, #11]
 800051a:	b25b      	sxtb	r3, r3
 800051c:	4618      	mov	r0, r3
 800051e:	f004 fc39 	bl	8004d94 <sendToTransitionEndState>
	    osDelay(1);
 8000522:	2001      	movs	r0, #1
 8000524:	f001 fc3e 	bl	8001da4 <osDelay>
  {
 8000528:	e7db      	b.n	80004e2 <fTaskBlinkReal+0x16>
 800052a:	bf00      	nop
 800052c:	40011000 	.word	0x40011000

08000530 <fTaskStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStart */
void fTaskStart(void *argument)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
		TaskTimerEvent : Ожидание обновление таймера
		TaskBlinkReal --> TaskTimerEvent
		TaskBlinkReal  : Быстрое мигание
		@enduml
	 */
	initializeTransitionEvent(transitionTable, NUM_STATES, NUM_EVENTS);
 8000538:	220a      	movs	r2, #10
 800053a:	210a      	movs	r1, #10
 800053c:	4833      	ldr	r0, [pc, #204]	; (800060c <fTaskStart+0xdc>)
 800053e:	f004 fa75 	bl	8004a2c <initializeTransitionEvent>
	initializeTransitionEndState(transitionEndState, NUM_STATES);
 8000542:	210a      	movs	r1, #10
 8000544:	4832      	ldr	r0, [pc, #200]	; (8000610 <fTaskStart+0xe0>)
 8000546:	f004 facb 	bl	8004ae0 <initializeTransitionEndState>
	initializeTransitionFork(transitionForkState, NUM_STATES, NUM_STATES);
 800054a:	220a      	movs	r2, #10
 800054c:	210a      	movs	r1, #10
 800054e:	4831      	ldr	r0, [pc, #196]	; (8000614 <fTaskStart+0xe4>)
 8000550:	f004 fa99 	bl	8004a86 <initializeTransitionFork>

	addToTransitionFork(TaskStart, TaskStartFSM1);
 8000554:	2105      	movs	r1, #5
 8000556:	2003      	movs	r0, #3
 8000558:	f004 fade 	bl	8004b18 <addToTransitionFork>
	addToTransitionFork(TaskStart, TaskStartFSM2);
 800055c:	2106      	movs	r1, #6
 800055e:	2003      	movs	r0, #3
 8000560:	f004 fada 	bl	8004b18 <addToTransitionFork>

	addToTransitionEndState(TaskStartFSM1, TaskBlinkShort);
 8000564:	2101      	movs	r1, #1
 8000566:	2005      	movs	r0, #5
 8000568:	f004 fb26 	bl	8004bb8 <addToTransitionEndState>
	addToTransitionEndState(TaskBlinkShort, TaskBlinkLong);
 800056c:	2100      	movs	r1, #0
 800056e:	2001      	movs	r0, #1
 8000570:	f004 fb22 	bl	8004bb8 <addToTransitionEndState>
	addToTransitionEndState(TaskBlinkLong, TaskBlinkShort);
 8000574:	2101      	movs	r1, #1
 8000576:	2000      	movs	r0, #0
 8000578:	f004 fb1e 	bl	8004bb8 <addToTransitionEndState>
	addToTransitionEndState(TaskStartFSM2, TaskTimerEvent);
 800057c:	2104      	movs	r1, #4
 800057e:	2006      	movs	r0, #6
 8000580:	f004 fb1a 	bl	8004bb8 <addToTransitionEndState>
	addToTransitionEndState(TaskBlinkReal, TaskTimerEvent);
 8000584:	2104      	movs	r1, #4
 8000586:	2002      	movs	r0, #2
 8000588:	f004 fb16 	bl	8004bb8 <addToTransitionEndState>

	addToTransitionEvent(TaskTimerEvent, TaskBlinkReal, EVENT_TIMER_UPDATE);
 800058c:	2200      	movs	r2, #0
 800058e:	2102      	movs	r1, #2
 8000590:	2004      	movs	r0, #4
 8000592:	f004 fae7 	bl	8004b64 <addToTransitionEvent>

	createStateQueueMapping(TaskStart, myQueue0Handle);
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <fTaskStart+0xe8>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4619      	mov	r1, r3
 800059c:	2003      	movs	r0, #3
 800059e:	f004 fb5b 	bl	8004c58 <createStateQueueMapping>
	createStateQueueMapping(TaskStartFSM1, myQueue1Handle);
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <fTaskStart+0xec>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2005      	movs	r0, #5
 80005aa:	f004 fb55 	bl	8004c58 <createStateQueueMapping>
	createStateQueueMapping(TaskStartFSM2, myQueue2Handle);
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <fTaskStart+0xf0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2006      	movs	r0, #6
 80005b6:	f004 fb4f 	bl	8004c58 <createStateQueueMapping>
	createStateQueueMapping(TaskBlinkShort, myQueue3Handle);
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <fTaskStart+0xf4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4619      	mov	r1, r3
 80005c0:	2001      	movs	r0, #1
 80005c2:	f004 fb49 	bl	8004c58 <createStateQueueMapping>
	createStateQueueMapping(TaskBlinkLong, myQueue4Handle);
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <fTaskStart+0xf8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4619      	mov	r1, r3
 80005cc:	2000      	movs	r0, #0
 80005ce:	f004 fb43 	bl	8004c58 <createStateQueueMapping>
	createStateQueueMapping(TaskBlinkReal, myQueue5Handle);
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <fTaskStart+0xfc>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4619      	mov	r1, r3
 80005d8:	2002      	movs	r0, #2
 80005da:	f004 fb3d 	bl	8004c58 <createStateQueueMapping>
	createStateQueueMapping(TaskTimerEvent, myQueue6Handle);
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <fTaskStart+0x100>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	2004      	movs	r0, #4
 80005e6:	f004 fb37 	bl	8004c58 <createStateQueueMapping>

	State_t currentState = TaskStart;
 80005ea:	2303      	movs	r3, #3
 80005ec:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	sendToTransitionFork(currentState);
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fb82 	bl	8004cfc <sendToTransitionFork>
	waitForOwnState(&currentState);
 80005f8:	f107 030f 	add.w	r3, r7, #15
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fbdf 	bl	8004dc0 <waitForOwnState>
	  osDelay(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f001 fbce 	bl	8001da4 <osDelay>
	sendToTransitionFork(currentState);
 8000608:	e7f1      	b.n	80005ee <fTaskStart+0xbe>
 800060a:	bf00      	nop
 800060c:	20003474 	.word	0x20003474
 8000610:	200034d8 	.word	0x200034d8
 8000614:	200034e4 	.word	0x200034e4
 8000618:	20001790 	.word	0x20001790
 800061c:	200017ec 	.word	0x200017ec
 8000620:	20001848 	.word	0x20001848
 8000624:	200018a4 	.word	0x200018a4
 8000628:	20001900 	.word	0x20001900
 800062c:	2000195c 	.word	0x2000195c
 8000630:	200019b8 	.word	0x200019b8

08000634 <fTaskTimerEvent>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskTimerEvent */
void fTaskTimerEvent(void *argument)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskTimerEvent */
	State_t currentState = TaskTimerEvent;
 800063c:	2304      	movs	r3, #4
 800063e:	73fb      	strb	r3, [r7, #15]
	Event_t event = NUM_EVENTS;
 8000640:	230a      	movs	r3, #10
 8000642:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	waitForOwnState(&currentState);
 8000644:	f107 030f 	add.w	r3, r7, #15
 8000648:	4618      	mov	r0, r3
 800064a:	f004 fbb9 	bl	8004dc0 <waitForOwnState>
	osTimerStart(TimerBlinkDelayHandle, pdMS_TO_TICKS(10000));
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <fTaskTimerEvent+0x4c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f242 7110 	movw	r1, #10000	; 0x2710
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fc6c 	bl	8001f34 <osTimerStart>
	waitForOwnEvent(currentState, &event);
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	b25b      	sxtb	r3, r3
 8000660:	f107 020e 	add.w	r2, r7, #14
 8000664:	4611      	mov	r1, r2
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fbbf 	bl	8004dea <waitForOwnEvent>
	sendToTransitionEvent(TaskTimerEvent, event);
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	b25b      	sxtb	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	2004      	movs	r0, #4
 8000674:	f004 fb72 	bl	8004d5c <sendToTransitionEvent>

    osDelay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f001 fb93 	bl	8001da4 <osDelay>
	waitForOwnState(&currentState);
 800067e:	e7e1      	b.n	8000644 <fTaskTimerEvent+0x10>
 8000680:	20001a14 	.word	0x20001a14

08000684 <fTaskStartFSM1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStartFSM1 */
void fTaskStartFSM1(void *argument)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStartFSM1 */
	State_t currentState = TaskStartFSM1;
 800068c:	2305      	movs	r3, #5
 800068e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	waitForOwnState(&currentState);
 8000690:	f107 030f 	add.w	r3, r7, #15
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fb93 	bl	8004dc0 <waitForOwnState>

	sendToTransitionEndState(currentState);
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fb78 	bl	8004d94 <sendToTransitionEndState>
    osDelay(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f001 fb7d 	bl	8001da4 <osDelay>
	waitForOwnState(&currentState);
 80006aa:	e7f1      	b.n	8000690 <fTaskStartFSM1+0xc>

080006ac <fTaskStartFSM2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskStartFSM2 */
void fTaskStartFSM2(void *argument)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskStartFSM2 */
	State_t currentState = TaskStartFSM2;
 80006b4:	2306      	movs	r3, #6
 80006b6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	waitForOwnState(&currentState);
 80006b8:	f107 030f 	add.w	r3, r7, #15
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fb7f 	bl	8004dc0 <waitForOwnState>

	sendToTransitionEndState(currentState);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fb64 	bl	8004d94 <sendToTransitionEndState>
    osDelay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f001 fb69 	bl	8001da4 <osDelay>
	waitForOwnState(&currentState);
 80006d2:	e7f1      	b.n	80006b8 <fTaskStartFSM2+0xc>

080006d4 <CallbackTimerBlinkDelay>:
  /* USER CODE END fTaskStartFSM2 */
}

/* CallbackTimerBlinkDelay function */
void CallbackTimerBlinkDelay(void *argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBlinkDelay */
	MessageQueueEvent(TaskTimerEvent, EVENT_TIMER_UPDATE);
 80006dc:	2100      	movs	r1, #0
 80006de:	2004      	movs	r0, #4
 80006e0:	f004 faf4 	bl	8004ccc <MessageQueueEvent>
  /* USER CODE END CallbackTimerBlinkDelay */
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d101      	bne.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006fe:	f000 f919 	bl	8000934 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40012c00 	.word	0x40012c00

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_MspInit+0x68>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_MspInit+0x68>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6193      	str	r3, [r2, #24]
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_MspInit+0x68>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_MspInit+0x68>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <HAL_MspInit+0x68>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x68>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	210f      	movs	r1, #15
 8000756:	f06f 0001 	mvn.w	r0, #1
 800075a:	f000 f9bc 	bl	8000ad6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_MspInit+0x6c>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_MspInit+0x6c>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40010000 	.word	0x40010000

0800078c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <HAL_InitTick+0xd0>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a2d      	ldr	r2, [pc, #180]	; (800085c <HAL_InitTick+0xd0>)
 80007a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <HAL_InitTick+0xd0>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ba:	f107 020c 	add.w	r2, r7, #12
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 ff45 	bl	8001654 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007ca:	f000 ff2f 	bl	800162c <HAL_RCC_GetPCLK2Freq>
 80007ce:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d2:	4a23      	ldr	r2, [pc, #140]	; (8000860 <HAL_InitTick+0xd4>)
 80007d4:	fba2 2303 	umull	r2, r3, r2, r3
 80007d8:	0c9b      	lsrs	r3, r3, #18
 80007da:	3b01      	subs	r3, #1
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <HAL_InitTick+0xd8>)
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <HAL_InitTick+0xdc>)
 80007e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <HAL_InitTick+0xd8>)
 80007e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007ec:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <HAL_InitTick+0xd8>)
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_InitTick+0xd8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_InitTick+0xd8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_InitTick+0xd8>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000804:	4817      	ldr	r0, [pc, #92]	; (8000864 <HAL_InitTick+0xd8>)
 8000806:	f000 ff73 	bl	80016f0 <HAL_TIM_Base_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000814:	2b00      	cmp	r3, #0
 8000816:	d11b      	bne.n	8000850 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000818:	4812      	ldr	r0, [pc, #72]	; (8000864 <HAL_InitTick+0xd8>)
 800081a:	f000 ffc1 	bl	80017a0 <HAL_TIM_Base_Start_IT>
 800081e:	4603      	mov	r3, r0
 8000820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000828:	2b00      	cmp	r3, #0
 800082a:	d111      	bne.n	8000850 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800082c:	2019      	movs	r0, #25
 800082e:	f000 f96e 	bl	8000b0e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d808      	bhi.n	800084a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	2019      	movs	r0, #25
 800083e:	f000 f94a 	bl	8000ad6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_InitTick+0xe0>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	e002      	b.n	8000850 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000854:	4618      	mov	r0, r3
 8000856:	3730      	adds	r7, #48	; 0x30
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	431bde83 	.word	0x431bde83
 8000864:	20001a48 	.word	0x20001a48
 8000868:	40012c00 	.word	0x40012c00
 800086c:	20000004 	.word	0x20000004

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
	...

0800089c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <TIM1_UP_IRQHandler+0x10>)
 80008a2:	f000 ffcf 	bl	8001844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20001a48 	.word	0x20001a48

080008b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008bc:	f7ff fff8 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008c2:	490c      	ldr	r1, [pc, #48]	; (80008f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008c4:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a09      	ldr	r2, [pc, #36]	; (80008fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008d8:	4c09      	ldr	r4, [pc, #36]	; (8000900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e6:	f004 faf5 	bl	8004ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ea:	f7ff fc31 	bl	8000150 <main>
  bx lr
 80008ee:	4770      	bx	lr
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008f8:	080052cc 	.word	0x080052cc
  ldr r2, =_sbss
 80008fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000900:	200036b0 	.word	0x200036b0

08000904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_2_IRQHandler>
	...

08000908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x28>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x28>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f8d1 	bl	8000ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	200f      	movs	r0, #15
 8000920:	f7ff ff34 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff fefa 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x1c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x20>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a03      	ldr	r2, [pc, #12]	; (8000954 <HAL_IncTick+0x20>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000008 	.word	0x20000008
 8000954:	20001a90 	.word	0x20001a90

08000958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	; (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	20001a90 	.word	0x20001a90

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4906      	ldr	r1, [pc, #24]	; (8000a04 <__NVIC_EnableIRQ+0x34>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db0a      	blt.n	8000a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	490c      	ldr	r1, [pc, #48]	; (8000a54 <__NVIC_SetPriority+0x4c>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a30:	e00a      	b.n	8000a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4908      	ldr	r1, [pc, #32]	; (8000a58 <__NVIC_SetPriority+0x50>)
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	3b04      	subs	r3, #4
 8000a40:	0112      	lsls	r2, r2, #4
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	761a      	strb	r2, [r3, #24]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	f1c3 0307 	rsb	r3, r3, #7
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	bf28      	it	cs
 8000a7a:	2304      	movcs	r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3304      	adds	r3, #4
 8000a82:	2b06      	cmp	r3, #6
 8000a84:	d902      	bls.n	8000a8c <NVIC_EncodePriority+0x30>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	e000      	b.n	8000a8e <NVIC_EncodePriority+0x32>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43d9      	mvns	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	4313      	orrs	r3, r2
         );
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3724      	adds	r7, #36	; 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff4f 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff64 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ffb2 	bl	8000a5c <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff81 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff57 	bl	80009d0 <__NVIC_EnableIRQ>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3e:	e169      	b.n	8000e14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b40:	2201      	movs	r2, #1
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	69fa      	ldr	r2, [r7, #28]
 8000b50:	4013      	ands	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 8158 	bne.w	8000e0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	4a9a      	ldr	r2, [pc, #616]	; (8000dcc <HAL_GPIO_Init+0x2a0>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d05e      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b68:	4a98      	ldr	r2, [pc, #608]	; (8000dcc <HAL_GPIO_Init+0x2a0>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d875      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b6e:	4a98      	ldr	r2, [pc, #608]	; (8000dd0 <HAL_GPIO_Init+0x2a4>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d058      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b74:	4a96      	ldr	r2, [pc, #600]	; (8000dd0 <HAL_GPIO_Init+0x2a4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d86f      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b7a:	4a96      	ldr	r2, [pc, #600]	; (8000dd4 <HAL_GPIO_Init+0x2a8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d052      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b80:	4a94      	ldr	r2, [pc, #592]	; (8000dd4 <HAL_GPIO_Init+0x2a8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d869      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b86:	4a94      	ldr	r2, [pc, #592]	; (8000dd8 <HAL_GPIO_Init+0x2ac>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d04c      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b8c:	4a92      	ldr	r2, [pc, #584]	; (8000dd8 <HAL_GPIO_Init+0x2ac>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d863      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b92:	4a92      	ldr	r2, [pc, #584]	; (8000ddc <HAL_GPIO_Init+0x2b0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d046      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b98:	4a90      	ldr	r2, [pc, #576]	; (8000ddc <HAL_GPIO_Init+0x2b0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d85d      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b9e:	2b12      	cmp	r3, #18
 8000ba0:	d82a      	bhi.n	8000bf8 <HAL_GPIO_Init+0xcc>
 8000ba2:	2b12      	cmp	r3, #18
 8000ba4:	d859      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000ba6:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <HAL_GPIO_Init+0x80>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000c27 	.word	0x08000c27
 8000bb0:	08000c01 	.word	0x08000c01
 8000bb4:	08000c13 	.word	0x08000c13
 8000bb8:	08000c55 	.word	0x08000c55
 8000bbc:	08000c5b 	.word	0x08000c5b
 8000bc0:	08000c5b 	.word	0x08000c5b
 8000bc4:	08000c5b 	.word	0x08000c5b
 8000bc8:	08000c5b 	.word	0x08000c5b
 8000bcc:	08000c5b 	.word	0x08000c5b
 8000bd0:	08000c5b 	.word	0x08000c5b
 8000bd4:	08000c5b 	.word	0x08000c5b
 8000bd8:	08000c5b 	.word	0x08000c5b
 8000bdc:	08000c5b 	.word	0x08000c5b
 8000be0:	08000c5b 	.word	0x08000c5b
 8000be4:	08000c5b 	.word	0x08000c5b
 8000be8:	08000c5b 	.word	0x08000c5b
 8000bec:	08000c5b 	.word	0x08000c5b
 8000bf0:	08000c09 	.word	0x08000c09
 8000bf4:	08000c1d 	.word	0x08000c1d
 8000bf8:	4a79      	ldr	r2, [pc, #484]	; (8000de0 <HAL_GPIO_Init+0x2b4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d013      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bfe:	e02c      	b.n	8000c5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e029      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e024      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	3308      	adds	r3, #8
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e01f      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	330c      	adds	r3, #12
 8000c22:	623b      	str	r3, [r7, #32]
          break;
 8000c24:	e01a      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	623b      	str	r3, [r7, #32]
          break;
 8000c32:	e013      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d105      	bne.n	8000c48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	611a      	str	r2, [r3, #16]
          break;
 8000c46:	e009      	b.n	8000c5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	615a      	str	r2, [r3, #20]
          break;
 8000c52:	e003      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e000      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          break;
 8000c5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2bff      	cmp	r3, #255	; 0xff
 8000c60:	d801      	bhi.n	8000c66 <HAL_GPIO_Init+0x13a>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	e001      	b.n	8000c6a <HAL_GPIO_Init+0x13e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2bff      	cmp	r3, #255	; 0xff
 8000c70:	d802      	bhi.n	8000c78 <HAL_GPIO_Init+0x14c>
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	e002      	b.n	8000c7e <HAL_GPIO_Init+0x152>
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	3b08      	subs	r3, #8
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	210f      	movs	r1, #15
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	401a      	ands	r2, r3
 8000c90:	6a39      	ldr	r1, [r7, #32]
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 80b1 	beq.w	8000e0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cac:	4b4d      	ldr	r3, [pc, #308]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a4c      	ldr	r2, [pc, #304]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cc4:	4a48      	ldr	r2, [pc, #288]	; (8000de8 <HAL_GPIO_Init+0x2bc>)
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a40      	ldr	r2, [pc, #256]	; (8000dec <HAL_GPIO_Init+0x2c0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d013      	beq.n	8000d18 <HAL_GPIO_Init+0x1ec>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a3f      	ldr	r2, [pc, #252]	; (8000df0 <HAL_GPIO_Init+0x2c4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00d      	beq.n	8000d14 <HAL_GPIO_Init+0x1e8>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a3e      	ldr	r2, [pc, #248]	; (8000df4 <HAL_GPIO_Init+0x2c8>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d007      	beq.n	8000d10 <HAL_GPIO_Init+0x1e4>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a3d      	ldr	r2, [pc, #244]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d101      	bne.n	8000d0c <HAL_GPIO_Init+0x1e0>
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e006      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e004      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e002      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1c:	f002 0203 	and.w	r2, r2, #3
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	4093      	lsls	r3, r2
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d2a:	492f      	ldr	r1, [pc, #188]	; (8000de8 <HAL_GPIO_Init+0x2bc>)
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	492c      	ldr	r1, [pc, #176]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	608b      	str	r3, [r1, #8]
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	4928      	ldr	r1, [pc, #160]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	4922      	ldr	r1, [pc, #136]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	60cb      	str	r3, [r1, #12]
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	491e      	ldr	r1, [pc, #120]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4918      	ldr	r1, [pc, #96]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	4914      	ldr	r1, [pc, #80]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d021      	beq.n	8000e00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	490e      	ldr	r1, [pc, #56]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	600b      	str	r3, [r1, #0]
 8000dc8:	e021      	b.n	8000e0e <HAL_GPIO_Init+0x2e2>
 8000dca:	bf00      	nop
 8000dcc:	10320000 	.word	0x10320000
 8000dd0:	10310000 	.word	0x10310000
 8000dd4:	10220000 	.word	0x10220000
 8000dd8:	10210000 	.word	0x10210000
 8000ddc:	10120000 	.word	0x10120000
 8000de0:	10110000 	.word	0x10110000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	40011000 	.word	0x40011000
 8000df8:	40011400 	.word	0x40011400
 8000dfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_GPIO_Init+0x304>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	4909      	ldr	r1, [pc, #36]	; (8000e30 <HAL_GPIO_Init+0x304>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	3301      	adds	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f47f ae8e 	bne.w	8000b40 <HAL_GPIO_Init+0x14>
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	372c      	adds	r7, #44	; 0x2c
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e50:	e003      	b.n	8000e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	041a      	lsls	r2, r3, #16
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	611a      	str	r2, [r3, #16]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	041a      	lsls	r2, r3, #16
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43d9      	mvns	r1, r3
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	400b      	ands	r3, r1
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	611a      	str	r2, [r3, #16]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
	...

08000e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e272      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8087 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb8:	4b92      	ldr	r3, [pc, #584]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d00c      	beq.n	8000ede <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec4:	4b8f      	ldr	r3, [pc, #572]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d112      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x5e>
 8000ed0:	4b8c      	ldr	r3, [pc, #560]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000edc:	d10b      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d06c      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x12c>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d168      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e24c      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x76>
 8000f00:	4b80      	ldr	r3, [pc, #512]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a7f      	ldr	r2, [pc, #508]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e02e      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0x98>
 8000f16:	4b7b      	ldr	r3, [pc, #492]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a7a      	ldr	r2, [pc, #488]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b78      	ldr	r3, [pc, #480]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a77      	ldr	r2, [pc, #476]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e01d      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0xbc>
 8000f3a:	4b72      	ldr	r3, [pc, #456]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a71      	ldr	r2, [pc, #452]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b6f      	ldr	r3, [pc, #444]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a6e      	ldr	r2, [pc, #440]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0xd4>
 8000f54:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a6a      	ldr	r2, [pc, #424]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b68      	ldr	r3, [pc, #416]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a67      	ldr	r2, [pc, #412]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fcf0 	bl	8000958 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fcec 	bl	8000958 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e200      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0xe4>
 8000f9a:	e014      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fcdc 	bl	8000958 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fcd8 	bl	8000958 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e1ec      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	4b53      	ldr	r3, [pc, #332]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x10c>
 8000fc2:	e000      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d063      	beq.n	800109a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00b      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fde:	4b49      	ldr	r3, [pc, #292]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d11c      	bne.n	8001024 <HAL_RCC_OscConfig+0x18c>
 8000fea:	4b46      	ldr	r3, [pc, #280]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d116      	bne.n	8001024 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	4b43      	ldr	r3, [pc, #268]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x176>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e1c0      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4939      	ldr	r1, [pc, #228]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	e03a      	b.n	800109a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d020      	beq.n	800106e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_RCC_OscConfig+0x270>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fc91 	bl	8000958 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fc8d 	bl	8000958 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e1a1      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4927      	ldr	r1, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_RCC_OscConfig+0x270>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fc70 	bl	8000958 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fc6c 	bl	8000958 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e180      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d03a      	beq.n	800111c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d019      	beq.n	80010e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_RCC_OscConfig+0x274>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b4:	f7ff fc50 	bl	8000958 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fc4c 	bl	8000958 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e160      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 faea 	bl	80016b4 <RCC_Delay>
 80010e0:	e01c      	b.n	800111c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_RCC_OscConfig+0x274>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e8:	f7ff fc36 	bl	8000958 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ee:	e00f      	b.n	8001110 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fc32 	bl	8000958 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d908      	bls.n	8001110 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e146      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	42420000 	.word	0x42420000
 800110c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	4b92      	ldr	r3, [pc, #584]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e9      	bne.n	80010f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80a6 	beq.w	8001276 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112e:	4b8b      	ldr	r3, [pc, #556]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10d      	bne.n	8001156 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b88      	ldr	r3, [pc, #544]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a87      	ldr	r2, [pc, #540]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b85      	ldr	r3, [pc, #532]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001156:	4b82      	ldr	r3, [pc, #520]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	2b00      	cmp	r3, #0
 8001160:	d118      	bne.n	8001194 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001162:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116e:	f7ff fbf3 	bl	8000958 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001176:	f7ff fbef 	bl	8000958 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b64      	cmp	r3, #100	; 0x64
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e103      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001188:	4b75      	ldr	r3, [pc, #468]	; (8001360 <HAL_RCC_OscConfig+0x4c8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x312>
 800119c:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4a6e      	ldr	r2, [pc, #440]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6213      	str	r3, [r2, #32]
 80011a8:	e02d      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x334>
 80011b2:	4b6a      	ldr	r3, [pc, #424]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a69      	ldr	r2, [pc, #420]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	4b67      	ldr	r3, [pc, #412]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	4a66      	ldr	r2, [pc, #408]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	f023 0304 	bic.w	r3, r3, #4
 80011c8:	6213      	str	r3, [r2, #32]
 80011ca:	e01c      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x356>
 80011d4:	4b61      	ldr	r3, [pc, #388]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a60      	ldr	r2, [pc, #384]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	4b5e      	ldr	r3, [pc, #376]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a5d      	ldr	r2, [pc, #372]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6213      	str	r3, [r2, #32]
 80011ec:	e00b      	b.n	8001206 <HAL_RCC_OscConfig+0x36e>
 80011ee:	4b5b      	ldr	r3, [pc, #364]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a5a      	ldr	r2, [pc, #360]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	4b58      	ldr	r3, [pc, #352]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4a57      	ldr	r2, [pc, #348]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d015      	beq.n	800123a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff fba3 	bl	8000958 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff fb9f 	bl	8000958 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f241 3288 	movw	r2, #5000	; 0x1388
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e0b1      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0ee      	beq.n	8001216 <HAL_RCC_OscConfig+0x37e>
 8001238:	e014      	b.n	8001264 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb8d 	bl	8000958 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7ff fb89 	bl	8000958 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001250:	4293      	cmp	r3, r2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e09b      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001258:	4b40      	ldr	r3, [pc, #256]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ee      	bne.n	8001242 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d105      	bne.n	8001276 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126a:	4b3c      	ldr	r3, [pc, #240]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a3b      	ldr	r2, [pc, #236]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8087 	beq.w	800138e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b08      	cmp	r3, #8
 800128a:	d061      	beq.n	8001350 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d146      	bne.n	8001322 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fb5d 	bl	8000958 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a2:	f7ff fb59 	bl	8000958 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e06d      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d108      	bne.n	80012dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	4921      	ldr	r1, [pc, #132]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a19      	ldr	r1, [r3, #32]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	430b      	orrs	r3, r1
 80012ee:	491b      	ldr	r1, [pc, #108]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb2d 	bl	8000958 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fb29 	bl	8000958 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e03d      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x46a>
 8001320:	e035      	b.n	800138e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_RCC_OscConfig+0x4cc>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fb16 	bl	8000958 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001330:	f7ff fb12 	bl	8000958 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e026      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_RCC_OscConfig+0x4c4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x498>
 800134e:	e01e      	b.n	800138e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d107      	bne.n	8001368 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e019      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
 800135c:	40021000 	.word	0x40021000
 8001360:	40007000 	.word	0x40007000
 8001364:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x500>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	429a      	cmp	r2, r3
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0d0      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d910      	bls.n	80013e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 0207 	bic.w	r2, r3, #7
 80013c6:	4965      	ldr	r1, [pc, #404]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0b8      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001402:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800141a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	494d      	ldr	r1, [pc, #308]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d040      	beq.n	80014bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d115      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e07f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e073      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e06b      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147a:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f023 0203 	bic.w	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4936      	ldr	r1, [pc, #216]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800148c:	f7ff fa64 	bl	8000958 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	e00a      	b.n	80014aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001494:	f7ff fa60 	bl	8000958 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e053      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 020c 	and.w	r2, r3, #12
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d1eb      	bne.n	8001494 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d210      	bcs.n	80014ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 0207 	bic.w	r2, r3, #7
 80014d2:	4922      	ldr	r1, [pc, #136]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e032      	b.n	8001552 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4916      	ldr	r1, [pc, #88]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800152a:	f000 f821 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	490a      	ldr	r1, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1c8>)
 800153c:	5ccb      	ldrb	r3, [r1, r3]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1cc>)
 8001544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1d0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f91e 	bl	800078c <HAL_InitTick>

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000
 8001560:	40021000 	.word	0x40021000
 8001564:	08005298 	.word	0x08005298
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_RCC_GetSysClockFreq+0x94>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b04      	cmp	r3, #4
 8001598:	d002      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x30>
 800159a:	2b08      	cmp	r3, #8
 800159c:	d003      	beq.n	80015a6 <HAL_RCC_GetSysClockFreq+0x36>
 800159e:	e027      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_RCC_GetSysClockFreq+0x98>)
 80015a2:	613b      	str	r3, [r7, #16]
      break;
 80015a4:	e027      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015b0:	5cd3      	ldrb	r3, [r2, r3]
 80015b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d010      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_RCC_GetSysClockFreq+0x94>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	0c5b      	lsrs	r3, r3, #17
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_RCC_GetSysClockFreq+0x98>)
 80015d2:	fb03 f202 	mul.w	r2, r3, r2
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e004      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015e4:	fb02 f303 	mul.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	613b      	str	r3, [r7, #16]
      break;
 80015ee:	e002      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_RCC_GetSysClockFreq+0x98>)
 80015f2:	613b      	str	r3, [r7, #16]
      break;
 80015f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015f6:	693b      	ldr	r3, [r7, #16]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	007a1200 	.word	0x007a1200
 800160c:	080052b0 	.word	0x080052b0
 8001610:	080052c0 	.word	0x080052c0
 8001614:	003d0900 	.word	0x003d0900

08001618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <HAL_RCC_GetHCLKFreq+0x10>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	20000000 	.word	0x20000000

0800162c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001630:	f7ff fff2 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001634:	4602      	mov	r2, r0
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	0adb      	lsrs	r3, r3, #11
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	4903      	ldr	r1, [pc, #12]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001642:	5ccb      	ldrb	r3, [r1, r3]
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	080052a8 	.word	0x080052a8

08001654 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	220f      	movs	r2, #15
 8001662:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_RCC_GetClockConfig+0x58>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0203 	and.w	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_RCC_GetClockConfig+0x58>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_GetClockConfig+0x58>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_RCC_GetClockConfig+0x58>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0207 	and.w	r2, r3, #7
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40022000 	.word	0x40022000

080016b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <RCC_Delay+0x34>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <RCC_Delay+0x38>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0a5b      	lsrs	r3, r3, #9
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016d0:	bf00      	nop
  }
  while (Delay --);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	60fa      	str	r2, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f9      	bne.n	80016d0 <RCC_Delay+0x1c>
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000000 	.word	0x20000000
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e041      	b.n	8001786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f839 	bl	800178e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3304      	adds	r3, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f000 f9b4 	bl	8001a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d001      	beq.n	80017b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e03a      	b.n	800182e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a18      	ldr	r2, [pc, #96]	; (8001838 <HAL_TIM_Base_Start_IT+0x98>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00e      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x58>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e2:	d009      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x58>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_TIM_Base_Start_IT+0x9c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d004      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x58>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a13      	ldr	r2, [pc, #76]	; (8001840 <HAL_TIM_Base_Start_IT+0xa0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d111      	bne.n	800181c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b06      	cmp	r3, #6
 8001808:	d010      	beq.n	800182c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800181a:	e007      	b.n	800182c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40012c00 	.word	0x40012c00
 800183c:	40000400 	.word	0x40000400
 8001840:	40000800 	.word	0x40000800

08001844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b02      	cmp	r3, #2
 8001858:	d122      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b02      	cmp	r3, #2
 8001866:	d11b      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0202 	mvn.w	r2, #2
 8001870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f8ed 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 800188c:	e005      	b.n	800189a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f8e0 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f8ef 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d122      	bne.n	80018f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d11b      	bne.n	80018f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0204 	mvn.w	r2, #4
 80018c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2202      	movs	r2, #2
 80018ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f8c3 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 80018e0:	e005      	b.n	80018ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8b6 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f8c5 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d122      	bne.n	8001948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b08      	cmp	r3, #8
 800190e:	d11b      	bne.n	8001948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 0208 	mvn.w	r2, #8
 8001918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2204      	movs	r2, #4
 800191e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f899 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 8001934:	e005      	b.n	8001942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f88c 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f89b 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b10      	cmp	r3, #16
 8001954:	d122      	bne.n	800199c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b10      	cmp	r3, #16
 8001962:	d11b      	bne.n	800199c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0210 	mvn.w	r2, #16
 800196c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2208      	movs	r2, #8
 8001972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f86f 	bl	8001a66 <HAL_TIM_IC_CaptureCallback>
 8001988:	e005      	b.n	8001996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f862 	bl	8001a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f871 	bl	8001a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d10e      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0201 	mvn.w	r2, #1
 80019c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe fe92 	bl	80006ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b80      	cmp	r3, #128	; 0x80
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d107      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f8bf 	bl	8001b72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fe:	2b40      	cmp	r3, #64	; 0x40
 8001a00:	d10e      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d107      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f835 	bl	8001a8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d10e      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	d107      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0220 	mvn.w	r2, #32
 8001a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f88a 	bl	8001b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a29      	ldr	r2, [pc, #164]	; (8001b54 <TIM_Base_SetConfig+0xb8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00b      	beq.n	8001acc <TIM_Base_SetConfig+0x30>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aba:	d007      	beq.n	8001acc <TIM_Base_SetConfig+0x30>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a26      	ldr	r2, [pc, #152]	; (8001b58 <TIM_Base_SetConfig+0xbc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d003      	beq.n	8001acc <TIM_Base_SetConfig+0x30>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <TIM_Base_SetConfig+0xc0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d108      	bne.n	8001ade <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <TIM_Base_SetConfig+0xb8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00b      	beq.n	8001afe <TIM_Base_SetConfig+0x62>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d007      	beq.n	8001afe <TIM_Base_SetConfig+0x62>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <TIM_Base_SetConfig+0xbc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d003      	beq.n	8001afe <TIM_Base_SetConfig+0x62>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <TIM_Base_SetConfig+0xc0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d108      	bne.n	8001b10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <TIM_Base_SetConfig+0xb8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d103      	bne.n	8001b44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	615a      	str	r2, [r3, #20]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40012c00 	.word	0x40012c00
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40000800 	.word	0x40000800

08001b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b8a:	f3ef 8305 	mrs	r3, IPSR
 8001b8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10f      	bne.n	8001bb6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b96:	f3ef 8310 	mrs	r3, PRIMASK
 8001b9a:	607b      	str	r3, [r7, #4]
  return(result);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <osKernelInitialize+0x32>
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <osKernelInitialize+0x60>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d109      	bne.n	8001bbe <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001baa:	f3ef 8311 	mrs	r3, BASEPRI
 8001bae:	603b      	str	r3, [r7, #0]
  return(result);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001bb6:	f06f 0305 	mvn.w	r3, #5
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e00c      	b.n	8001bd8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <osKernelInitialize+0x60>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <osKernelInitialize+0x60>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e002      	b.n	8001bd8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	20001a94 	.word	0x20001a94

08001be8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bee:	f3ef 8305 	mrs	r3, IPSR
 8001bf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10f      	bne.n	8001c1a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8001bfe:	607b      	str	r3, [r7, #4]
  return(result);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <osKernelStart+0x32>
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <osKernelStart+0x64>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d109      	bne.n	8001c22 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8001c12:	603b      	str	r3, [r7, #0]
  return(result);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001c1a:	f06f 0305 	mvn.w	r3, #5
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e00e      	b.n	8001c40 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <osKernelStart+0x64>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <osKernelStart+0x64>)
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001c30:	f001 fa2e 	bl	8003090 <vTaskStartScheduler>
      stat = osOK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e002      	b.n	8001c40 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20001a94 	.word	0x20001a94

08001c50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b092      	sub	sp, #72	; 0x48
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c60:	f3ef 8305 	mrs	r3, IPSR
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 8094 	bne.w	8001d96 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c72:	623b      	str	r3, [r7, #32]
  return(result);
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 808d 	bne.w	8001d96 <osThreadNew+0x146>
 8001c7c:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <osThreadNew+0x150>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d106      	bne.n	8001c92 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c84:	f3ef 8311 	mrs	r3, BASEPRI
 8001c88:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 8082 	bne.w	8001d96 <osThreadNew+0x146>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d07e      	beq.n	8001d96 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001c9c:	2318      	movs	r3, #24
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001ca4:	f107 031b 	add.w	r3, r7, #27
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d045      	beq.n	8001d42 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <osThreadNew+0x74>
        name = attr->name;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <osThreadNew+0x9a>
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cda:	2b38      	cmp	r3, #56	; 0x38
 8001cdc:	d805      	bhi.n	8001cea <osThreadNew+0x9a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <osThreadNew+0x9e>
        return (NULL);
 8001cea:	2300      	movs	r3, #0
 8001cec:	e054      	b.n	8001d98 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00e      	beq.n	8001d24 <osThreadNew+0xd4>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2ba7      	cmp	r3, #167	; 0xa7
 8001d0c:	d90a      	bls.n	8001d24 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <osThreadNew+0xd4>
        mem = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d22:	e010      	b.n	8001d46 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10c      	bne.n	8001d46 <osThreadNew+0xf6>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d108      	bne.n	8001d46 <osThreadNew+0xf6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d104      	bne.n	8001d46 <osThreadNew+0xf6>
          mem = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d40:	e001      	b.n	8001d46 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d110      	bne.n	8001d6e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d54:	9202      	str	r2, [sp, #8]
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 ffb0 	bl	8002cc8 <xTaskCreateStatic>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e013      	b.n	8001d96 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d110      	bne.n	8001d96 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 fffa 	bl	8002d80 <xTaskCreate>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d001      	beq.n	8001d96 <osThreadNew+0x146>
          hTask = NULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d96:	697b      	ldr	r3, [r7, #20]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3738      	adds	r7, #56	; 0x38
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20001a94 	.word	0x20001a94

08001da4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dac:	f3ef 8305 	mrs	r3, IPSR
 8001db0:	613b      	str	r3, [r7, #16]
  return(result);
 8001db2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10f      	bne.n	8001dd8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db8:	f3ef 8310 	mrs	r3, PRIMASK
 8001dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <osDelay+0x34>
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <osDelay+0x58>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d109      	bne.n	8001de0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8001dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <osDelay+0x3c>
    stat = osErrorISR;
 8001dd8:	f06f 0305 	mvn.w	r3, #5
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e007      	b.n	8001df0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f001 f91c 	bl	8003028 <vTaskDelay>
    }
  }

  return (stat);
 8001df0:	697b      	ldr	r3, [r7, #20]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20001a94 	.word	0x20001a94

08001e00 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f002 fa25 	bl	8004258 <pvTimerGetTimerID>
 8001e0e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <TimerCallback+0x22>
    callb->func (callb->arg);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	6852      	ldr	r2, [r2, #4]
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4798      	blx	r3
  }
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	; 0x38
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e40:	f3ef 8305 	mrs	r3, IPSR
 8001e44:	61bb      	str	r3, [r7, #24]
  return(result);
 8001e46:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d16a      	bne.n	8001f22 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e50:	617b      	str	r3, [r7, #20]
  return(result);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d164      	bne.n	8001f22 <osTimerNew+0xf6>
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <osTimerNew+0x100>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d105      	bne.n	8001e6c <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e60:	f3ef 8311 	mrs	r3, BASEPRI
 8001e64:	613b      	str	r3, [r7, #16]
  return(result);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d15a      	bne.n	8001f22 <osTimerNew+0xf6>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d057      	beq.n	8001f22 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8001e72:	2008      	movs	r0, #8
 8001e74:	f002 fc02 	bl	800467c <pvPortMalloc>
 8001e78:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d050      	beq.n	8001f22 <osTimerNew+0xf6>
      callb->func = func;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8001e8c:	7afb      	ldrb	r3, [r7, #11]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <osTimerNew+0x6c>
        reload = pdFALSE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
 8001e96:	e001      	b.n	8001e9c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea0:	623b      	str	r3, [r7, #32]
      name = NULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01c      	beq.n	8001ee6 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <osTimerNew+0x8e>
          name = attr->name;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <osTimerNew+0xa4>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2b2f      	cmp	r3, #47	; 0x2f
 8001ec8:	d902      	bls.n	8001ed0 <osTimerNew+0xa4>
          mem = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	623b      	str	r3, [r7, #32]
 8001ece:	e00c      	b.n	8001eea <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d108      	bne.n	8001eea <osTimerNew+0xbe>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d104      	bne.n	8001eea <osTimerNew+0xbe>
            mem = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	e001      	b.n	8001eea <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d10c      	bne.n	8001f0a <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <osTimerNew+0x104>)
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efe:	2101      	movs	r1, #1
 8001f00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f02:	f001 fe70 	bl	8003be6 <xTimerCreateStatic>
 8001f06:	62b8      	str	r0, [r7, #40]	; 0x28
 8001f08:	e00b      	b.n	8001f22 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d108      	bne.n	8001f22 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <osTimerNew+0x104>)
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f18:	2101      	movs	r1, #1
 8001f1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f1c:	f001 fe42 	bl	8003ba4 <xTimerCreate>
 8001f20:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3730      	adds	r7, #48	; 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20001a94 	.word	0x20001a94
 8001f30:	08001e01 	.word	0x08001e01

08001f34 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f42:	f3ef 8305 	mrs	r3, IPSR
 8001f46:	617b      	str	r3, [r7, #20]
  return(result);
 8001f48:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10f      	bne.n	8001f6e <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f52:	613b      	str	r3, [r7, #16]
  return(result);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <osTimerStart+0x3a>
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <osTimerStart+0x7c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d109      	bne.n	8001f76 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f62:	f3ef 8311 	mrs	r3, BASEPRI
 8001f66:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <osTimerStart+0x42>
    stat = osErrorISR;
 8001f6e:	f06f 0305 	mvn.w	r3, #5
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	e017      	b.n	8001fa6 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d103      	bne.n	8001f84 <osTimerStart+0x50>
    stat = osErrorParameter;
 8001f7c:	f06f 0303 	mvn.w	r3, #3
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e010      	b.n	8001fa6 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8001f84:	2300      	movs	r3, #0
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	69b8      	ldr	r0, [r7, #24]
 8001f90:	f001 fe98 	bl	8003cc4 <xTimerGenericCommand>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <osTimerStart+0x6c>
      stat = osOK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e002      	b.n	8001fa6 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8001fa0:	f06f 0302 	mvn.w	r3, #2
 8001fa4:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8001fa6:	69fb      	ldr	r3, [r7, #28]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20001a94 	.word	0x20001a94

08001fb4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fc4:	f3ef 8305 	mrs	r3, IPSR
 8001fc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8001fca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d16f      	bne.n	80020b0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8001fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d169      	bne.n	80020b0 <osMessageQueueNew+0xfc>
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <osMessageQueueNew+0x108>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d105      	bne.n	8001ff0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8001fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d15f      	bne.n	80020b0 <osMessageQueueNew+0xfc>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d05c      	beq.n	80020b0 <osMessageQueueNew+0xfc>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d059      	beq.n	80020b0 <osMessageQueueNew+0xfc>
    mem = -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002000:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d029      	beq.n	800205c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d012      	beq.n	8002036 <osMessageQueueNew+0x82>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b4f      	cmp	r3, #79	; 0x4f
 8002016:	d90e      	bls.n	8002036 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	429a      	cmp	r2, r3
 800202e:	d302      	bcc.n	8002036 <osMessageQueueNew+0x82>
        mem = 1;
 8002030:	2301      	movs	r3, #1
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	e014      	b.n	8002060 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d110      	bne.n	8002060 <osMessageQueueNew+0xac>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d108      	bne.n	8002060 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d104      	bne.n	8002060 <osMessageQueueNew+0xac>
          mem = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	e001      	b.n	8002060 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10b      	bne.n	800207e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2100      	movs	r1, #0
 8002070:	9100      	str	r1, [sp, #0]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f96d 	bl	8002354 <xQueueGenericCreateStatic>
 800207a:	6278      	str	r0, [r7, #36]	; 0x24
 800207c:	e008      	b.n	8002090 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002084:	2200      	movs	r2, #0
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f9da 	bl	8002442 <xQueueGenericCreate>
 800208e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e001      	b.n	80020a8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80020a8:	69f9      	ldr	r1, [r7, #28]
 80020aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ac:	f000 fdb0 	bl	8002c10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20001a94 	.word	0x20001a94

080020c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <vApplicationGetIdleTaskMemory+0x28>)
 80020d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	4a05      	ldr	r2, [pc, #20]	; (80020ec <vApplicationGetIdleTaskMemory+0x2c>)
 80020d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	601a      	str	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	20001a98 	.word	0x20001a98
 80020ec:	20001b40 	.word	0x20001b40

080020f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <vApplicationGetTimerTaskMemory+0x2c>)
 8002100:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <vApplicationGetTimerTaskMemory+0x30>)
 8002106:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20001d40 	.word	0x20001d40
 8002120:	20001de8 	.word	0x20001de8

08002124 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f103 0208 	add.w	r2, r3, #8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800213c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f103 0208 	add.w	r2, r3, #8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f103 0208 	add.w	r2, r3, #8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d6:	d103      	bne.n	80021e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e00c      	b.n	80021fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3308      	adds	r3, #8
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	e002      	b.n	80021ee <vListInsert+0x2e>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d2f6      	bcs.n	80021e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6892      	ldr	r2, [r2, #8]
 8002246:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6852      	ldr	r2, [r2, #4]
 8002250:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d103      	bne.n	8002264 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	1e5a      	subs	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
	...

08002284 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022aa:	bf00      	nop
 80022ac:	e7fe      	b.n	80022ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022ae:	f002 f8e5 	bl	800447c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	68f9      	ldr	r1, [r7, #12]
 80022bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	441a      	add	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	3b01      	subs	r3, #1
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	441a      	add	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	22ff      	movs	r2, #255	; 0xff
 80022f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	22ff      	movs	r2, #255	; 0xff
 80022fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d114      	bne.n	800232e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01a      	beq.n	8002342 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3310      	adds	r3, #16
 8002310:	4618      	mov	r0, r3
 8002312:	f001 f959 	bl	80035c8 <xTaskRemoveFromEventList>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d012      	beq.n	8002342 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <xQueueGenericReset+0xcc>)
 800231e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	e009      	b.n	8002342 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3310      	adds	r3, #16
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fef6 	bl	8002124 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3324      	adds	r3, #36	; 0x24
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fef1 	bl	8002124 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002342:	f002 f8cb 	bl	80044dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	e000ed04 	.word	0xe000ed04

08002354 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08e      	sub	sp, #56	; 0x38
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800237a:	bf00      	nop
 800237c:	e7fe      	b.n	800237c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002396:	bf00      	nop
 8002398:	e7fe      	b.n	8002398 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <xQueueGenericCreateStatic+0x52>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <xQueueGenericCreateStatic+0x56>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <xQueueGenericCreateStatic+0x58>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80023b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b4:	f383 8811 	msr	BASEPRI, r3
 80023b8:	f3bf 8f6f 	isb	sy
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	623b      	str	r3, [r7, #32]
}
 80023c2:	bf00      	nop
 80023c4:	e7fe      	b.n	80023c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <xQueueGenericCreateStatic+0x7e>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <xQueueGenericCreateStatic+0x82>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <xQueueGenericCreateStatic+0x84>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	61fb      	str	r3, [r7, #28]
}
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80023f2:	2350      	movs	r3, #80	; 0x50
 80023f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b50      	cmp	r3, #80	; 0x50
 80023fa:	d00a      	beq.n	8002412 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	61bb      	str	r3, [r7, #24]
}
 800240e:	bf00      	nop
 8002410:	e7fe      	b.n	8002410 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00d      	beq.n	8002438 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002424:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f843 	bl	80024be <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800243a:	4618      	mov	r0, r3
 800243c:	3730      	adds	r7, #48	; 0x30
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002442:	b580      	push	{r7, lr}
 8002444:	b08a      	sub	sp, #40	; 0x28
 8002446:	af02      	add	r7, sp, #8
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	4613      	mov	r3, r2
 800244e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <xQueueGenericCreate+0x2a>
	__asm volatile
 8002456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245a:	f383 8811 	msr	BASEPRI, r3
 800245e:	f3bf 8f6f 	isb	sy
 8002462:	f3bf 8f4f 	dsb	sy
 8002466:	613b      	str	r3, [r7, #16]
}
 8002468:	bf00      	nop
 800246a:	e7fe      	b.n	800246a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	e004      	b.n	8002482 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3350      	adds	r3, #80	; 0x50
 8002486:	4618      	mov	r0, r3
 8002488:	f002 f8f8 	bl	800467c <pvPortMalloc>
 800248c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00f      	beq.n	80024b4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	3350      	adds	r3, #80	; 0x50
 8002498:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024a2:	79fa      	ldrb	r2, [r7, #7]
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f805 	bl	80024be <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80024b4:	69bb      	ldr	r3, [r7, #24]
	}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e002      	b.n	80024e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024ec:	2101      	movs	r1, #1
 80024ee:	69b8      	ldr	r0, [r7, #24]
 80024f0:	f7ff fec8 	bl	8002284 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08e      	sub	sp, #56	; 0x38
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002512:	2300      	movs	r3, #0
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10a      	bne.n	8002536 <xQueueGenericSend+0x32>
	__asm volatile
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002532:	bf00      	nop
 8002534:	e7fe      	b.n	8002534 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d103      	bne.n	8002544 <xQueueGenericSend+0x40>
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <xQueueGenericSend+0x44>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <xQueueGenericSend+0x46>
 8002548:	2300      	movs	r3, #0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10a      	bne.n	8002564 <xQueueGenericSend+0x60>
	__asm volatile
 800254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002560:	bf00      	nop
 8002562:	e7fe      	b.n	8002562 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d103      	bne.n	8002572 <xQueueGenericSend+0x6e>
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <xQueueGenericSend+0x72>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <xQueueGenericSend+0x74>
 8002576:	2300      	movs	r3, #0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <xQueueGenericSend+0x8e>
	__asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	623b      	str	r3, [r7, #32]
}
 800258e:	bf00      	nop
 8002590:	e7fe      	b.n	8002590 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002592:	f001 f9df 	bl	8003954 <xTaskGetSchedulerState>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <xQueueGenericSend+0x9e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <xQueueGenericSend+0xa2>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <xQueueGenericSend+0xa4>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	61fb      	str	r3, [r7, #28]
}
 80025be:	bf00      	nop
 80025c0:	e7fe      	b.n	80025c0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025c2:	f001 ff5b 	bl	800447c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <xQueueGenericSend+0xd4>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d129      	bne.n	800262c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025de:	f000 fa07 	bl	80029f0 <prvCopyDataToQueue>
 80025e2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d010      	beq.n	800260e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	3324      	adds	r3, #36	; 0x24
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 ffe9 	bl	80035c8 <xTaskRemoveFromEventList>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025fc:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <xQueueGenericSend+0x1f8>)
 80025fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	e00a      	b.n	8002624 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002614:	4b39      	ldr	r3, [pc, #228]	; (80026fc <xQueueGenericSend+0x1f8>)
 8002616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002624:	f001 ff5a 	bl	80044dc <vPortExitCritical>
				return pdPASS;
 8002628:	2301      	movs	r3, #1
 800262a:	e063      	b.n	80026f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002632:	f001 ff53 	bl	80044dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002636:	2300      	movs	r3, #0
 8002638:	e05c      	b.n	80026f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	2b00      	cmp	r3, #0
 800263e:	d106      	bne.n	800264e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	4618      	mov	r0, r3
 8002646:	f001 f823 	bl	8003690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800264a:	2301      	movs	r3, #1
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800264e:	f001 ff45 	bl	80044dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002652:	f000 fd8d 	bl	8003170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002656:	f001 ff11 	bl	800447c <vPortEnterCritical>
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002660:	b25b      	sxtb	r3, r3
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002666:	d103      	bne.n	8002670 <xQueueGenericSend+0x16c>
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002676:	b25b      	sxtb	r3, r3
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800267c:	d103      	bne.n	8002686 <xQueueGenericSend+0x182>
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002686:	f001 ff29 	bl	80044dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800268a:	1d3a      	adds	r2, r7, #4
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f001 f812 	bl	80036bc <xTaskCheckForTimeOut>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d124      	bne.n	80026e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800269e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a0:	f000 fa9e 	bl	8002be0 <prvIsQueueFull>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d018      	beq.n	80026dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	3310      	adds	r3, #16
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 ff38 	bl	8003528 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ba:	f000 fa29 	bl	8002b10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026be:	f000 fd65 	bl	800318c <xTaskResumeAll>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f af7c 	bne.w	80025c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <xQueueGenericSend+0x1f8>)
 80026cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	e772      	b.n	80025c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026de:	f000 fa17 	bl	8002b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026e2:	f000 fd53 	bl	800318c <xTaskResumeAll>
 80026e6:	e76c      	b.n	80025c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ea:	f000 fa11 	bl	8002b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026ee:	f000 fd4d 	bl	800318c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026f2:	2300      	movs	r3, #0
		}
	}
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3738      	adds	r7, #56	; 0x38
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	e000ed04 	.word	0xe000ed04

08002700 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08e      	sub	sp, #56	; 0x38
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
}
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d103      	bne.n	800273c <xQueueGenericSendFromISR+0x3c>
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <xQueueGenericSendFromISR+0x40>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <xQueueGenericSendFromISR+0x42>
 8002740:	2300      	movs	r3, #0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	623b      	str	r3, [r7, #32]
}
 8002758:	bf00      	nop
 800275a:	e7fe      	b.n	800275a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d103      	bne.n	800276a <xQueueGenericSendFromISR+0x6a>
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <xQueueGenericSendFromISR+0x6e>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <xQueueGenericSendFromISR+0x70>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	61fb      	str	r3, [r7, #28]
}
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800278a:	f001 ff39 	bl	8004600 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800278e:	f3ef 8211 	mrs	r2, BASEPRI
 8002792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	61ba      	str	r2, [r7, #24]
 80027a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <xQueueGenericSendFromISR+0xbc>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d12c      	bne.n	8002816 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027cc:	f000 f910 	bl	80029f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d8:	d112      	bne.n	8002800 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e4:	3324      	adds	r3, #36	; 0x24
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 feee 	bl	80035c8 <xTaskRemoveFromEventList>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00e      	beq.n	8002810 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00b      	beq.n	8002810 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e007      	b.n	8002810 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002804:	3301      	adds	r3, #1
 8002806:	b2db      	uxtb	r3, r3
 8002808:	b25a      	sxtb	r2, r3
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002810:	2301      	movs	r3, #1
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002814:	e001      	b.n	800281a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002816:	2300      	movs	r3, #0
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002824:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002828:	4618      	mov	r0, r3
 800282a:	3738      	adds	r7, #56	; 0x38
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	; 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <xQueueReceive+0x30>
	__asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	623b      	str	r3, [r7, #32]
}
 800285c:	bf00      	nop
 800285e:	e7fe      	b.n	800285e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <xQueueReceive+0x3e>
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <xQueueReceive+0x42>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <xQueueReceive+0x44>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <xQueueReceive+0x5e>
	__asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	61fb      	str	r3, [r7, #28]
}
 800288a:	bf00      	nop
 800288c:	e7fe      	b.n	800288c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800288e:	f001 f861 	bl	8003954 <xTaskGetSchedulerState>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <xQueueReceive+0x6e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <xQueueReceive+0x72>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <xQueueReceive+0x74>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <xQueueReceive+0x8e>
	__asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	61bb      	str	r3, [r7, #24]
}
 80028ba:	bf00      	nop
 80028bc:	e7fe      	b.n	80028bc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80028be:	f001 fddd 	bl	800447c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01f      	beq.n	800290e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d2:	f000 f8f7 	bl	8002ac4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	1e5a      	subs	r2, r3, #1
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00f      	beq.n	8002906 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	3310      	adds	r3, #16
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fe6c 	bl	80035c8 <xTaskRemoveFromEventList>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <xQueueReceive+0x1bc>)
 80028f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002906:	f001 fde9 	bl	80044dc <vPortExitCritical>
				return pdPASS;
 800290a:	2301      	movs	r3, #1
 800290c:	e069      	b.n	80029e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002914:	f001 fde2 	bl	80044dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002918:	2300      	movs	r3, #0
 800291a:	e062      	b.n	80029e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f000 feb2 	bl	8003690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800292c:	2301      	movs	r3, #1
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002930:	f001 fdd4 	bl	80044dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002934:	f000 fc1c 	bl	8003170 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002938:	f001 fda0 	bl	800447c <vPortEnterCritical>
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002942:	b25b      	sxtb	r3, r3
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002948:	d103      	bne.n	8002952 <xQueueReceive+0x122>
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002958:	b25b      	sxtb	r3, r3
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295e:	d103      	bne.n	8002968 <xQueueReceive+0x138>
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002968:	f001 fdb8 	bl	80044dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800296c:	1d3a      	adds	r2, r7, #4
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fea1 	bl	80036bc <xTaskCheckForTimeOut>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d123      	bne.n	80029c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002982:	f000 f917 	bl	8002bb4 <prvIsQueueEmpty>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d017      	beq.n	80029bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	3324      	adds	r3, #36	; 0x24
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fdc7 	bl	8003528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800299a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800299c:	f000 f8b8 	bl	8002b10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029a0:	f000 fbf4 	bl	800318c <xTaskResumeAll>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d189      	bne.n	80028be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <xQueueReceive+0x1bc>)
 80029ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	e780      	b.n	80028be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029be:	f000 f8a7 	bl	8002b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029c2:	f000 fbe3 	bl	800318c <xTaskResumeAll>
 80029c6:	e77a      	b.n	80028be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ca:	f000 f8a1 	bl	8002b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029ce:	f000 fbdd 	bl	800318c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d4:	f000 f8ee 	bl	8002bb4 <prvIsQueueEmpty>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f43f af6f 	beq.w	80028be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3730      	adds	r7, #48	; 0x30
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	e000ed04 	.word	0xe000ed04

080029f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10d      	bne.n	8002a2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d14d      	bne.n	8002ab2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 ffb8 	bl	8003990 <xTaskPriorityDisinherit>
 8002a20:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	e043      	b.n	8002ab2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d119      	bne.n	8002a64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6898      	ldr	r0, [r3, #8]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	f002 fa70 	bl	8004f20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	441a      	add	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d32b      	bcc.n	8002ab2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	e026      	b.n	8002ab2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68d8      	ldr	r0, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	f002 fa56 	bl	8004f20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	425b      	negs	r3, r3
 8002a7e:	441a      	add	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d207      	bcs.n	8002aa0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	425b      	negs	r3, r3
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d105      	bne.n	8002ab2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002aba:	697b      	ldr	r3, [r7, #20]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d018      	beq.n	8002b08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	441a      	add	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d303      	bcc.n	8002af8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68d9      	ldr	r1, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	461a      	mov	r2, r3
 8002b02:	6838      	ldr	r0, [r7, #0]
 8002b04:	f002 fa0c 	bl	8004f20 <memcpy>
	}
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b18:	f001 fcb0 	bl	800447c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b24:	e011      	b.n	8002b4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d012      	beq.n	8002b54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3324      	adds	r3, #36	; 0x24
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fd48 	bl	80035c8 <xTaskRemoveFromEventList>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b3e:	f000 fe1f 	bl	8003780 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	dce9      	bgt.n	8002b26 <prvUnlockQueue+0x16>
 8002b52:	e000      	b.n	8002b56 <prvUnlockQueue+0x46>
					break;
 8002b54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	22ff      	movs	r2, #255	; 0xff
 8002b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b5e:	f001 fcbd 	bl	80044dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b62:	f001 fc8b 	bl	800447c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b6e:	e011      	b.n	8002b94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3310      	adds	r3, #16
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fd23 	bl	80035c8 <xTaskRemoveFromEventList>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b88:	f000 fdfa 	bl	8003780 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	dce9      	bgt.n	8002b70 <prvUnlockQueue+0x60>
 8002b9c:	e000      	b.n	8002ba0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	22ff      	movs	r2, #255	; 0xff
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ba8:	f001 fc98 	bl	80044dc <vPortExitCritical>
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bbc:	f001 fc5e 	bl	800447c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e001      	b.n	8002bd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bd2:	f001 fc83 	bl	80044dc <vPortExitCritical>

	return xReturn;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002be8:	f001 fc48 	bl	800447c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d102      	bne.n	8002bfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e001      	b.n	8002c02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c02:	f001 fc6b 	bl	80044dc <vPortExitCritical>

	return xReturn;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e014      	b.n	8002c4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c20:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <vQueueAddToRegistry+0x4c>)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10b      	bne.n	8002c44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c2c:	490b      	ldr	r1, [pc, #44]	; (8002c5c <vQueueAddToRegistry+0x4c>)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <vQueueAddToRegistry+0x4c>)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c42:	e006      	b.n	8002c52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3301      	adds	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b07      	cmp	r3, #7
 8002c4e:	d9e7      	bls.n	8002c20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	200021e8 	.word	0x200021e8

08002c60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c70:	f001 fc04 	bl	800447c <vPortEnterCritical>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c80:	d103      	bne.n	8002c8a <vQueueWaitForMessageRestricted+0x2a>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c96:	d103      	bne.n	8002ca0 <vQueueWaitForMessageRestricted+0x40>
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ca0:	f001 fc1c 	bl	80044dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3324      	adds	r3, #36	; 0x24
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fc5b 	bl	8003570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff28 	bl	8002b10 <prvUnlockQueue>
	}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08e      	sub	sp, #56	; 0x38
 8002ccc:	af04      	add	r7, sp, #16
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	623b      	str	r3, [r7, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <xTaskCreateStatic+0x46>
	__asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	61fb      	str	r3, [r7, #28]
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d0e:	23a8      	movs	r3, #168	; 0xa8
 8002d10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2ba8      	cmp	r3, #168	; 0xa8
 8002d16:	d00a      	beq.n	8002d2e <xTaskCreateStatic+0x66>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	61bb      	str	r3, [r7, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01e      	beq.n	8002d72 <xTaskCreateStatic+0xaa>
 8002d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01b      	beq.n	8002d72 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9303      	str	r3, [sp, #12]
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	9302      	str	r3, [sp, #8]
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f851 	bl	8002e0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d6c:	f000 f8ec 	bl	8002f48 <prvAddNewTaskToReadyList>
 8002d70:	e001      	b.n	8002d76 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d76:	697b      	ldr	r3, [r7, #20]
	}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3728      	adds	r7, #40	; 0x28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af04      	add	r7, sp, #16
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 fc71 	bl	800467c <pvPortMalloc>
 8002d9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00e      	beq.n	8002dc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002da2:	20a8      	movs	r0, #168	; 0xa8
 8002da4:	f001 fc6a 	bl	800467c <pvPortMalloc>
 8002da8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
 8002db6:	e005      	b.n	8002dc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002db8:	6978      	ldr	r0, [r7, #20]
 8002dba:	f001 fd23 	bl	8004804 <vPortFree>
 8002dbe:	e001      	b.n	8002dc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d017      	beq.n	8002dfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9303      	str	r3, [sp, #12]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f80f 	bl	8002e0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dee:	69f8      	ldr	r0, [r7, #28]
 8002df0:	f000 f8aa 	bl	8002f48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002df4:	2301      	movs	r3, #1
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	e002      	b.n	8002e00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e00:	69bb      	ldr	r3, [r7, #24]
	}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	21a5      	movs	r1, #165	; 0xa5
 8002e26:	f001 fff6 	bl	8004e16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e34:	3b01      	subs	r3, #1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f023 0307 	bic.w	r3, r3, #7
 8002e42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	617b      	str	r3, [r7, #20]
}
 8002e60:	bf00      	nop
 8002e62:	e7fe      	b.n	8002e62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	e012      	b.n	8002e90 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	7819      	ldrb	r1, [r3, #0]
 8002e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	4413      	add	r3, r2
 8002e78:	3334      	adds	r3, #52	; 0x34
 8002e7a:	460a      	mov	r2, r1
 8002e7c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	d9e9      	bls.n	8002e6a <prvInitialiseNewTask+0x5e>
 8002e96:	e000      	b.n	8002e9a <prvInitialiseNewTask+0x8e>
		{
			break;
 8002e98:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	2b37      	cmp	r3, #55	; 0x37
 8002ea6:	d901      	bls.n	8002eac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ea8:	2337      	movs	r3, #55	; 0x37
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	2200      	movs	r2, #0
 8002ebc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f94d 	bl	8002162 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	3318      	adds	r3, #24
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f948 	bl	8002162 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	3354      	adds	r3, #84	; 0x54
 8002efc:	224c      	movs	r2, #76	; 0x4c
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 ff88 	bl	8004e16 <memset>
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	4a0c      	ldr	r2, [pc, #48]	; (8002f3c <prvInitialiseNewTask+0x130>)
 8002f0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <prvInitialiseNewTask+0x134>)
 8002f10:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	4a0b      	ldr	r2, [pc, #44]	; (8002f44 <prvInitialiseNewTask+0x138>)
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	69b8      	ldr	r0, [r7, #24]
 8002f1e:	f001 f9bb 	bl	8004298 <pxPortInitialiseStack>
 8002f22:	4602      	mov	r2, r0
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f34:	bf00      	nop
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20003570 	.word	0x20003570
 8002f40:	200035d8 	.word	0x200035d8
 8002f44:	20003640 	.word	0x20003640

08002f48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f50:	f001 fa94 	bl	800447c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <prvAddNewTaskToReadyList+0xc4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	4a2c      	ldr	r2, [pc, #176]	; (800300c <prvAddNewTaskToReadyList+0xc4>)
 8002f5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <prvAddNewTaskToReadyList+0xc8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f66:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <prvAddNewTaskToReadyList+0xc8>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <prvAddNewTaskToReadyList+0xc4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d110      	bne.n	8002f96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f74:	f000 fc28 	bl	80037c8 <prvInitialiseTaskLists>
 8002f78:	e00d      	b.n	8002f96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f7a:	4b26      	ldr	r3, [pc, #152]	; (8003014 <prvAddNewTaskToReadyList+0xcc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <prvAddNewTaskToReadyList+0xc8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d802      	bhi.n	8002f96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f90:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <prvAddNewTaskToReadyList+0xc8>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <prvAddNewTaskToReadyList+0xd0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <prvAddNewTaskToReadyList+0xd0>)
 8002f9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <prvAddNewTaskToReadyList+0xd0>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <prvAddNewTaskToReadyList+0xd4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d903      	bls.n	8002fbc <prvAddNewTaskToReadyList+0x74>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	4a18      	ldr	r2, [pc, #96]	; (800301c <prvAddNewTaskToReadyList+0xd4>)
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4a15      	ldr	r2, [pc, #84]	; (8003020 <prvAddNewTaskToReadyList+0xd8>)
 8002fca:	441a      	add	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7ff f8d1 	bl	800217a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fd8:	f001 fa80 	bl	80044dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <prvAddNewTaskToReadyList+0xcc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00e      	beq.n	8003002 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <prvAddNewTaskToReadyList+0xc8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d207      	bcs.n	8003002 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <prvAddNewTaskToReadyList+0xdc>)
 8002ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200026fc 	.word	0x200026fc
 8003010:	20002228 	.word	0x20002228
 8003014:	20002708 	.word	0x20002708
 8003018:	20002718 	.word	0x20002718
 800301c:	20002704 	.word	0x20002704
 8003020:	2000222c 	.word	0x2000222c
 8003024:	e000ed04 	.word	0xe000ed04

08003028 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d017      	beq.n	800306a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <vTaskDelay+0x60>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <vTaskDelay+0x30>
	__asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	60bb      	str	r3, [r7, #8]
}
 8003054:	bf00      	nop
 8003056:	e7fe      	b.n	8003056 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003058:	f000 f88a 	bl	8003170 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800305c:	2100      	movs	r1, #0
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fd04 	bl	8003a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003064:	f000 f892 	bl	800318c <xTaskResumeAll>
 8003068:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <vTaskDelay+0x64>)
 8003072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20002724 	.word	0x20002724
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800309e:	463a      	mov	r2, r7
 80030a0:	1d39      	adds	r1, r7, #4
 80030a2:	f107 0308 	add.w	r3, r7, #8
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f80a 	bl	80020c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	9202      	str	r2, [sp, #8]
 80030b4:	9301      	str	r3, [sp, #4]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	2300      	movs	r3, #0
 80030bc:	460a      	mov	r2, r1
 80030be:	4924      	ldr	r1, [pc, #144]	; (8003150 <vTaskStartScheduler+0xc0>)
 80030c0:	4824      	ldr	r0, [pc, #144]	; (8003154 <vTaskStartScheduler+0xc4>)
 80030c2:	f7ff fe01 	bl	8002cc8 <xTaskCreateStatic>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4a23      	ldr	r2, [pc, #140]	; (8003158 <vTaskStartScheduler+0xc8>)
 80030ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030cc:	4b22      	ldr	r3, [pc, #136]	; (8003158 <vTaskStartScheduler+0xc8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030d4:	2301      	movs	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e001      	b.n	80030de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d102      	bne.n	80030ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80030e4:	f000 fd16 	bl	8003b14 <xTimerCreateTimerTask>
 80030e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d11b      	bne.n	8003128 <vTaskStartScheduler+0x98>
	__asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	613b      	str	r3, [r7, #16]
}
 8003102:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003104:	4b15      	ldr	r3, [pc, #84]	; (800315c <vTaskStartScheduler+0xcc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3354      	adds	r3, #84	; 0x54
 800310a:	4a15      	ldr	r2, [pc, #84]	; (8003160 <vTaskStartScheduler+0xd0>)
 800310c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <vTaskStartScheduler+0xd4>)
 8003110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003114:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <vTaskStartScheduler+0xd8>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <vTaskStartScheduler+0xdc>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003122:	f001 f939 	bl	8004398 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003126:	e00e      	b.n	8003146 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800312e:	d10a      	bne.n	8003146 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	60fb      	str	r3, [r7, #12]
}
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <vTaskStartScheduler+0xb4>
}
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	080050cc 	.word	0x080050cc
 8003154:	08003799 	.word	0x08003799
 8003158:	20002720 	.word	0x20002720
 800315c:	20002228 	.word	0x20002228
 8003160:	2000005c 	.word	0x2000005c
 8003164:	2000271c 	.word	0x2000271c
 8003168:	20002708 	.word	0x20002708
 800316c:	20002700 	.word	0x20002700

08003170 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <vTaskSuspendAll+0x18>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	4a03      	ldr	r2, [pc, #12]	; (8003188 <vTaskSuspendAll+0x18>)
 800317c:	6013      	str	r3, [r2, #0]
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20002724 	.word	0x20002724

0800318c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800319a:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <xTaskResumeAll+0x118>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	603b      	str	r3, [r7, #0]
}
 80031b4:	bf00      	nop
 80031b6:	e7fe      	b.n	80031b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031b8:	f001 f960 	bl	800447c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031bc:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <xTaskResumeAll+0x118>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	4a38      	ldr	r2, [pc, #224]	; (80032a4 <xTaskResumeAll+0x118>)
 80031c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031c6:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <xTaskResumeAll+0x118>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d162      	bne.n	8003294 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <xTaskResumeAll+0x11c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d05e      	beq.n	8003294 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031d6:	e02f      	b.n	8003238 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031d8:	4b34      	ldr	r3, [pc, #208]	; (80032ac <xTaskResumeAll+0x120>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3318      	adds	r3, #24
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff f823 	bl	8002230 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f81e 	bl	8002230 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f8:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <xTaskResumeAll+0x124>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d903      	bls.n	8003208 <xTaskResumeAll+0x7c>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4a2a      	ldr	r2, [pc, #168]	; (80032b0 <xTaskResumeAll+0x124>)
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <xTaskResumeAll+0x128>)
 8003216:	441a      	add	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f7fe ffab 	bl	800217a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <xTaskResumeAll+0x12c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <xTaskResumeAll+0x130>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003238:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <xTaskResumeAll+0x120>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1cb      	bne.n	80031d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003246:	f000 fb61 	bl	800390c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <xTaskResumeAll+0x134>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d010      	beq.n	8003278 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003256:	f000 f845 	bl	80032e4 <xTaskIncrementTick>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <xTaskResumeAll+0x130>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3b01      	subs	r3, #1
 800326a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f1      	bne.n	8003256 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <xTaskResumeAll+0x134>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003278:	4b10      	ldr	r3, [pc, #64]	; (80032bc <xTaskResumeAll+0x130>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003280:	2301      	movs	r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <xTaskResumeAll+0x138>)
 8003286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003294:	f001 f922 	bl	80044dc <vPortExitCritical>

	return xAlreadyYielded;
 8003298:	68bb      	ldr	r3, [r7, #8]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20002724 	.word	0x20002724
 80032a8:	200026fc 	.word	0x200026fc
 80032ac:	200026bc 	.word	0x200026bc
 80032b0:	20002704 	.word	0x20002704
 80032b4:	2000222c 	.word	0x2000222c
 80032b8:	20002228 	.word	0x20002228
 80032bc:	20002710 	.word	0x20002710
 80032c0:	2000270c 	.word	0x2000270c
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <xTaskGetTickCount+0x18>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032d4:	687b      	ldr	r3, [r7, #4]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	20002700 	.word	0x20002700

080032e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ee:	4b51      	ldr	r3, [pc, #324]	; (8003434 <xTaskIncrementTick+0x150>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 808e 	bne.w	8003414 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032f8:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <xTaskIncrementTick+0x154>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003300:	4a4d      	ldr	r2, [pc, #308]	; (8003438 <xTaskIncrementTick+0x154>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d120      	bne.n	800334e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800330c:	4b4b      	ldr	r3, [pc, #300]	; (800343c <xTaskIncrementTick+0x158>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <xTaskIncrementTick+0x48>
	__asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	603b      	str	r3, [r7, #0]
}
 8003328:	bf00      	nop
 800332a:	e7fe      	b.n	800332a <xTaskIncrementTick+0x46>
 800332c:	4b43      	ldr	r3, [pc, #268]	; (800343c <xTaskIncrementTick+0x158>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b43      	ldr	r3, [pc, #268]	; (8003440 <xTaskIncrementTick+0x15c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a41      	ldr	r2, [pc, #260]	; (800343c <xTaskIncrementTick+0x158>)
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4a41      	ldr	r2, [pc, #260]	; (8003440 <xTaskIncrementTick+0x15c>)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b40      	ldr	r3, [pc, #256]	; (8003444 <xTaskIncrementTick+0x160>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	4a3f      	ldr	r2, [pc, #252]	; (8003444 <xTaskIncrementTick+0x160>)
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	f000 fadf 	bl	800390c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800334e:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <xTaskIncrementTick+0x164>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	429a      	cmp	r2, r3
 8003356:	d34e      	bcc.n	80033f6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003358:	4b38      	ldr	r3, [pc, #224]	; (800343c <xTaskIncrementTick+0x158>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <xTaskIncrementTick+0x82>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <xTaskIncrementTick+0x84>
 8003366:	2300      	movs	r3, #0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800336c:	4b36      	ldr	r3, [pc, #216]	; (8003448 <xTaskIncrementTick+0x164>)
 800336e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003372:	601a      	str	r2, [r3, #0]
					break;
 8003374:	e03f      	b.n	80033f6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003376:	4b31      	ldr	r3, [pc, #196]	; (800343c <xTaskIncrementTick+0x158>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	429a      	cmp	r2, r3
 800338c:	d203      	bcs.n	8003396 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800338e:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <xTaskIncrementTick+0x164>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6013      	str	r3, [r2, #0]
						break;
 8003394:	e02f      	b.n	80033f6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	3304      	adds	r3, #4
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe ff48 	bl	8002230 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d004      	beq.n	80033b2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	3318      	adds	r3, #24
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe ff3f 	bl	8002230 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <xTaskIncrementTick+0x168>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d903      	bls.n	80033c6 <xTaskIncrementTick+0xe2>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	4a22      	ldr	r2, [pc, #136]	; (800344c <xTaskIncrementTick+0x168>)
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <xTaskIncrementTick+0x16c>)
 80033d4:	441a      	add	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3304      	adds	r3, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7fe fecc 	bl	800217a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <xTaskIncrementTick+0x170>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d3b3      	bcc.n	8003358 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033f4:	e7b0      	b.n	8003358 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <xTaskIncrementTick+0x170>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fc:	4914      	ldr	r1, [pc, #80]	; (8003450 <xTaskIncrementTick+0x16c>)
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d907      	bls.n	800341e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800340e:	2301      	movs	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e004      	b.n	800341e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <xTaskIncrementTick+0x174>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <xTaskIncrementTick+0x174>)
 800341c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800341e:	4b0f      	ldr	r3, [pc, #60]	; (800345c <xTaskIncrementTick+0x178>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003426:	2301      	movs	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800342a:	697b      	ldr	r3, [r7, #20]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20002724 	.word	0x20002724
 8003438:	20002700 	.word	0x20002700
 800343c:	200026b4 	.word	0x200026b4
 8003440:	200026b8 	.word	0x200026b8
 8003444:	20002714 	.word	0x20002714
 8003448:	2000271c 	.word	0x2000271c
 800344c:	20002704 	.word	0x20002704
 8003450:	2000222c 	.word	0x2000222c
 8003454:	20002228 	.word	0x20002228
 8003458:	2000270c 	.word	0x2000270c
 800345c:	20002710 	.word	0x20002710

08003460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003466:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <vTaskSwitchContext+0xb0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800346e:	4b29      	ldr	r3, [pc, #164]	; (8003514 <vTaskSwitchContext+0xb4>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003474:	e046      	b.n	8003504 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <vTaskSwitchContext+0xb4>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800347c:	4b26      	ldr	r3, [pc, #152]	; (8003518 <vTaskSwitchContext+0xb8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	e010      	b.n	80034a6 <vTaskSwitchContext+0x46>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	607b      	str	r3, [r7, #4]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <vTaskSwitchContext+0x3e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	491d      	ldr	r1, [pc, #116]	; (800351c <vTaskSwitchContext+0xbc>)
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0e4      	beq.n	8003484 <vTaskSwitchContext+0x24>
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4a15      	ldr	r2, [pc, #84]	; (800351c <vTaskSwitchContext+0xbc>)
 80034c6:	4413      	add	r3, r2
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3308      	adds	r3, #8
 80034dc:	429a      	cmp	r2, r3
 80034de:	d104      	bne.n	80034ea <vTaskSwitchContext+0x8a>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <vTaskSwitchContext+0xc0>)
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <vTaskSwitchContext+0xb8>)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <vTaskSwitchContext+0xc0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3354      	adds	r3, #84	; 0x54
 8003500:	4a08      	ldr	r2, [pc, #32]	; (8003524 <vTaskSwitchContext+0xc4>)
 8003502:	6013      	str	r3, [r2, #0]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20002724 	.word	0x20002724
 8003514:	20002710 	.word	0x20002710
 8003518:	20002704 	.word	0x20002704
 800351c:	2000222c 	.word	0x2000222c
 8003520:	20002228 	.word	0x20002228
 8003524:	2000005c 	.word	0x2000005c

08003528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	60fb      	str	r3, [r7, #12]
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <vTaskPlaceOnEventList+0x44>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3318      	adds	r3, #24
 8003554:	4619      	mov	r1, r3
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe fe32 	bl	80021c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800355c:	2101      	movs	r1, #1
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	f000 fa84 	bl	8003a6c <prvAddCurrentTaskToDelayedList>
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20002228 	.word	0x20002228

08003570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	617b      	str	r3, [r7, #20]
}
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3318      	adds	r3, #24
 800359e:	4619      	mov	r1, r3
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7fe fdea 	bl	800217a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	68b8      	ldr	r0, [r7, #8]
 80035b6:	f000 fa59 	bl	8003a6c <prvAddCurrentTaskToDelayedList>
	}
 80035ba:	bf00      	nop
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20002228 	.word	0x20002228

080035c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	60fb      	str	r3, [r7, #12]
}
 80035f0:	bf00      	nop
 80035f2:	e7fe      	b.n	80035f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	3318      	adds	r3, #24
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe fe19 	bl	8002230 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035fe:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <xTaskRemoveFromEventList+0xb0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11d      	bne.n	8003642 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3304      	adds	r3, #4
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fe10 	bl	8002230 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <xTaskRemoveFromEventList+0xb4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d903      	bls.n	8003624 <xTaskRemoveFromEventList+0x5c>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	4a16      	ldr	r2, [pc, #88]	; (800367c <xTaskRemoveFromEventList+0xb4>)
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <xTaskRemoveFromEventList+0xb8>)
 8003632:	441a      	add	r2, r3
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f7fe fd9d 	bl	800217a <vListInsertEnd>
 8003640:	e005      	b.n	800364e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	3318      	adds	r3, #24
 8003646:	4619      	mov	r1, r3
 8003648:	480e      	ldr	r0, [pc, #56]	; (8003684 <xTaskRemoveFromEventList+0xbc>)
 800364a:	f7fe fd96 	bl	800217a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <xTaskRemoveFromEventList+0xc0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	429a      	cmp	r2, r3
 800365a:	d905      	bls.n	8003668 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800365c:	2301      	movs	r3, #1
 800365e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <xTaskRemoveFromEventList+0xc4>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e001      	b.n	800366c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800366c:	697b      	ldr	r3, [r7, #20]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20002724 	.word	0x20002724
 800367c:	20002704 	.word	0x20002704
 8003680:	2000222c 	.word	0x2000222c
 8003684:	200026bc 	.word	0x200026bc
 8003688:	20002228 	.word	0x20002228
 800368c:	20002710 	.word	0x20002710

08003690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <vTaskInternalSetTimeOutState+0x24>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <vTaskInternalSetTimeOutState+0x28>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	605a      	str	r2, [r3, #4]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20002714 	.word	0x20002714
 80036b8:	20002700 	.word	0x20002700

080036bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	613b      	str	r3, [r7, #16]
}
 80036de:	bf00      	nop
 80036e0:	e7fe      	b.n	80036e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	60fb      	str	r3, [r7, #12]
}
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80036fe:	f000 febd 	bl	800447c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003702:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <xTaskCheckForTimeOut+0xbc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800371a:	d102      	bne.n	8003722 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	e023      	b.n	800376a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <xTaskCheckForTimeOut+0xc0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d007      	beq.n	800373e <xTaskCheckForTimeOut+0x82>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	429a      	cmp	r2, r3
 8003736:	d302      	bcc.n	800373e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003738:	2301      	movs	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	e015      	b.n	800376a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	429a      	cmp	r2, r3
 8003746:	d20b      	bcs.n	8003760 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	1ad2      	subs	r2, r2, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff9b 	bl	8003690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e004      	b.n	800376a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003766:	2301      	movs	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800376a:	f000 feb7 	bl	80044dc <vPortExitCritical>

	return xReturn;
 800376e:	69fb      	ldr	r3, [r7, #28]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20002700 	.word	0x20002700
 800377c:	20002714 	.word	0x20002714

08003780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <vTaskMissedYield+0x14>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]
}
 800378a:	bf00      	nop
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20002710 	.word	0x20002710

08003798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037a0:	f000 f852 	bl	8003848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <prvIdleTask+0x28>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d9f9      	bls.n	80037a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <prvIdleTask+0x2c>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037bc:	e7f0      	b.n	80037a0 <prvIdleTask+0x8>
 80037be:	bf00      	nop
 80037c0:	2000222c 	.word	0x2000222c
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	e00c      	b.n	80037ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <prvInitialiseTaskLists+0x60>)
 80037e0:	4413      	add	r3, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fc9e 	bl	8002124 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3301      	adds	r3, #1
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b37      	cmp	r3, #55	; 0x37
 80037f2:	d9ef      	bls.n	80037d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037f4:	480d      	ldr	r0, [pc, #52]	; (800382c <prvInitialiseTaskLists+0x64>)
 80037f6:	f7fe fc95 	bl	8002124 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037fa:	480d      	ldr	r0, [pc, #52]	; (8003830 <prvInitialiseTaskLists+0x68>)
 80037fc:	f7fe fc92 	bl	8002124 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003800:	480c      	ldr	r0, [pc, #48]	; (8003834 <prvInitialiseTaskLists+0x6c>)
 8003802:	f7fe fc8f 	bl	8002124 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003806:	480c      	ldr	r0, [pc, #48]	; (8003838 <prvInitialiseTaskLists+0x70>)
 8003808:	f7fe fc8c 	bl	8002124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800380c:	480b      	ldr	r0, [pc, #44]	; (800383c <prvInitialiseTaskLists+0x74>)
 800380e:	f7fe fc89 	bl	8002124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <prvInitialiseTaskLists+0x78>)
 8003814:	4a05      	ldr	r2, [pc, #20]	; (800382c <prvInitialiseTaskLists+0x64>)
 8003816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <prvInitialiseTaskLists+0x7c>)
 800381a:	4a05      	ldr	r2, [pc, #20]	; (8003830 <prvInitialiseTaskLists+0x68>)
 800381c:	601a      	str	r2, [r3, #0]
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	2000222c 	.word	0x2000222c
 800382c:	2000268c 	.word	0x2000268c
 8003830:	200026a0 	.word	0x200026a0
 8003834:	200026bc 	.word	0x200026bc
 8003838:	200026d0 	.word	0x200026d0
 800383c:	200026e8 	.word	0x200026e8
 8003840:	200026b4 	.word	0x200026b4
 8003844:	200026b8 	.word	0x200026b8

08003848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800384e:	e019      	b.n	8003884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003850:	f000 fe14 	bl	800447c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003854:	4b10      	ldr	r3, [pc, #64]	; (8003898 <prvCheckTasksWaitingTermination+0x50>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fce5 	bl	8002230 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <prvCheckTasksWaitingTermination+0x54>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3b01      	subs	r3, #1
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <prvCheckTasksWaitingTermination+0x54>)
 800386e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <prvCheckTasksWaitingTermination+0x58>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3b01      	subs	r3, #1
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <prvCheckTasksWaitingTermination+0x58>)
 8003878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800387a:	f000 fe2f 	bl	80044dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f810 	bl	80038a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <prvCheckTasksWaitingTermination+0x58>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e1      	bne.n	8003850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200026d0 	.word	0x200026d0
 800389c:	200026fc 	.word	0x200026fc
 80038a0:	200026e4 	.word	0x200026e4

080038a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3354      	adds	r3, #84	; 0x54
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fab9 	bl	8004e28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d108      	bne.n	80038d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 ff9d 	bl	8004804 <vPortFree>
				vPortFree( pxTCB );
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 ff9a 	bl	8004804 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038d0:	e018      	b.n	8003904 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d103      	bne.n	80038e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 ff91 	bl	8004804 <vPortFree>
	}
 80038e2:	e00f      	b.n	8003904 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d00a      	beq.n	8003904 <prvDeleteTCB+0x60>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	60fb      	str	r3, [r7, #12]
}
 8003900:	bf00      	nop
 8003902:	e7fe      	b.n	8003902 <prvDeleteTCB+0x5e>
	}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <prvResetNextTaskUnblockTime+0x40>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <prvResetNextTaskUnblockTime+0x14>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <prvResetNextTaskUnblockTime+0x16>
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <prvResetNextTaskUnblockTime+0x44>)
 8003928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800392c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800392e:	e008      	b.n	8003942 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <prvResetNextTaskUnblockTime+0x40>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4a04      	ldr	r2, [pc, #16]	; (8003950 <prvResetNextTaskUnblockTime+0x44>)
 8003940:	6013      	str	r3, [r2, #0]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	200026b4 	.word	0x200026b4
 8003950:	2000271c 	.word	0x2000271c

08003954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <xTaskGetSchedulerState+0x34>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003962:	2301      	movs	r3, #1
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	e008      	b.n	800397a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <xTaskGetSchedulerState+0x38>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003970:	2302      	movs	r3, #2
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	e001      	b.n	800397a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800397a:	687b      	ldr	r3, [r7, #4]
	}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20002708 	.word	0x20002708
 800398c:	20002724 	.word	0x20002724

08003990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d056      	beq.n	8003a54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039a6:	4b2e      	ldr	r3, [pc, #184]	; (8003a60 <xTaskPriorityDisinherit+0xd0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d00a      	beq.n	80039c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	60fb      	str	r3, [r7, #12]
}
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	60bb      	str	r3, [r7, #8]
}
 80039e0:	bf00      	nop
 80039e2:	e7fe      	b.n	80039e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	1e5a      	subs	r2, r3, #1
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d02c      	beq.n	8003a54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d128      	bne.n	8003a54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fc12 	bl	8002230 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <xTaskPriorityDisinherit+0xd4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d903      	bls.n	8003a34 <xTaskPriorityDisinherit+0xa4>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <xTaskPriorityDisinherit+0xd4>)
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <xTaskPriorityDisinherit+0xd8>)
 8003a42:	441a      	add	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f7fe fb95 	bl	800217a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a54:	697b      	ldr	r3, [r7, #20]
	}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20002228 	.word	0x20002228
 8003a64:	20002704 	.word	0x20002704
 8003a68:	2000222c 	.word	0x2000222c

08003a6c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <prvAddCurrentTaskToDelayedList+0x90>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a7c:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fbd4 	bl	8002230 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8e:	d10a      	bne.n	8003aa6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4819      	ldr	r0, [pc, #100]	; (8003b04 <prvAddCurrentTaskToDelayedList+0x98>)
 8003aa0:	f7fe fb6b 	bl	800217a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003aa4:	e026      	b.n	8003af4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003aae:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d209      	bcs.n	8003ad2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	f7fe fb78 	bl	80021c0 <vListInsert>
}
 8003ad0:	e010      	b.n	8003af4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	f7fe fb6e 	bl	80021c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d202      	bcs.n	8003af4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003aee:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20002700 	.word	0x20002700
 8003b00:	20002228 	.word	0x20002228
 8003b04:	200026e8 	.word	0x200026e8
 8003b08:	200026b8 	.word	0x200026b8
 8003b0c:	200026b4 	.word	0x200026b4
 8003b10:	2000271c 	.word	0x2000271c

08003b14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b1e:	f000 fb5b 	bl	80041d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b22:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <xTimerCreateTimerTask+0x80>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d021      	beq.n	8003b6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b32:	1d3a      	adds	r2, r7, #4
 8003b34:	f107 0108 	add.w	r1, r7, #8
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe fad7 	bl	80020f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	9202      	str	r2, [sp, #8]
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2300      	movs	r3, #0
 8003b52:	460a      	mov	r2, r1
 8003b54:	4910      	ldr	r1, [pc, #64]	; (8003b98 <xTimerCreateTimerTask+0x84>)
 8003b56:	4811      	ldr	r0, [pc, #68]	; (8003b9c <xTimerCreateTimerTask+0x88>)
 8003b58:	f7ff f8b6 	bl	8002cc8 <xTaskCreateStatic>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <xTimerCreateTimerTask+0x8c>)
 8003b60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <xTimerCreateTimerTask+0x8c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	613b      	str	r3, [r7, #16]
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b8a:	697b      	ldr	r3, [r7, #20]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20002758 	.word	0x20002758
 8003b98:	080050d4 	.word	0x080050d4
 8003b9c:	08003de1 	.word	0x08003de1
 8003ba0:	2000275c 	.word	0x2000275c

08003ba4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003bb2:	2030      	movs	r0, #48	; 0x30
 8003bb4:	f000 fd62 	bl	800467c <pvPortMalloc>
 8003bb8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f846 	bl	8003c60 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8003bdc:	697b      	ldr	r3, [r7, #20]
	}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b08a      	sub	sp, #40	; 0x28
 8003bea:	af02      	add	r7, sp, #8
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003bf4:	2330      	movs	r3, #48	; 0x30
 8003bf6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b30      	cmp	r3, #48	; 0x30
 8003bfc:	d00a      	beq.n	8003c14 <xTimerCreateStatic+0x2e>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	61bb      	str	r3, [r7, #24]
}
 8003c10:	bf00      	nop
 8003c12:	e7fe      	b.n	8003c12 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <xTimerCreateStatic+0x4a>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	617b      	str	r3, [r7, #20]
}
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f809 	bl	8003c60 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8003c56:	69fb      	ldr	r3, [r7, #28]
	}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3720      	adds	r7, #32
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	617b      	str	r3, [r7, #20]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d015      	beq.n	8003cbc <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003c90:	f000 faa2 	bl	80041d8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	6a3a      	ldr	r2, [r7, #32]
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fa53 	bl	8002162 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003cbc:	bf00      	nop
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	; 0x28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	623b      	str	r3, [r7, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003cf2:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <xTimerGenericCommand+0x98>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d02a      	beq.n	8003d50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	dc18      	bgt.n	8003d3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d0c:	f7ff fe22 	bl	8003954 <xTaskGetSchedulerState>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d109      	bne.n	8003d2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <xTimerGenericCommand+0x98>)
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	f107 0110 	add.w	r1, r7, #16
 8003d1e:	2300      	movs	r3, #0
 8003d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d22:	f7fe fbef 	bl	8002504 <xQueueGenericSend>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24
 8003d28:	e012      	b.n	8003d50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <xTimerGenericCommand+0x98>)
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	f107 0110 	add.w	r1, r7, #16
 8003d32:	2300      	movs	r3, #0
 8003d34:	2200      	movs	r2, #0
 8003d36:	f7fe fbe5 	bl	8002504 <xQueueGenericSend>
 8003d3a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d3c:	e008      	b.n	8003d50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <xTimerGenericCommand+0x98>)
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	f107 0110 	add.w	r1, r7, #16
 8003d46:	2300      	movs	r3, #0
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	f7fe fcd9 	bl	8002700 <xQueueGenericSendFromISR>
 8003d4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3728      	adds	r7, #40	; 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20002758 	.word	0x20002758

08003d60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <prvProcessExpiredTimer+0x7c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe fa59 	bl	8002230 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d122      	bne.n	8003dcc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	18d1      	adds	r1, r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f000 f8c8 	bl	8003f28 <prvInsertTimerInActiveList>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2300      	movs	r3, #0
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	2100      	movs	r1, #0
 8003da8:	6978      	ldr	r0, [r7, #20]
 8003daa:	f7ff ff8b 	bl	8003cc4 <xTimerGenericCommand>
 8003dae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60fb      	str	r3, [r7, #12]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	6978      	ldr	r0, [r7, #20]
 8003dd2:	4798      	blx	r3
}
 8003dd4:	bf00      	nop
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20002750 	.word	0x20002750

08003de0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003de8:	f107 0308 	add.w	r3, r7, #8
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f857 	bl	8003ea0 <prvGetNextExpireTime>
 8003df2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4619      	mov	r1, r3
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f803 	bl	8003e04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003dfe:	f000 f8d5 	bl	8003fac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e02:	e7f1      	b.n	8003de8 <prvTimerTask+0x8>

08003e04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e0e:	f7ff f9af 	bl	8003170 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e12:	f107 0308 	add.w	r3, r7, #8
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f866 	bl	8003ee8 <prvSampleTimeNow>
 8003e1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d130      	bne.n	8003e86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <prvProcessTimerOrBlockTask+0x3c>
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d806      	bhi.n	8003e40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e32:	f7ff f9ab 	bl	800318c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff91 	bl	8003d60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e3e:	e024      	b.n	8003e8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <prvProcessTimerOrBlockTask+0x90>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <prvProcessTimerOrBlockTask+0x94>)
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	4619      	mov	r1, r3
 8003e66:	f7fe fefb 	bl	8002c60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e6a:	f7ff f98f 	bl	800318c <xTaskResumeAll>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <prvProcessTimerOrBlockTask+0x98>)
 8003e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	f3bf 8f6f 	isb	sy
}
 8003e84:	e001      	b.n	8003e8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e86:	f7ff f981 	bl	800318c <xTaskResumeAll>
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20002754 	.word	0x20002754
 8003e98:	20002758 	.word	0x20002758
 8003e9c:	e000ed04 	.word	0xe000ed04

08003ea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <prvGetNextExpireTime+0x44>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	2300      	movne	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d105      	bne.n	8003ed2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <prvGetNextExpireTime+0x44>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e001      	b.n	8003ed6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20002750 	.word	0x20002750

08003ee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ef0:	f7ff f9ea 	bl	80032c8 <xTaskGetTickCount>
 8003ef4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <prvSampleTimeNow+0x3c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d205      	bcs.n	8003f0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f00:	f000 f908 	bl	8004114 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e002      	b.n	8003f12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f12:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <prvSampleTimeNow+0x3c>)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f18:	68fb      	ldr	r3, [r7, #12]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20002760 	.word	0x20002760

08003f28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d812      	bhi.n	8003f74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	1ad2      	subs	r2, r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d302      	bcc.n	8003f62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	e01b      	b.n	8003f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <prvInsertTimerInActiveList+0x7c>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7fe f927 	bl	80021c0 <vListInsert>
 8003f72:	e012      	b.n	8003f9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d206      	bcs.n	8003f8a <prvInsertTimerInActiveList+0x62>
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d302      	bcc.n	8003f8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f84:	2301      	movs	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e007      	b.n	8003f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <prvInsertTimerInActiveList+0x80>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7fe f913 	bl	80021c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f9a:	697b      	ldr	r3, [r7, #20]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20002754 	.word	0x20002754
 8003fa8:	20002750 	.word	0x20002750

08003fac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08e      	sub	sp, #56	; 0x38
 8003fb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fb2:	e09d      	b.n	80040f0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	da18      	bge.n	8003fec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003fba:	1d3b      	adds	r3, r7, #4
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	61fb      	str	r3, [r7, #28]
}
 8003fd8:	bf00      	nop
 8003fda:	e7fe      	b.n	8003fda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe2:	6850      	ldr	r0, [r2, #4]
 8003fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe6:	6892      	ldr	r2, [r2, #8]
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	db7e      	blt.n	80040f0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	3304      	adds	r3, #4
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe f914 	bl	8002230 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004008:	463b      	mov	r3, r7
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff6c 	bl	8003ee8 <prvSampleTimeNow>
 8004010:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b09      	cmp	r3, #9
 8004016:	d86a      	bhi.n	80040ee <prvProcessReceivedCommands+0x142>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <prvProcessReceivedCommands+0x74>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004049 	.word	0x08004049
 8004024:	08004049 	.word	0x08004049
 8004028:	08004049 	.word	0x08004049
 800402c:	080040f1 	.word	0x080040f1
 8004030:	080040a5 	.word	0x080040a5
 8004034:	080040dd 	.word	0x080040dd
 8004038:	08004049 	.word	0x08004049
 800403c:	08004049 	.word	0x08004049
 8004040:	080040f1 	.word	0x080040f1
 8004044:	080040a5 	.word	0x080040a5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	18d1      	adds	r1, r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004056:	f7ff ff67 	bl	8003f28 <prvInsertTimerInActiveList>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d047      	beq.n	80040f0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004066:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d13f      	bne.n	80040f0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	441a      	add	r2, r3
 8004078:	2300      	movs	r3, #0
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2300      	movs	r3, #0
 800407e:	2100      	movs	r1, #0
 8004080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004082:	f7ff fe1f 	bl	8003cc4 <xTimerGenericCommand>
 8004086:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d130      	bne.n	80040f0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	61bb      	str	r3, [r7, #24]
}
 80040a0:	bf00      	nop
 80040a2:	e7fe      	b.n	80040a2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	617b      	str	r3, [r7, #20]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	699a      	ldr	r2, [r3, #24]
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	18d1      	adds	r1, r2, r3
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040d6:	f7ff ff27 	bl	8003f28 <prvInsertTimerInActiveList>
					break;
 80040da:	e009      	b.n	80040f0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80040e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e8:	f000 fb8c 	bl	8004804 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040ec:	e000      	b.n	80040f0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80040ee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <prvProcessReceivedCommands+0x164>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	1d39      	adds	r1, r7, #4
 80040f6:	2200      	movs	r2, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fb99 	bl	8002830 <xQueueReceive>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	f47f af57 	bne.w	8003fb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	3730      	adds	r7, #48	; 0x30
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20002758 	.word	0x20002758

08004114 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800411a:	e045      	b.n	80041a8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <prvSwitchTimerLists+0xbc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <prvSwitchTimerLists+0xbc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3304      	adds	r3, #4
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe f87b 	bl	8002230 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d12e      	bne.n	80041a8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	429a      	cmp	r2, r3
 800415a:	d90e      	bls.n	800417a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <prvSwitchTimerLists+0xbc>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3304      	adds	r3, #4
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f7fe f824 	bl	80021c0 <vListInsert>
 8004178:	e016      	b.n	80041a8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800417a:	2300      	movs	r3, #0
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	2100      	movs	r1, #0
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff fd9d 	bl	8003cc4 <xTimerGenericCommand>
 800418a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	603b      	str	r3, [r7, #0]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <prvSwitchTimerLists+0xbc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1b4      	bne.n	800411c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80041b2:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <prvSwitchTimerLists+0xbc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <prvSwitchTimerLists+0xc0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <prvSwitchTimerLists+0xbc>)
 80041be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80041c0:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <prvSwitchTimerLists+0xc0>)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	6013      	str	r3, [r2, #0]
}
 80041c6:	bf00      	nop
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20002750 	.word	0x20002750
 80041d4:	20002754 	.word	0x20002754

080041d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041de:	f000 f94d 	bl	800447c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <prvCheckForValidListAndQueue+0x60>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d120      	bne.n	800422c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041ea:	4814      	ldr	r0, [pc, #80]	; (800423c <prvCheckForValidListAndQueue+0x64>)
 80041ec:	f7fd ff9a 	bl	8002124 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041f0:	4813      	ldr	r0, [pc, #76]	; (8004240 <prvCheckForValidListAndQueue+0x68>)
 80041f2:	f7fd ff97 	bl	8002124 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041f6:	4b13      	ldr	r3, [pc, #76]	; (8004244 <prvCheckForValidListAndQueue+0x6c>)
 80041f8:	4a10      	ldr	r2, [pc, #64]	; (800423c <prvCheckForValidListAndQueue+0x64>)
 80041fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041fc:	4b12      	ldr	r3, [pc, #72]	; (8004248 <prvCheckForValidListAndQueue+0x70>)
 80041fe:	4a10      	ldr	r2, [pc, #64]	; (8004240 <prvCheckForValidListAndQueue+0x68>)
 8004200:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004202:	2300      	movs	r3, #0
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <prvCheckForValidListAndQueue+0x74>)
 8004208:	4a11      	ldr	r2, [pc, #68]	; (8004250 <prvCheckForValidListAndQueue+0x78>)
 800420a:	2110      	movs	r1, #16
 800420c:	200a      	movs	r0, #10
 800420e:	f7fe f8a1 	bl	8002354 <xQueueGenericCreateStatic>
 8004212:	4603      	mov	r3, r0
 8004214:	4a08      	ldr	r2, [pc, #32]	; (8004238 <prvCheckForValidListAndQueue+0x60>)
 8004216:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <prvCheckForValidListAndQueue+0x60>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <prvCheckForValidListAndQueue+0x60>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	490b      	ldr	r1, [pc, #44]	; (8004254 <prvCheckForValidListAndQueue+0x7c>)
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe fcf2 	bl	8002c10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800422c:	f000 f956 	bl	80044dc <vPortExitCritical>
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20002758 	.word	0x20002758
 800423c:	20002728 	.word	0x20002728
 8004240:	2000273c 	.word	0x2000273c
 8004244:	20002750 	.word	0x20002750
 8004248:	20002754 	.word	0x20002754
 800424c:	20002804 	.word	0x20002804
 8004250:	20002764 	.word	0x20002764
 8004254:	080050dc 	.word	0x080050dc

08004258 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <pvTimerGetTimerID+0x28>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	60fb      	str	r3, [r7, #12]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8004280:	f000 f8fc 	bl	800447c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800428a:	f000 f927 	bl	80044dc <vPortExitCritical>

	return pvReturn;
 800428e:	693b      	ldr	r3, [r7, #16]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3b04      	subs	r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3b04      	subs	r3, #4
 80042b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f023 0201 	bic.w	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3b04      	subs	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042c8:	4a08      	ldr	r2, [pc, #32]	; (80042ec <pxPortInitialiseStack+0x54>)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b14      	subs	r3, #20
 80042d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3b20      	subs	r3, #32
 80042de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80042e0:	68fb      	ldr	r3, [r7, #12]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	080042f1 	.word	0x080042f1

080042f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <prvTaskExitError+0x54>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004302:	d00a      	beq.n	800431a <prvTaskExitError+0x2a>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	60fb      	str	r3, [r7, #12]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <prvTaskExitError+0x28>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	60bb      	str	r3, [r7, #8]
}
 800432c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800432e:	bf00      	nop
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0fc      	beq.n	8004330 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	2000000c 	.word	0x2000000c
	...

08004350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <pxCurrentTCBConst2>)
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	6808      	ldr	r0, [r1, #0]
 8004356:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800435a:	f380 8809 	msr	PSP, r0
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f380 8811 	msr	BASEPRI, r0
 800436a:	f04e 0e0d 	orr.w	lr, lr, #13
 800436e:	4770      	bx	lr

08004370 <pxCurrentTCBConst2>:
 8004370:	20002228 	.word	0x20002228
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004378:	4806      	ldr	r0, [pc, #24]	; (8004394 <prvPortStartFirstTask+0x1c>)
 800437a:	6800      	ldr	r0, [r0, #0]
 800437c:	6800      	ldr	r0, [r0, #0]
 800437e:	f380 8808 	msr	MSP, r0
 8004382:	b662      	cpsie	i
 8004384:	b661      	cpsie	f
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	df00      	svc	0
 8004390:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004392:	bf00      	nop
 8004394:	e000ed08 	.word	0xe000ed08

08004398 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800439e:	4b32      	ldr	r3, [pc, #200]	; (8004468 <xPortStartScheduler+0xd0>)
 80043a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	22ff      	movs	r2, #255	; 0xff
 80043ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4b2a      	ldr	r3, [pc, #168]	; (800446c <xPortStartScheduler+0xd4>)
 80043c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043c6:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <xPortStartScheduler+0xd8>)
 80043c8:	2207      	movs	r2, #7
 80043ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043cc:	e009      	b.n	80043e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80043ce:	4b28      	ldr	r3, [pc, #160]	; (8004470 <xPortStartScheduler+0xd8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	4a26      	ldr	r2, [pc, #152]	; (8004470 <xPortStartScheduler+0xd8>)
 80043d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	2b80      	cmp	r3, #128	; 0x80
 80043ec:	d0ef      	beq.n	80043ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <xPortStartScheduler+0xd8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1c3 0307 	rsb	r3, r3, #7
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d00a      	beq.n	8004410 <xPortStartScheduler+0x78>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	60bb      	str	r3, [r7, #8]
}
 800440c:	bf00      	nop
 800440e:	e7fe      	b.n	800440e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <xPortStartScheduler+0xd8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	4a16      	ldr	r2, [pc, #88]	; (8004470 <xPortStartScheduler+0xd8>)
 8004418:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <xPortStartScheduler+0xd8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004422:	4a13      	ldr	r2, [pc, #76]	; (8004470 <xPortStartScheduler+0xd8>)
 8004424:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <xPortStartScheduler+0xdc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a10      	ldr	r2, [pc, #64]	; (8004474 <xPortStartScheduler+0xdc>)
 8004434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004438:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800443a:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <xPortStartScheduler+0xdc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a0d      	ldr	r2, [pc, #52]	; (8004474 <xPortStartScheduler+0xdc>)
 8004440:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004444:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004446:	f000 f8b9 	bl	80045bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <xPortStartScheduler+0xe0>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004450:	f7ff ff92 	bl	8004378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004454:	f7ff f804 	bl	8003460 <vTaskSwitchContext>
	prvTaskExitError();
 8004458:	f7ff ff4a 	bl	80042f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	e000e400 	.word	0xe000e400
 800446c:	20002854 	.word	0x20002854
 8004470:	20002858 	.word	0x20002858
 8004474:	e000ed20 	.word	0xe000ed20
 8004478:	2000000c 	.word	0x2000000c

0800447c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	607b      	str	r3, [r7, #4]
}
 8004494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004496:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <vPortEnterCritical+0x58>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <vPortEnterCritical+0x58>)
 800449e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <vPortEnterCritical+0x58>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d10f      	bne.n	80044c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <vPortEnterCritical+0x5c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	603b      	str	r3, [r7, #0]
}
 80044c4:	bf00      	nop
 80044c6:	e7fe      	b.n	80044c6 <vPortEnterCritical+0x4a>
	}
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	2000000c 	.word	0x2000000c
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <vPortExitCritical+0x4c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <vPortExitCritical+0x24>
	__asm volatile
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	607b      	str	r3, [r7, #4]
}
 80044fc:	bf00      	nop
 80044fe:	e7fe      	b.n	80044fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <vPortExitCritical+0x4c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3b01      	subs	r3, #1
 8004506:	4a08      	ldr	r2, [pc, #32]	; (8004528 <vPortExitCritical+0x4c>)
 8004508:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800450a:	4b07      	ldr	r3, [pc, #28]	; (8004528 <vPortExitCritical+0x4c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <vPortExitCritical+0x42>
 8004512:	2300      	movs	r3, #0
 8004514:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f383 8811 	msr	BASEPRI, r3
}
 800451c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	2000000c 	.word	0x2000000c
 800452c:	00000000 	.word	0x00000000

08004530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004530:	f3ef 8009 	mrs	r0, PSP
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <pxCurrentTCBConst>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004540:	6010      	str	r0, [r2, #0]
 8004542:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004546:	f04f 0050 	mov.w	r0, #80	; 0x50
 800454a:	f380 8811 	msr	BASEPRI, r0
 800454e:	f7fe ff87 	bl	8003460 <vTaskSwitchContext>
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f380 8811 	msr	BASEPRI, r0
 800455a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	6808      	ldr	r0, [r1, #0]
 8004562:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004566:	f380 8809 	msr	PSP, r0
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	4770      	bx	lr

08004570 <pxCurrentTCBConst>:
 8004570:	20002228 	.word	0x20002228
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop

08004578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004592:	f7fe fea7 	bl	80032e4 <xTaskIncrementTick>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <SysTick_Handler+0x40>)
 800459e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f383 8811 	msr	BASEPRI, r3
}
 80045ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <vPortSetupTimerInterrupt+0x30>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045cc:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <vPortSetupTimerInterrupt+0x38>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <vPortSetupTimerInterrupt+0x3c>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	4a08      	ldr	r2, [pc, #32]	; (80045fc <vPortSetupTimerInterrupt+0x40>)
 80045da:	3b01      	subs	r3, #1
 80045dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045de:	4b03      	ldr	r3, [pc, #12]	; (80045ec <vPortSetupTimerInterrupt+0x30>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr
 80045ec:	e000e010 	.word	0xe000e010
 80045f0:	e000e018 	.word	0xe000e018
 80045f4:	20000000 	.word	0x20000000
 80045f8:	10624dd3 	.word	0x10624dd3
 80045fc:	e000e014 	.word	0xe000e014

08004600 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004606:	f3ef 8305 	mrs	r3, IPSR
 800460a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b0f      	cmp	r3, #15
 8004610:	d914      	bls.n	800463c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004612:	4a16      	ldr	r2, [pc, #88]	; (800466c <vPortValidateInterruptPriority+0x6c>)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <vPortValidateInterruptPriority+0x70>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	7afa      	ldrb	r2, [r7, #11]
 8004622:	429a      	cmp	r2, r3
 8004624:	d20a      	bcs.n	800463c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	607b      	str	r3, [r7, #4]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <vPortValidateInterruptPriority+0x74>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <vPortValidateInterruptPriority+0x78>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d90a      	bls.n	8004662 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	603b      	str	r3, [r7, #0]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <vPortValidateInterruptPriority+0x60>
	}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr
 800466c:	e000e3f0 	.word	0xe000e3f0
 8004670:	20002854 	.word	0x20002854
 8004674:	e000ed0c 	.word	0xe000ed0c
 8004678:	20002858 	.word	0x20002858

0800467c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004688:	f7fe fd72 	bl	8003170 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800468c:	4b58      	ldr	r3, [pc, #352]	; (80047f0 <pvPortMalloc+0x174>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004694:	f000 f910 	bl	80048b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004698:	4b56      	ldr	r3, [pc, #344]	; (80047f4 <pvPortMalloc+0x178>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 808e 	bne.w	80047c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01d      	beq.n	80046e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80046ac:	2208      	movs	r2, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d014      	beq.n	80046e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f023 0307 	bic.w	r3, r3, #7
 80046c4:	3308      	adds	r3, #8
 80046c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <pvPortMalloc+0x6c>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	617b      	str	r3, [r7, #20]
}
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d069      	beq.n	80047c2 <pvPortMalloc+0x146>
 80046ee:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <pvPortMalloc+0x17c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d864      	bhi.n	80047c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046f8:	4b40      	ldr	r3, [pc, #256]	; (80047fc <pvPortMalloc+0x180>)
 80046fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046fc:	4b3f      	ldr	r3, [pc, #252]	; (80047fc <pvPortMalloc+0x180>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004702:	e004      	b.n	800470e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	d903      	bls.n	8004720 <pvPortMalloc+0xa4>
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f1      	bne.n	8004704 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004720:	4b33      	ldr	r3, [pc, #204]	; (80047f0 <pvPortMalloc+0x174>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004726:	429a      	cmp	r2, r3
 8004728:	d04b      	beq.n	80047c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2208      	movs	r2, #8
 8004730:	4413      	add	r3, r2
 8004732:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	2308      	movs	r3, #8
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	429a      	cmp	r2, r3
 800474a:	d91f      	bls.n	800478c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800474c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <pvPortMalloc+0xf8>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	613b      	str	r3, [r7, #16]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004786:	69b8      	ldr	r0, [r7, #24]
 8004788:	f000 f8f8 	bl	800497c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <pvPortMalloc+0x17c>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <pvPortMalloc+0x17c>)
 8004798:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800479a:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <pvPortMalloc+0x17c>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b18      	ldr	r3, [pc, #96]	; (8004800 <pvPortMalloc+0x184>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d203      	bcs.n	80047ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <pvPortMalloc+0x17c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a15      	ldr	r2, [pc, #84]	; (8004800 <pvPortMalloc+0x184>)
 80047ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <pvPortMalloc+0x178>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047c2:	f7fe fce3 	bl	800318c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <pvPortMalloc+0x16a>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	60fb      	str	r3, [r7, #12]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <pvPortMalloc+0x168>
	return pvReturn;
 80047e6:	69fb      	ldr	r3, [r7, #28]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3728      	adds	r7, #40	; 0x28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20003464 	.word	0x20003464
 80047f4:	20003470 	.word	0x20003470
 80047f8:	20003468 	.word	0x20003468
 80047fc:	2000345c 	.word	0x2000345c
 8004800:	2000346c 	.word	0x2000346c

08004804 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d048      	beq.n	80048a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004816:	2308      	movs	r3, #8
 8004818:	425b      	negs	r3, r3
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4413      	add	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <vPortFree+0xac>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <vPortFree+0x44>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	60fb      	str	r3, [r7, #12]
}
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <vPortFree+0x62>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	60bb      	str	r3, [r7, #8]
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <vPortFree+0xac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d019      	beq.n	80048a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d115      	bne.n	80048a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <vPortFree+0xac>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	43db      	mvns	r3, r3
 8004886:	401a      	ands	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800488c:	f7fe fc70 	bl	8003170 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <vPortFree+0xb0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4413      	add	r3, r2
 800489a:	4a06      	ldr	r2, [pc, #24]	; (80048b4 <vPortFree+0xb0>)
 800489c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800489e:	6938      	ldr	r0, [r7, #16]
 80048a0:	f000 f86c 	bl	800497c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80048a4:	f7fe fc72 	bl	800318c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048a8:	bf00      	nop
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20003470 	.word	0x20003470
 80048b4:	20003468 	.word	0x20003468

080048b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048c4:	4b27      	ldr	r3, [pc, #156]	; (8004964 <prvHeapInit+0xac>)
 80048c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00c      	beq.n	80048ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3307      	adds	r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0307 	bic.w	r3, r3, #7
 80048de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <prvHeapInit+0xac>)
 80048e8:	4413      	add	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048f0:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <prvHeapInit+0xb0>)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048f6:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <prvHeapInit+0xb0>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004904:	2208      	movs	r2, #8
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0307 	bic.w	r3, r3, #7
 8004912:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a15      	ldr	r2, [pc, #84]	; (800496c <prvHeapInit+0xb4>)
 8004918:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800491a:	4b14      	ldr	r3, [pc, #80]	; (800496c <prvHeapInit+0xb4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2200      	movs	r2, #0
 8004920:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004922:	4b12      	ldr	r3, [pc, #72]	; (800496c <prvHeapInit+0xb4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	1ad2      	subs	r2, r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <prvHeapInit+0xb4>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <prvHeapInit+0xb8>)
 8004946:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	4a09      	ldr	r2, [pc, #36]	; (8004974 <prvHeapInit+0xbc>)
 800494e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <prvHeapInit+0xc0>)
 8004952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004956:	601a      	str	r2, [r3, #0]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	2000285c 	.word	0x2000285c
 8004968:	2000345c 	.word	0x2000345c
 800496c:	20003464 	.word	0x20003464
 8004970:	2000346c 	.word	0x2000346c
 8004974:	20003468 	.word	0x20003468
 8004978:	20003470 	.word	0x20003470

0800497c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <prvInsertBlockIntoFreeList+0xa8>)
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e002      	b.n	8004990 <prvInsertBlockIntoFreeList+0x14>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d8f7      	bhi.n	800498a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	4413      	add	r3, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d108      	bne.n	80049be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	441a      	add	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	441a      	add	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d118      	bne.n	8004a04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <prvInsertBlockIntoFreeList+0xac>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d00d      	beq.n	80049fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	441a      	add	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e008      	b.n	8004a0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <prvInsertBlockIntoFreeList+0xac>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e003      	b.n	8004a0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d002      	beq.n	8004a1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr
 8004a24:	2000345c 	.word	0x2000345c
 8004a28:	20003464 	.word	0x20003464

08004a2c <initializeTransitionEvent>:
 * @param table Two-dimensional array representing the transition table.
 * @param num_states The number of states in the state machine.
 * @param num_events The number of possible events.
 */
void initializeTransitionEvent(int8_t table[][NUM_EVENTS], uint8_t num_states, uint8_t num_events)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	70fb      	strb	r3, [r7, #3]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	70bb      	strb	r3, [r7, #2]
    // Filling the transition table with -1 values, indicating no transitions.
    for (uint8_t i = 0; i < num_states; ++i) {
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73fb      	strb	r3, [r7, #15]
 8004a40:	e017      	b.n	8004a72 <initializeTransitionEvent+0x46>
        for (uint8_t j = 0; j < num_events; ++j) {
 8004a42:	2300      	movs	r3, #0
 8004a44:	73bb      	strb	r3, [r7, #14]
 8004a46:	e00d      	b.n	8004a64 <initializeTransitionEvent+0x38>
            table[i][j] = -1; // Setting the value -1 for each element of the transition table.
 8004a48:	7bfa      	ldrb	r2, [r7, #15]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	461a      	mov	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	441a      	add	r2, r3
 8004a58:	7bbb      	ldrb	r3, [r7, #14]
 8004a5a:	21ff      	movs	r1, #255	; 0xff
 8004a5c:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < num_events; ++j) {
 8004a5e:	7bbb      	ldrb	r3, [r7, #14]
 8004a60:	3301      	adds	r3, #1
 8004a62:	73bb      	strb	r3, [r7, #14]
 8004a64:	7bba      	ldrb	r2, [r7, #14]
 8004a66:	78bb      	ldrb	r3, [r7, #2]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d3ed      	bcc.n	8004a48 <initializeTransitionEvent+0x1c>
    for (uint8_t i = 0; i < num_states; ++i) {
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d3e3      	bcc.n	8004a42 <initializeTransitionEvent+0x16>
        }
    }
}
 8004a7a:	bf00      	nop
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <initializeTransitionFork>:
 * @param table A two-dimensional array representing the transition table.
 * @param num_states The number of states in the finite state machine.
 * @param num_new_states The number of new states that can be reached from each current state.
 */
void initializeTransitionFork(int8_t table[][NUM_STATES], uint8_t num_states, uint8_t num_new_states)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70fb      	strb	r3, [r7, #3]
 8004a92:	4613      	mov	r3, r2
 8004a94:	70bb      	strb	r3, [r7, #2]
    // Fills the state table with -1 values, indicating no transitions.
    for (uint8_t i = 0; i < num_states; ++i) {
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	e017      	b.n	8004acc <initializeTransitionFork+0x46>
        for (uint8_t j = 0; j < num_new_states; ++j) {
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	73bb      	strb	r3, [r7, #14]
 8004aa0:	e00d      	b.n	8004abe <initializeTransitionFork+0x38>
            table[i][j] = -1;
 8004aa2:	7bfa      	ldrb	r2, [r7, #15]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	461a      	mov	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	441a      	add	r2, r3
 8004ab2:	7bbb      	ldrb	r3, [r7, #14]
 8004ab4:	21ff      	movs	r1, #255	; 0xff
 8004ab6:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < num_new_states; ++j) {
 8004ab8:	7bbb      	ldrb	r3, [r7, #14]
 8004aba:	3301      	adds	r3, #1
 8004abc:	73bb      	strb	r3, [r7, #14]
 8004abe:	7bba      	ldrb	r2, [r7, #14]
 8004ac0:	78bb      	ldrb	r3, [r7, #2]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d3ed      	bcc.n	8004aa2 <initializeTransitionFork+0x1c>
    for (uint8_t i = 0; i < num_states; ++i) {
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
 8004acc:	7bfa      	ldrb	r2, [r7, #15]
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d3e3      	bcc.n	8004a9c <initializeTransitionFork+0x16>
        }
    }
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <initializeTransitionEndState>:
 *
 * @param table The array representing the end state table.
 * @param num_states The number of states in the finite state machine.
 */
void initializeTransitionEndState(int8_t table[], uint8_t num_states)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
    // Fills the end state table with -1 values, indicating no transitions.
    for (uint8_t i = 0; i < num_states; ++i) {
 8004aec:	2300      	movs	r3, #0
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	e007      	b.n	8004b02 <initializeTransitionEndState+0x22>
        table[i] = -1;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	4413      	add	r3, r2
 8004af8:	22ff      	movs	r2, #255	; 0xff
 8004afa:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_states; ++i) {
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	3301      	adds	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
 8004b02:	7bfa      	ldrb	r2, [r7, #15]
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d3f3      	bcc.n	8004af2 <initializeTransitionEndState+0x12>
    }
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr
	...

08004b18 <addToTransitionFork>:
 *
 * @param initial_state The initial state of the transition.
 * @param new_state The new state to transition to.
 */
void addToTransitionFork(int8_t initial_state, int8_t new_state)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	460a      	mov	r2, r1
 8004b22:	71fb      	strb	r3, [r7, #7]
 8004b24:	4613      	mov	r3, r2
 8004b26:	71bb      	strb	r3, [r7, #6]
    // Check if the provided states are valid
    if (initial_state >= NUM_STATES || new_state >= NUM_STATES) {
 8004b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2c:	2b09      	cmp	r3, #9
 8004b2e:	dc11      	bgt.n	8004b54 <addToTransitionFork+0x3c>
 8004b30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004b34:	2b09      	cmp	r3, #9
 8004b36:	dc0d      	bgt.n	8004b54 <addToTransitionFork+0x3c>
        // Output an error message or take other measures
        return;
    }

    // Set the transition in the transition fork state table
    transitionForkState[initial_state][new_state] = 1; // Here, 1 can be any other value depending on your logic
 8004b38:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004b3c:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8004b40:	4807      	ldr	r0, [pc, #28]	; (8004b60 <addToTransitionFork+0x48>)
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4403      	add	r3, r0
 8004b4c:	440b      	add	r3, r1
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e000      	b.n	8004b56 <addToTransitionFork+0x3e>
        return;
 8004b54:	bf00      	nop
}
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	200034e4 	.word	0x200034e4

08004b64 <addToTransitionEvent>:
 * @param initial_state The initial state of the transition.
 * @param new_state The new state to transition to.
 * @param event The event triggering the transition.
 */
void addToTransitionEvent(int8_t initial_state, int8_t new_state, int8_t event)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	71fb      	strb	r3, [r7, #7]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	71bb      	strb	r3, [r7, #6]
 8004b72:	4613      	mov	r3, r2
 8004b74:	717b      	strb	r3, [r7, #5]
    // Check if the provided states and event are valid
    if (initial_state >= NUM_STATES || new_state >= NUM_STATES || event >= NUM_EVENTS) {
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	2b09      	cmp	r3, #9
 8004b7c:	dc15      	bgt.n	8004baa <addToTransitionEvent+0x46>
 8004b7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004b82:	2b09      	cmp	r3, #9
 8004b84:	dc11      	bgt.n	8004baa <addToTransitionEvent+0x46>
 8004b86:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004b8a:	2b09      	cmp	r3, #9
 8004b8c:	dc0d      	bgt.n	8004baa <addToTransitionEvent+0x46>
        // Output an error message or take other measures
        return;
    }

    // Fill the transition table
    transitionTable[initial_state][event] = new_state;
 8004b8e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004b92:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8004b96:	4807      	ldr	r0, [pc, #28]	; (8004bb4 <addToTransitionEvent+0x50>)
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4403      	add	r3, r0
 8004ba2:	440b      	add	r3, r1
 8004ba4:	79ba      	ldrb	r2, [r7, #6]
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	e000      	b.n	8004bac <addToTransitionEvent+0x48>
        return;
 8004baa:	bf00      	nop
}
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	20003474 	.word	0x20003474

08004bb8 <addToTransitionEndState>:
 *
 * @param initial_state The initial state to add the end state for.
 * @param new_state The new end state to add.
 */
void addToTransitionEndState(int8_t initial_state, int8_t new_state)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	460a      	mov	r2, r1
 8004bc2:	71fb      	strb	r3, [r7, #7]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71bb      	strb	r3, [r7, #6]
    // Check if the provided states are valid
    if (initial_state >= NUM_STATES || new_state >= NUM_STATES) {
 8004bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bcc:	2b09      	cmp	r3, #9
 8004bce:	dc09      	bgt.n	8004be4 <addToTransitionEndState+0x2c>
 8004bd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004bd4:	2b09      	cmp	r3, #9
 8004bd6:	dc05      	bgt.n	8004be4 <addToTransitionEndState+0x2c>
        // Output an error message or take other measures
        return;
    }

    // Fill the transition end state table
    transitionEndState[initial_state] = new_state;
 8004bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bdc:	4904      	ldr	r1, [pc, #16]	; (8004bf0 <addToTransitionEndState+0x38>)
 8004bde:	79ba      	ldrb	r2, [r7, #6]
 8004be0:	54ca      	strb	r2, [r1, r3]
 8004be2:	e000      	b.n	8004be6 <addToTransitionEndState+0x2e>
        return;
 8004be4:	bf00      	nop
}
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	200034d8 	.word	0x200034d8

08004bf4 <handleTransition>:
 * @param event The event triggering the state transition.
 * @param currentState The current state.
 * @return The new state after the transition. Returns -1 if there is no transition defined for the given event and current state.
 */
int8_t handleTransition(int8_t event, int8_t currentState)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	460a      	mov	r2, r1
 8004bfe:	71fb      	strb	r3, [r7, #7]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71bb      	strb	r3, [r7, #6]
    // Check if there is a new state for the given event
    if (transitionTable[currentState][event] != -1) {
 8004c04:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004c08:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8004c0c:	4811      	ldr	r0, [pc, #68]	; (8004c54 <handleTransition+0x60>)
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4403      	add	r3, r0
 8004c18:	440b      	add	r3, r1
 8004c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c22:	d00f      	beq.n	8004c44 <handleTransition+0x50>
        // Retrieve the new state
        int8_t newState = transitionTable[currentState][event];
 8004c24:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004c28:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8004c2c:	4809      	ldr	r0, [pc, #36]	; (8004c54 <handleTransition+0x60>)
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	4403      	add	r3, r0
 8004c38:	440b      	add	r3, r1
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	73fb      	strb	r3, [r7, #15]
        return newState;
 8004c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c42:	e001      	b.n	8004c48 <handleTransition+0x54>
    } else {
        // No transition defined for the given event and current state
        return -1;
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20003474 	.word	0x20003474

08004c58 <createStateQueueMapping>:
 *
 * @param state The state to associate with the message queue.
 * @param queueHandle The handle of the message queue.
 */
void createStateQueueMapping(int8_t state, osMessageQueueId_t queueHandle)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	6039      	str	r1, [r7, #0]
 8004c62:	71fb      	strb	r3, [r7, #7]
    // Create the association between the state and the message queue
    stateQueueMappings[state] = queueHandle;
 8004c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c68:	4904      	ldr	r1, [pc, #16]	; (8004c7c <createStateQueueMapping+0x24>)
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20003548 	.word	0x20003548

08004c80 <getQueueForState>:
 *
 * @param state The state for which to retrieve the associated message queue.
 * @return The handle of the message queue associated with the specified state.
 */
osMessageQueueId_t getQueueForState(int8_t state)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
    // Retrieve the message queue associated with the state
    return stateQueueMappings[state];
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <getQueueForState+0x20>)
 8004c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20003548 	.word	0x20003548

08004ca4 <MessageQueueState>:
 * The MessageQueueState function sends a state value to the message queue associated with the specified state.
 *
 * @param state The state value to send to the message queue.
 */
void MessageQueueState(int8_t state)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	4603      	mov	r3, r0
 8004cac:	71fb      	strb	r3, [r7, #7]
    // Send the state value to the message queue associated with the specified state
    xQueueSend(getQueueForState(state), &state, pdMS_TO_TICKS(DELAY_QUEUE));
 8004cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ffe4 	bl	8004c80 <getQueueForState>
 8004cb8:	1df9      	adds	r1, r7, #7
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004cc0:	f7fd fc20 	bl	8002504 <xQueueGenericSend>
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <MessageQueueEvent>:
 *
 * @param state The state associated with the message queue.
 * @param event The event value to send to the message queue.
 */
void MessageQueueEvent(int8_t state, int8_t event)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	460a      	mov	r2, r1
 8004cd6:	71fb      	strb	r3, [r7, #7]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	71bb      	strb	r3, [r7, #6]
    // Send the event value to the message queue associated with the specified state
    xQueueSend(getQueueForState(state), &event, pdMS_TO_TICKS(DELAY_QUEUE));
 8004cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff ffcd 	bl	8004c80 <getQueueForState>
 8004ce6:	1db9      	adds	r1, r7, #6
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004cee:	f7fd fc09 	bl	8002504 <xQueueGenericSend>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <sendToTransitionFork>:
 * The sendToTransitionFork function sends messages to the message queues associated with the new states based on the fork transitions from the current state.
 *
 * @param currentState The current state from which fork transitions are examined.
 */
void sendToTransitionFork(int8_t currentState)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	71fb      	strb	r3, [r7, #7]
    // Check if the current state is valid
    if (currentState >= NUM_STATES) {
 8004d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0a:	2b09      	cmp	r3, #9
 8004d0c:	dc1f      	bgt.n	8004d4e <sendToTransitionFork+0x52>
        // Output an error message or take other actions
        return;
    }

    // Iterate over all possible new states
    for (int8_t new_state = 0; new_state < NUM_STATES; ++new_state) {
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
 8004d12:	e017      	b.n	8004d44 <sendToTransitionFork+0x48>
        // Check if there is a transition from the current state to the new state
        if (transitionForkState[currentState][new_state] == 1) {
 8004d14:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004d18:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8004d1c:	480e      	ldr	r0, [pc, #56]	; (8004d58 <sendToTransitionFork+0x5c>)
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	4403      	add	r3, r0
 8004d28:	440b      	add	r3, r1
 8004d2a:	f993 3000 	ldrsb.w	r3, [r3]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d104      	bne.n	8004d3c <sendToTransitionFork+0x40>
            // Send a message to the message queue associated with the corresponding new state
            MessageQueueState(new_state);
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff ffb4 	bl	8004ca4 <MessageQueueState>
    for (int8_t new_state = 0; new_state < NUM_STATES; ++new_state) {
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d48:	2b09      	cmp	r3, #9
 8004d4a:	dde3      	ble.n	8004d14 <sendToTransitionFork+0x18>
 8004d4c:	e000      	b.n	8004d50 <sendToTransitionFork+0x54>
        return;
 8004d4e:	bf00      	nop
        }
    }
}
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	200034e4 	.word	0x200034e4

08004d5c <sendToTransitionEvent>:
 *
 * @param currentState The current state from which the transition event originates.
 * @param event The event triggering the state transition.
 */
void sendToTransitionEvent(int8_t currentState, int8_t event)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	460a      	mov	r2, r1
 8004d66:	71fb      	strb	r3, [r7, #7]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	71bb      	strb	r3, [r7, #6]
    // Determine the new state based on the transition event and current state
    int8_t newState = handleTransition(event, currentState);
 8004d6c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004d70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d74:	4611      	mov	r1, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff ff3c 	bl	8004bf4 <handleTransition>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	73fb      	strb	r3, [r7, #15]
    // Send a message to the message queue associated with the new state
    MessageQueueState(newState);
 8004d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff ff8d 	bl	8004ca4 <MessageQueueState>
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <sendToTransitionEndState>:
 * The sendToTransitionEndState function sends a message to the message queue associated with the end state of the transition from the current state.
 *
 * @param currentState The current state from which the transition ends.
 */
void sendToTransitionEndState(int8_t currentState)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	71fb      	strb	r3, [r7, #7]
    // Retrieve the end state of the transition from the transitionEndState array
    int8_t endState = transitionEndState[currentState];
 8004d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da2:	4a06      	ldr	r2, [pc, #24]	; (8004dbc <sendToTransitionEndState+0x28>)
 8004da4:	5cd3      	ldrb	r3, [r2, r3]
 8004da6:	73fb      	strb	r3, [r7, #15]
    // Send a message to the message queue associated with the end state
    MessageQueueState(endState);
 8004da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff ff79 	bl	8004ca4 <MessageQueueState>
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	200034d8 	.word	0x200034d8

08004dc0 <waitForOwnState>:
 * The waitForOwnState function waits for the current state to be received from the message queue associated with it.
 *
 * @param currentState Pointer to the variable holding the current state.
 */
void waitForOwnState(int8_t *currentState)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
    // Wait to receive the current state from the associated message queue
    xQueueReceive(getQueueForState(*currentState), currentState, portMAX_DELAY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f993 3000 	ldrsb.w	r3, [r3]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff ff56 	bl	8004c80 <getQueueForState>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fd fd27 	bl	8002830 <xQueueReceive>
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <waitForOwnEvent>:
 *
 * @param currentState The current state for which the event is awaited.
 * @param event Pointer to the variable where the received event will be stored.
 */
void waitForOwnEvent(int8_t currentState, int8_t *event)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	4603      	mov	r3, r0
 8004df2:	6039      	str	r1, [r7, #0]
 8004df4:	71fb      	strb	r3, [r7, #7]
    // Wait for receiving the event associated with the current state from the corresponding message queue
    xQueueReceive(getQueueForState(currentState), event, portMAX_DELAY);
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff ff40 	bl	8004c80 <getQueueForState>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fd fd11 	bl	8002830 <xQueueReceive>
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <memset>:
 8004e16:	4603      	mov	r3, r0
 8004e18:	4402      	add	r2, r0
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d100      	bne.n	8004e20 <memset+0xa>
 8004e1e:	4770      	bx	lr
 8004e20:	f803 1b01 	strb.w	r1, [r3], #1
 8004e24:	e7f9      	b.n	8004e1a <memset+0x4>
	...

08004e28 <_reclaim_reent>:
 8004e28:	4b29      	ldr	r3, [pc, #164]	; (8004ed0 <_reclaim_reent+0xa8>)
 8004e2a:	b570      	push	{r4, r5, r6, lr}
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4604      	mov	r4, r0
 8004e30:	4283      	cmp	r3, r0
 8004e32:	d04b      	beq.n	8004ecc <_reclaim_reent+0xa4>
 8004e34:	69c3      	ldr	r3, [r0, #28]
 8004e36:	b143      	cbz	r3, 8004e4a <_reclaim_reent+0x22>
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d144      	bne.n	8004ec8 <_reclaim_reent+0xa0>
 8004e3e:	69e3      	ldr	r3, [r4, #28]
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	b111      	cbz	r1, 8004e4a <_reclaim_reent+0x22>
 8004e44:	4620      	mov	r0, r4
 8004e46:	f000 f879 	bl	8004f3c <_free_r>
 8004e4a:	6961      	ldr	r1, [r4, #20]
 8004e4c:	b111      	cbz	r1, 8004e54 <_reclaim_reent+0x2c>
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f000 f874 	bl	8004f3c <_free_r>
 8004e54:	69e1      	ldr	r1, [r4, #28]
 8004e56:	b111      	cbz	r1, 8004e5e <_reclaim_reent+0x36>
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 f86f 	bl	8004f3c <_free_r>
 8004e5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004e60:	b111      	cbz	r1, 8004e68 <_reclaim_reent+0x40>
 8004e62:	4620      	mov	r0, r4
 8004e64:	f000 f86a 	bl	8004f3c <_free_r>
 8004e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e6a:	b111      	cbz	r1, 8004e72 <_reclaim_reent+0x4a>
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f000 f865 	bl	8004f3c <_free_r>
 8004e72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e74:	b111      	cbz	r1, 8004e7c <_reclaim_reent+0x54>
 8004e76:	4620      	mov	r0, r4
 8004e78:	f000 f860 	bl	8004f3c <_free_r>
 8004e7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004e7e:	b111      	cbz	r1, 8004e86 <_reclaim_reent+0x5e>
 8004e80:	4620      	mov	r0, r4
 8004e82:	f000 f85b 	bl	8004f3c <_free_r>
 8004e86:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004e88:	b111      	cbz	r1, 8004e90 <_reclaim_reent+0x68>
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f000 f856 	bl	8004f3c <_free_r>
 8004e90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e92:	b111      	cbz	r1, 8004e9a <_reclaim_reent+0x72>
 8004e94:	4620      	mov	r0, r4
 8004e96:	f000 f851 	bl	8004f3c <_free_r>
 8004e9a:	6a23      	ldr	r3, [r4, #32]
 8004e9c:	b1b3      	cbz	r3, 8004ecc <_reclaim_reent+0xa4>
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ea4:	4718      	bx	r3
 8004ea6:	5949      	ldr	r1, [r1, r5]
 8004ea8:	b941      	cbnz	r1, 8004ebc <_reclaim_reent+0x94>
 8004eaa:	3504      	adds	r5, #4
 8004eac:	69e3      	ldr	r3, [r4, #28]
 8004eae:	2d80      	cmp	r5, #128	; 0x80
 8004eb0:	68d9      	ldr	r1, [r3, #12]
 8004eb2:	d1f8      	bne.n	8004ea6 <_reclaim_reent+0x7e>
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f000 f841 	bl	8004f3c <_free_r>
 8004eba:	e7c0      	b.n	8004e3e <_reclaim_reent+0x16>
 8004ebc:	680e      	ldr	r6, [r1, #0]
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f000 f83c 	bl	8004f3c <_free_r>
 8004ec4:	4631      	mov	r1, r6
 8004ec6:	e7ef      	b.n	8004ea8 <_reclaim_reent+0x80>
 8004ec8:	2500      	movs	r5, #0
 8004eca:	e7ef      	b.n	8004eac <_reclaim_reent+0x84>
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}
 8004ece:	bf00      	nop
 8004ed0:	2000005c 	.word	0x2000005c

08004ed4 <__libc_init_array>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	2600      	movs	r6, #0
 8004ed8:	4d0c      	ldr	r5, [pc, #48]	; (8004f0c <__libc_init_array+0x38>)
 8004eda:	4c0d      	ldr	r4, [pc, #52]	; (8004f10 <__libc_init_array+0x3c>)
 8004edc:	1b64      	subs	r4, r4, r5
 8004ede:	10a4      	asrs	r4, r4, #2
 8004ee0:	42a6      	cmp	r6, r4
 8004ee2:	d109      	bne.n	8004ef8 <__libc_init_array+0x24>
 8004ee4:	f000 f87e 	bl	8004fe4 <_init>
 8004ee8:	2600      	movs	r6, #0
 8004eea:	4d0a      	ldr	r5, [pc, #40]	; (8004f14 <__libc_init_array+0x40>)
 8004eec:	4c0a      	ldr	r4, [pc, #40]	; (8004f18 <__libc_init_array+0x44>)
 8004eee:	1b64      	subs	r4, r4, r5
 8004ef0:	10a4      	asrs	r4, r4, #2
 8004ef2:	42a6      	cmp	r6, r4
 8004ef4:	d105      	bne.n	8004f02 <__libc_init_array+0x2e>
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efc:	4798      	blx	r3
 8004efe:	3601      	adds	r6, #1
 8004f00:	e7ee      	b.n	8004ee0 <__libc_init_array+0xc>
 8004f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f06:	4798      	blx	r3
 8004f08:	3601      	adds	r6, #1
 8004f0a:	e7f2      	b.n	8004ef2 <__libc_init_array+0x1e>
 8004f0c:	080052c4 	.word	0x080052c4
 8004f10:	080052c4 	.word	0x080052c4
 8004f14:	080052c4 	.word	0x080052c4
 8004f18:	080052c8 	.word	0x080052c8

08004f1c <__retarget_lock_acquire_recursive>:
 8004f1c:	4770      	bx	lr

08004f1e <__retarget_lock_release_recursive>:
 8004f1e:	4770      	bx	lr

08004f20 <memcpy>:
 8004f20:	440a      	add	r2, r1
 8004f22:	4291      	cmp	r1, r2
 8004f24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f28:	d100      	bne.n	8004f2c <memcpy+0xc>
 8004f2a:	4770      	bx	lr
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f32:	4291      	cmp	r1, r2
 8004f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f38:	d1f9      	bne.n	8004f2e <memcpy+0xe>
 8004f3a:	bd10      	pop	{r4, pc}

08004f3c <_free_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4605      	mov	r5, r0
 8004f40:	2900      	cmp	r1, #0
 8004f42:	d040      	beq.n	8004fc6 <_free_r+0x8a>
 8004f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f48:	1f0c      	subs	r4, r1, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bfb8      	it	lt
 8004f4e:	18e4      	addlt	r4, r4, r3
 8004f50:	f000 f83c 	bl	8004fcc <__malloc_lock>
 8004f54:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <_free_r+0x8c>)
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	b933      	cbnz	r3, 8004f68 <_free_r+0x2c>
 8004f5a:	6063      	str	r3, [r4, #4]
 8004f5c:	6014      	str	r4, [r2, #0]
 8004f5e:	4628      	mov	r0, r5
 8004f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f64:	f000 b838 	b.w	8004fd8 <__malloc_unlock>
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	d908      	bls.n	8004f7e <_free_r+0x42>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	1821      	adds	r1, r4, r0
 8004f70:	428b      	cmp	r3, r1
 8004f72:	bf01      	itttt	eq
 8004f74:	6819      	ldreq	r1, [r3, #0]
 8004f76:	685b      	ldreq	r3, [r3, #4]
 8004f78:	1809      	addeq	r1, r1, r0
 8004f7a:	6021      	streq	r1, [r4, #0]
 8004f7c:	e7ed      	b.n	8004f5a <_free_r+0x1e>
 8004f7e:	461a      	mov	r2, r3
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b10b      	cbz	r3, 8004f88 <_free_r+0x4c>
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	d9fa      	bls.n	8004f7e <_free_r+0x42>
 8004f88:	6811      	ldr	r1, [r2, #0]
 8004f8a:	1850      	adds	r0, r2, r1
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d10b      	bne.n	8004fa8 <_free_r+0x6c>
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	4401      	add	r1, r0
 8004f94:	1850      	adds	r0, r2, r1
 8004f96:	4283      	cmp	r3, r0
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	d1e0      	bne.n	8004f5e <_free_r+0x22>
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4408      	add	r0, r1
 8004fa2:	6010      	str	r0, [r2, #0]
 8004fa4:	6053      	str	r3, [r2, #4]
 8004fa6:	e7da      	b.n	8004f5e <_free_r+0x22>
 8004fa8:	d902      	bls.n	8004fb0 <_free_r+0x74>
 8004faa:	230c      	movs	r3, #12
 8004fac:	602b      	str	r3, [r5, #0]
 8004fae:	e7d6      	b.n	8004f5e <_free_r+0x22>
 8004fb0:	6820      	ldr	r0, [r4, #0]
 8004fb2:	1821      	adds	r1, r4, r0
 8004fb4:	428b      	cmp	r3, r1
 8004fb6:	bf01      	itttt	eq
 8004fb8:	6819      	ldreq	r1, [r3, #0]
 8004fba:	685b      	ldreq	r3, [r3, #4]
 8004fbc:	1809      	addeq	r1, r1, r0
 8004fbe:	6021      	streq	r1, [r4, #0]
 8004fc0:	6063      	str	r3, [r4, #4]
 8004fc2:	6054      	str	r4, [r2, #4]
 8004fc4:	e7cb      	b.n	8004f5e <_free_r+0x22>
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	200036ac 	.word	0x200036ac

08004fcc <__malloc_lock>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__malloc_lock+0x8>)
 8004fce:	f7ff bfa5 	b.w	8004f1c <__retarget_lock_acquire_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	200036a8 	.word	0x200036a8

08004fd8 <__malloc_unlock>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__malloc_unlock+0x8>)
 8004fda:	f7ff bfa0 	b.w	8004f1e <__retarget_lock_release_recursive>
 8004fde:	bf00      	nop
 8004fe0:	200036a8 	.word	0x200036a8

08004fe4 <_init>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	bf00      	nop
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr

08004ff0 <_fini>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr
